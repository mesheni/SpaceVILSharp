testcase2 123
 Тесты производительности.

ВВЕДЕНИЕ
    По просьбе "подписчика ХХХ" в этом видео я продемострирую производительность фреймворка SpaceVIL. В качестве основного показателя производительности
буду использовать количество отрисовываемых кадров в секунду (FPS) в различных стрессовых ситуациях. Постараюсь показать каких случаев стоит избегать
при использовании фреймворка. В итоге, на данный момент развия SpaceVIL, я остался доволен общей производительностью фреймворка, хотя я отчетливо вижу
дальнейшие способы оптимизации рендеринга.

ТЕСТ 0 - Сравнение производительности старой версии фреймворка с новой
    Несмотря на то, что старая версия фреймворка удавлетворяла меня своей оптимизацией, я все же решил перед этим видео реализовать все свои задумки по оптимизации.
Хотя их давно стоило применить, если учесть, что все для этого уже было готово.
    Формат видео будет таким: сначала я демонстрирую тест и засекаю количество фпс, после этого я показываю тот же тест, но на старой версии фреймворка для сравнения.
    Тесты я буду проводить на ферсиях фреймвока для JVM на OS Windows 10. Компьютер у меня следующий - видеокарта nvidia gtx 760, процессор i7 4790K.
    Так же хочу отметить, что специально для тестов я использую особую версию фреймворка, в которой не включена синхронизация и которая выдает максимально
возможное количество кадров в секунду в данных тестах. Обычная версия SpaceVIL имеет динамическую производительность, в простое показатель FPS зависит от
заданного значения функции setRenderFrequency, а в динамике повышается до максимально возможного значения, которое ограничено сложностью сцены и частоты 
вашего дисплея. Если оставить разблокировку, то любая ваша программа будет необоснованно потреблять большое количество ресурсов вашего процессора и видеокарты.

ТЕСТ 1 - Производительность большого количества отдельных элементов
ТЕСТ 2 - Производительность большого количества отдельных элементов, когда значительная часть элементов не видна
    Данный тест покажет как хорошо фреймворк может справляться с большим количеством интерактивных элементов. В качестве теста я взял WrapGrid и буду наполнять его
кнопками размером 8 на 8 пикселей. Начнем с 1000 кнопок и посмотрим как хорошо справляется движок рендеринга. Как видим среднее количество кадров в секунду около ХХХ.
Давайте увеличим до 5000. Показатель FPS значительно просел, но все еще достаточно высок, около 30 кадров в секунду. Давайте значительно повысим количество кнопок - до 
100000 и посмотрим, как фреймворк справится с этим. Показатель упал не так уж сильно, но все потому, что значительная часть кнопок находится не в диапазоне отрисовки,
давайте развернем окно полностью и посмотим как справится фреймворк с этим. Даже в таком тесте UI программы можно назвать с натяжкой все еще отзывчивым.
Вы сможете работать в такой программе, но конечно уже без удовольствия. Давайте проверим сколько же кнопок одновременно показывает движок, я привязал событие к кнопкам,
которое выводит на консоль ее порядковый номер. Примерно 18 000 элементов.
    Давайте теперь посмотрим как далеко сможет зайти старая версия фреймворка. Так же начнем с 1000. Средний показатель XX, что для пользователя неплохо, но этот
результат значительно ниже, чем у новой версии. Давайте теперь отобразим 5000 кнопок. В приципе тоже неплохо, но уже подбирается к критически низкому показателю.
Пора перейти на стрес тест, увеличим показатель до 100 000. Лично я думал будет все намного хуже, но все равно с таким показателем ФПС рабоать с программой невозможно.
    Первый тест пройден. Поэтому я сделаю несколько комментариев по поводу его результата. Во-первых, в высоко нагруженном UI обычно около 200 - 300 отображаемых
интерактивных элементов. Например, вы можете посчитать в Visual Studio или Photoshop. В Visual Studio их около 250. Если же вы считаете, что 5000 элементов это мало и в
некоторых задачах вам нужно отображать намного больше, то для вас приготовлен специальный тест.

ТЕСТ 3 - Производительность большого количества элементов с использованием класса Graph
    Иногда, требуется отобразить большое количество объектов, которые не обязательно должны быть интерактивными. Такие как научные данные. Например граф.
    Для этого в SpaceVIL существуют два интерфейса - InterfacePointsContainer и InterfaceLinesContainer. Во фреймворке есть элемент, который использует эти интерфейсы.
    Его мы и будем тестировать. 
    Давайте сгенерируем какие-нибудь данные и загрузим их в элемент Graph для отображения. Для красоты я выбрал фрактал снежинку Коха. А в граф мы загрузим
сразу три такие снежинки, общее количество точет будет равняться около 3400. Давайте начнем с одного такого элемента. Значение FPS очень высоко, так что не будем ходить
да около, а создадим сразу 64 таких графика. Показатель значительно просел до ХХХ. Но все равно он очень высок. Теперь давайте учтем следующее - общее количество точек
в графах - около 217 000 и они отображаются все одновременно, тогда как в предыдущем тесте 18 000 кнопок показывали очень низкий FPS. Поэтому если вам
нужно отобразить какие-нибудь научные данные в виде точек или линий, то для этого подойдет реализация вышеупомянутых интерфейсов.
    Теперь давайте посмотрим, как справится с такой задачей старая версия фреймворка. Начнем мы с одного графа. Как вы видите - дальше этот тест можно уже не проводить.

ТЕСТ 4 - Производительность рендеринга текста
    Следующий тест - проверка рендеринга текста. Рендеринг текста не зависит от количества символов, только от количества отображаемых одновременно строк. 
В этом тесте я уже не буду сравнивать старую версию и новую версию фреймворка. Только покажу с чем способен справится движок рендеринга фреймворка.
    Я буду вводить сплошние строки текста и добавлять их в новые строки и таким образом мы сможем увидеть динамику падения показателя FPS.
    Стартовый показатель ФПС очень высок, давайте заполним первую строку.
    Показатель остался неизменным. Давайте скопируем и будем медленно добавлять новые строки до самого конца.
    ФПС хоть и упал но незначительно, теперь будем добавлять по целой странице и посмотрим, что произойдет.
    ФПС все так же высок, давайте узнаем сколько текста мы добавили. 1500 строк, это около 350 000 символов.
    Как я и сказал ранее - рендеринг текста не зависит от количества символов.

ТЕСТ 5 - Производительность эффекта теней
    Рендеринг теней на данном этапе не оптимизирован во фреймворке. Поэтому большое количество теней может сильно снижать производительность, учтите это, если хотите
добавить тени к объектам.
    Я продемонстрирую как справляется фреймворк с тенями на модифицированном первом тесте, только вместо WrapGrid я буду использовать вертикальный и горизонтальные стеки.
    Сейчас вы видите 1024 кнопки и 1024 тени и тени очень сильно влияют на производительность, с XXX до неприятных ХХ.

ДЕМОНСТРАЦИЯ - Показать среднюю производительность, написанных программ на примре OwnLibs и SimpleImageViewer 
    Сейчас я покажу какой показатель ФПС выдает программа SimpleImageViewer. Как вы видите запас производительности достаточно высок.
    И на в заключение покажу еще одну программу, которая на данный момент является самой загруженной UI программой, написанной на SpaceVIL.
    В программе довольно неплохой UI и она использует бОльшую часть возможностей фреймворка. И также выдает неплохой показатель фпс.

ЗАКЛЮЧЕНИЕ
    И на этом я с вапи прощаюсь, надеюсь видео было интересным. спасибо за просмотр и удачи.
    


Заметки:
- производительность зависит от одновреммено отрисовываемых элементов
- в программах обычно одновременно отрисовывается около 200 интерактивных элементов
- количество текста в элементе TextArea не сильно влияет на общую производительность (только количество отображаемых строк)
