<?xml version="1.0"?>
<doc>
    <assembly>
        <name>com.spvessel.spacevil-1.0-net-dev</name>
    </assembly>
    <members>
        <member name="T:SpaceVIL.Common.CommonService">
            <summary>
            CommonService is static class providing methods to getting basic information 
            about the SpaceVIL framework, OS attributes, 
            initializing the SpaceVIL framework and working with clipboard.
            </summary>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.GetSpaceVILInfo">
            <summary>
            Getting basic information about SpaceVIL such as version, date, platform and OS.
            </summary>
            <returns>The information as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.GetOSType">
            <summary>
            Getting the current OS type.
            </summary>
            <returns>The OS type as SpaceVIL.Core.OSType.</returns>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.InitSpaceVILComponents">
            <summary>
            Initializing the mandatory SpaceVIL common components (GLFW, default values and etc.).
            </summary>
            <returns>True: if initialization is successful. False: if initialization is unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.GetClipboardString">
            <summary>
            Getting stored text in clipboard.
            </summary>
            <returns>The text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.SetClipboardString(System.String)">
            <summary>
            Placing the specified text to the clipboard.
            </summary>
            <param name="text">The text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.GetOsControlKeyRight">
            <summary>
            Getting the default right "control" key KeyCode of current OS (for Mac OS - Command key)
            </summary>
            <returns>The keyboard key as SpaceVIL.Core.KeyCode</returns>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.GetOsControlKeyLeft">
            <summary>
            Getting the default left "control" key KeyCode of current OS (for Mac OS - Command key)
            </summary>
            <returns>The keyboard key as SpaceVIL.Core.KeyCode</returns>
        </member>
        <member name="M:SpaceVIL.Common.CommonService.GetOsControlMod">
            <summary>
            Getting the default "control" modifier KeyCode of current OS (for Mac OS - Command key)
            </summary>
            <returns>The keyboard modifier as SpaceVIL.Core.KeyMods</returns>
        </member>
        <member name="T:SpaceVIL.Common.DefaultsService">
            <summary>
            DefaultsService is static class providing methods to getting SpaceVIL default common values such as font, mouse cursor, icon images. 
            </summary>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.SetDefaultCursor(SpaceVIL.Decorations.CursorImage)">
            <summary>
            Setting default cursor image the current application.
            </summary>
            <param name="cursor">The mouse cursor image as SpaceVIL.Decorations.CursorImage</param>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultCursor">
            <summary>
            Getting the current default mouse cursor image.
            </summary>
            <returns>The mouse cursor image as SpaceVIL.Decorations.CursorImage</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultTheme">
            <summary>
            Getting the default theme.
            </summary>
            <returns>The theme as SpaceVIL.Decorations.ThemeStyle</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.SetDefaultTheme(SpaceVIL.Decorations.ThemeStyle)">
            <summary>
            Setting the default theme for the current application.
            </summary>
            <param name="theme">The theme as SpaceVIL.Decorations.ThemeStyle</param>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultStyle(System.Type)">
            <summary>
            Getting the default item style from the current default theme by its type.
            </summary>
            <param name="type">Item type as System.Type
            <para/>Example: typeof(SpaceVIL.ButtonCore)
            </param>
            <returns>Style as SpaceVIL.Decorations.Style</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultFont">
            <summary>
            Getting the current default font for the current application.
            </summary>
            <returns>The current default font as System.Drawing.Font</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultFont(System.Int32)">
            <summary>
            Getting the current default font with the specified font size for the current application.
            </summary>
            <param name="size">A font size as System.Int32</param>
            <returns>The current default font with changed font size as System.Drawing.Font</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultFont(System.Drawing.FontStyle,System.Int32)">
            <summary>
            Getting the current default font with the specified font size and font style for the current application.
            </summary>
            <param name="style">A font style as System.Drawing.FontStyle</param>
            <param name="size">A font size as System.Int32</param>
            <returns>The current default font with changed font size and font style as System.Drawing.Font</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.SetDefaultFont(System.Drawing.Font)">
            <summary>
            Setting the default font for the current application.
            </summary>
            <param name="font">A font as System.Drawing.Font</param>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetDefaultImage(SpaceVIL.Core.EmbeddedImage,SpaceVIL.Core.EmbeddedImageSize)">
            <summary>
            Getting the specified image by the type and size of the image, which is stored in the SpaceVIL framework.
            </summary>
            <param name="image">
            An image type as SpaceVIL.Core.EmbeddedImage
            <para/>Example: SpaceVIL.Core.EmbeddedImage.Gear (to get gear icon)
            </param>
            <param name="size">
            An image size as SpaceVIL.Core.EmbeddedImageSize (only 32x32 or 64x64)
            <para/>Example: SpaceVIL.Core.EmbeddedImage.Size32x32 (to get an image in 32x32 pixels)
            </param>
            <returns>Copy of image icon as System.Drawing.Bitmap</returns>
        </member>
        <member name="M:SpaceVIL.Common.DefaultsService.GetKeyCodeByScancode(System.Int32)">
            <summary>
            Returns KeyCode of specified scancode key of keyboard.
            </summary>
            <param name="scancode">Scancode key of keyboard.</param>
            <returns>The key as com.spvessel.spacevil.Flags.KeyCode.</returns>
        </member>
        <member name="T:SpaceVIL.Common.DisplayService">
            <summary>
            DisplayService is static class providing methods to getting display attributes such as size and dpi scale.
            </summary>
        </member>
        <member name="M:SpaceVIL.Common.DisplayService.GetDisplayWidth">
            <summary>
            Getting the current display width.
            </summary>
            <returns>The current display width as System.Int32.</returns>
        </member>
        <member name="M:SpaceVIL.Common.DisplayService.GetDisplayHeight">
            <summary>
            Getting the current display height.
            </summary>
            <returns>The current display height as System.Int32.</returns>
        </member>
        <member name="M:SpaceVIL.Common.DisplayService.GetDisplayDpiScale">
            <summary>
            Getting the current display scale.
            </summary>
            <returns>The current display scale as SpaceVIL.Core.Scale.</returns>
        </member>
        <member name="M:SpaceVIL.Common.DisplayService.GetWindowDpiScale(SpaceVIL.CoreWindow)">
            <summary>
            Getting the current window scale.
            </summary>
            <param name="window">A window as SpaceVIL.CoreWindow.</param>
            <returns>The current window scale as SpaceVIL.Core.Scale.</returns>
        </member>
        <member name="T:SpaceVIL.Common.RenderService">
            <summary>
            RenderService is static class providing methods to managing OpenGL attributes such as settings and viewport used by SpaceVIL.
            <para/> Tip: RenderService is usualy used with SpaceVIL.Core.IOpenGLLayer.
            </summary>
        </member>
        <member name="M:SpaceVIL.Common.RenderService.RestoreCommonGLSettings(SpaceVIL.CoreWindow)">
            <summary>
            Restoring initial SpaceVIL OpenGL settings for the specified window (if they have been changed).
            </summary>
            <param name="window">A window as SpaceVIL.CoreWindow.</param>
        </member>
        <member name="M:SpaceVIL.Common.RenderService.RestoreViewport(SpaceVIL.CoreWindow)">
            <summary>
            Restoring initial OpenGL viewport of SpaceVIL environment 
            for the specified window (if it was changed).
            </summary>
            <param name="window">A window as SpaceVIL.CoreWindow.</param>
        </member>
        <member name="M:SpaceVIL.Common.RenderService.SetGLLayerViewport(SpaceVIL.CoreWindow,SpaceVIL.Core.IOpenGLLayer)">
            <summary>
            Setting custom viewport by the specified window and SpaceVIL.Core.IOpenGLLayer.
            </summary>
            <param name="window">A window as SpaceVIL.CoreWindow.</param>
            <param name="layer">An item that extends Prototype and implements SpaceVIL.Core.IOpenGLLayer.</param>
        </member>
        <member name="T:SpaceVIL.FontService">
            <summary>
            FontService is a static class with static methods for working with colors, shapes and images.
            </summary>
        </member>
        <member name="M:SpaceVIL.FontService.ChangeFontSize(System.Int32,System.Drawing.Font)">
            <summary>
            Changing font size.
            </summary>
            <param name="size">New size of the font.</param>
            <param name="oldFont">Font as System.Drawing.Font.</param>
            <returns>New sized font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.FontService.ChangeFontStyle(System.Drawing.FontStyle,System.Drawing.Font)">
            <summary>
            Changing font style.
            </summary>
            <param name="style">New style of the font.</param>
            <param name="oldFont">Font as System.Drawing.Font.</param>
            <returns>New styled font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.FontService.ChangeFontFamily(System.Drawing.FontFamily,System.Drawing.Font)">
            <summary>
            Changing font family.
            </summary>
            <param name="fontFamily">New font family of the font.</param>
            <param name="oldFont">Font as System.Drawing.Font.</param>
            <returns>New font as System.Drawing.Font.</returns>
        </member>
        <member name="T:SpaceVIL.Core.Area">
            <summary>
            Area class represents a rectangular region with a specified position.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Area.#ctor">
            <summary>
            Default constructor. All values are zero.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Area.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Area with specified position and size.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="w">Area width.</param>
            <param name="h">Area height.</param>
        </member>
        <member name="M:SpaceVIL.Core.Area.SetX(System.Int32)">
            <summary>
            Setting X position.
            </summary>
            <param name="value">X position.</param>
        </member>
        <member name="M:SpaceVIL.Core.Area.SetY(System.Int32)">
            <summary>
            Setting Y position.
            </summary>
            <param name="value">Y position.</param>
        </member>
        <member name="M:SpaceVIL.Core.Area.SetWidth(System.Int32)">
            <summary>
            Setting area width.
            </summary>
            <param name="value">An area width.</param>
        </member>
        <member name="M:SpaceVIL.Core.Area.SetHeight(System.Int32)">
            <summary>
            Setting area height.
            </summary>
            <param name="value">An area height.</param>
        </member>
        <member name="M:SpaceVIL.Core.Area.GetX">
            <summary>
            Getting X position.
            </summary>
            <returns>Current X position value.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Area.GetY">
            <summary>
            Getting Y position.
            </summary>
            <returns>Current Y position value.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Area.GetWidth">
            <summary>
            Getting area width.
            </summary>
            <returns>Current area width.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Area.GetHeight">
            <summary>
            Getting area height.
            </summary>
            <returns>Current area height.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Area.SetAttr(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting all area attributes.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="w">Area width.</param>
            <param name="h">Area height.</param>
        </member>
        <member name="T:SpaceVIL.Core.DropArgs">
            <summary>
            A class that describe mouse "drag and drop" input (file system).
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.DropArgs.Item">
            <summary>
            An item on which the drop event occurs.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.DropArgs.Count">
            <summary>
            Number of selected paths.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.DropArgs.Paths">
            <summary>
            List of selected paths.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.DropArgs.Clear">
            <summary>
            Clearing DropArgs.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.MSAA">
            <summary>
            Multisample anti-aliasing enum.
            <para/> Values: No, MSAA2x, MSAA4x, MSAA8x.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.OSType">
            <summary>
            Operating system types enum.
            <para/> Values: Windows, Linux, Mac.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ItemAlignment">
            <summary>
            Alignment types enum.
            <para/> Values: Left, Top, Right, Bottom, HCenter, VCenter.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.SizePolicy">
            <summary>
            Size policy types enum.
            <para/> Values: Fixed, Expand.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.SizePolicy.Fixed">
            <summary>
            Size is fixed and cannot be changed.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.SizePolicy.Expand">
            <summary>
            The form will be stretched inside the container to all available space.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ItemStateType">
            <summary>
            Item state types enum.
            <para/> Values: Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemStateType.Base">
            <summary>
            Base static item's condition. 
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemStateType.Hovered">
            <summary>
            Item's condition when mouse cursor inside items area. 
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemStateType.Pressed">
            <summary>
            Item's condition when mouse cursor inside items area and any mouse button is pressed.
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemStateType.Toggled">
            <summary>
            Item's condition when it is toggled.
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemStateType.Focused">
            <summary>
            Item's condition when it is focused.
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemStateType.Disabled">
            <summary>
            Item's condition when it is disabled.
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.Orientation">
            <summary>
            Orientation enum. 
            <para/> Used in such items as scroll bars, sliders, wrap grid and etc.
            <para/> Values: Vertical, Horizontal.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.VisibilityPolicy">
            <summary>
            Visibility types of item enum. Used in such items as scroll bars.
            <para/> Values: Always, AsNeeded, Never.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.VisibilityPolicy.Always">
            <summary>
            Item is always visible.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.VisibilityPolicy.AsNeeded">
            <summary>
            Item can be visible in some circumstances.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.VisibilityPolicy.Never">
            <summary>
            Item is always invisible.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ItemHoverRule">
            <summary>
            Item hovering rule types enum.
            <para/> Values: Lazy, Strict.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemHoverRule.Lazy">
            <summary>
            Hover function will return True if mouse cursor located inside rectangle area of its shape even if shape is not a rectangle.
            <para/> Example: Function will return True If shape is triangle and mouse cursor located outside this triangle, 
            but inside rectangle area that bounds this triangle.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.ItemHoverRule.Strict">
            <summary>
            Hover function will return True only if mouse cursor located inside the shape of the item.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.EmbeddedFont">
            <summary>
            Enum of SpaceVIL embedded fonts.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.GeometryEventType">
            <summary>
            Enum of event types directly related to events that change the size and position of an item.
            <para/> Where Item is class extended from SpaceVIL.Prototype.
            <para/> Values: Focused, MovedX, MovedY, ResizeWidth, ResizeHeight.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.HorizontalDirection">
            <summary>
            Enum of types of horizontal directions.
            <para/> Values: FromLeftToRight, FromRightToLeft.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.InputEventType">
            <summary>
            Enums of types of input events.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.InputState">
            <summary>
            Enum of types of input conditions.
            <para/> Values: Release, Press, Repeat.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.KeyCode">
            <summary>
            Enum of key codes of keyboard.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.KeyMods">
            <summary>
            Enum of keyboard modifiers.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.KeyMods.Super">
            <summary>
            Can be Windows key (in WinOS), Command key (in MacOS)
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.MouseButton">
            <summary>
            Enum of button codes of mouse.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.LayoutType">
            <summary>
            Enum of items types.
            <para/> Values: Static, Floating, Dialog.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.LayoutType.Static">
            <summary>
            Items whose parent LayoutType is Static.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.LayoutType.Floating">
            <summary>
            Items whose root parent LayoutType is Floating.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.LayoutType.Dialog">
            <summary>
            Items whose root parent LayoutType is Dialog.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.TreeItemType">
            <summary>
            Enum of types of TreeItems. Used in TreeView and TreeItem.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.EmbeddedImage">
            <summary>
            Enum of SpaceVIL embedded images.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.EmbeddedImageSize">
            <summary>
            Enum of SpaceVIL embedded images sizes.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.FileSystemEntryType">
            <summary>
            Enum of file system entry types.
            <para/> Values: File, Directory.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.OpenDialogType">
            <summary>
            Enum of open dialog types.
            <para/> Values: Open, Save.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.Side">
            <summary>
            Enum of types of sides.
            <para/> Values: Left, Top, Right, Bottom.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.RedrawFrequency">
            <summary>
            Enum of types of frequencies for redraw.
            <para/> Values: VeryLow, Low, Medium, High, Ultra.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.EmbeddedCursor">
            <summary>
            Enum of types of embedded mouse cursors.
            <para/> Values: Arrow, IBeam, Crosshair, Hand, ResizeX, ResizeY, ResizeXY.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.RenderType">
            <summary>
            Enum of types render.
            <para/> Values: IfNeeded, Periodic, Always.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.RenderType.IfNeeded">
            <summary>
            The scene is redrawn only if any input event occurs (mouse move, mouse click, 
            keyboard key press, window resizing and etc.).
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.RenderType.Periodic">
            <summary>
            The scene is redrawn according to the current render frequency type 
            (See SetRenderFrequency(type)) in idle and every time when any input event occurs.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.RenderType.Always">
            <summary>
            The scene is constantly being redrawn.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ImageQuality">
            <summary>
            Enum of image filtering quality.
            <para/> Values: Smooth, Rough.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.Geometry">
            <summary>
            Class Geometry describes all geometry properties of the item.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetWidth">
            <summary>
            Getting item width.
            </summary>
            <returns> Width of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetMinWidth(System.Int32)">
            <summary>
            Setting the minimum width limit. Actual width cannot be less than this limit.
            </summary>
            <param name="width"> Minimum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetMinWidth">
            <summary>
            Getting the minimum width limit.
            </summary>
            <returns> Minimum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetMaxWidth(System.Int32)">
            <summary>
            Setting the maximum width limit. Actual width cannot be greater than this limit.
            </summary>
            <param name="width"> Maximum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetMaxWidth">
            <summary>
            Getting the maximum width limit.
            </summary>
            <returns> Maximum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetHeight">
            <summary>
            Getting item height.
            </summary>
            <returns> Height of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetMinHeight(System.Int32)">
            <summary>
            Setting the minimum height limit. Actual height cannot be less than this limit.
            </summary>
            <param name="height"> Minimum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetMinHeight">
            <summary>
            Getting the minimum height limit.
            </summary>
            <returns> Minimum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetMaxHeight(System.Int32)">
            <summary>
            Setting the maximum height limit. Actual height cannot be greater than this limit.
            </summary>
            <param name="height"> Maximum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetMaxHeight">
            <summary>
            Getting the maximum height limit.
            </summary>
            <returns> Maximum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting item size (width and height).
            </summary>
            <param name="width"> Width of the item. </param>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.Geometry.GetSize">
            <summary>
            Getting current item size.
            </summary>
            <returns>Item size as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="T:SpaceVIL.Core.IAppearanceExtension">
            <summary>
            IAppearanceExtension is an interface for managing effects of the item's shape.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IAppearanceExtension.Add(SpaceVIL.Core.IEffect)">
            <summary>
            Adding effect to the item.
            </summary>
            <param name="effect">An effect as SpaceVIL.Core.IEffect.</param>
        </member>
        <member name="M:SpaceVIL.Core.IAppearanceExtension.Remove(SpaceVIL.Core.IEffect)">
            <summary>
            Removing specified effect from item.
            </summary>
            <param name="effect">An effect as SpaceVIL.Core.IEffect.</param>
        </member>
        <member name="M:SpaceVIL.Core.IAppearanceExtension.Get(SpaceVIL.Core.EffectType)">
            <summary>
            Getting list of applyed effects on the item.
            </summary>
            <param name="type">List of effects of specified item as List&lt;SpaceVIL.Core.IBaseItem&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:SpaceVIL.Core.IAppearanceExtension.Clear(SpaceVIL.Core.EffectType)">
            <summary>
            Clearing all specified effects from the item.
            </summary>
            <param name="type">An effect type as SpaceVIL.Flags.EffectType.</param>
        </member>
        <member name="M:SpaceVIL.Core.IAppearanceExtension.Clear">
            <summary>
            Clearing all effects.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IBaseItem">
            <summary>
            The main interface of SpaceVIL environment. Contains all the necessary methods for rendering objects and interacting with them.
            <para/> Implementations: BaseItem, Prototype, Primitive.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetHandler(SpaceVIL.CoreWindow)">
            <summary>
            Setting the window to which the item will belong.
            </summary>
            <param name="handler">Window as SpaceVIL.CoreWindow.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.GetHandler">
            <summary>
            Getting the window to which the item will belong.
            </summary>
            <returns>Window as SpaceVIL.CoreWindow.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetParent(SpaceVIL.Prototype)">
            <summary>
            Setting the parent of the item.
            </summary>
            <param name="parent">Parent as SpaceVIL.Prototype 
            (Prototype is container and can contains children).</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.GetParent">
            <summary>
            Getting the parent of the item.
            </summary>
            <returns>Parent as SpaceVIL.Prototype 
            (Prototype is container and can contains children).</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetConfines">
            <summary>
            Setting the confines of the item relative to its parent's size and position.
            <para/> Example: items can be partially (or completely) outside the container (example: ListBox), 
            in which case the part that is outside the container should not be visible and should not interact with the user.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetConfines(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the confines of the item relative to specified bounds.
            <para/> Example: items can be partially (or completely) outside the container (example: ListBox), 
            in which case the part that is outside the container should not be visible and should not interact with the user.
            </summary>
            <param name="x0">Left X begin position.</param>
            <param name="x1">Right X end position.</param>
            <param name="y0">Top Y begin position.</param>
            <param name="y1">Bottom Y end position.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting the indents of an item to offset itself relative to its container.
            </summary>
            <param name="margin">Margin as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the indents of an item to offset itself relative to its container.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.GetMargin">
            <summary>
            Getting the indents of an item to offset itself relative to its container.
            </summary>
            <returns>Margin as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.InitElements">
            <summary>
            Initializing children if this IBaseItem is container (SpaceVIL.Prototype).
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style that describes the appearance of an item.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.GetCoreStyle">
            <summary>
            Getting the core (only appearance properties without inner styles) style of an item.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.IsDrawable">
            <summary>
            Getting the drawable (visibility) status of an item. This property used in 
            conjunction with the IsVisible() property.
            <para/> Explanation: an item can be visible and invisible, in some cases 
            the item can be located outside the container (example: SpaceVIL.ListBox), 
            and it must be invisible so as not to waste CPU / GPU resources, but in some 
            cases you must control the visibility of elements that are inside container 
            and should be invisible (example: SpaceVIL.TreeView).
            </summary>
            <returns>True: if item is drawable (visible). False: if item is not drawable (invisible).</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetDrawable(System.Boolean)">
            <summary>
            Setting the drawable (visibility) status of an item. This property used in 
            conjunction with the IsVisible() property.
            <para/> Explanation: an item can be visible and invisible, in some cases 
            the item can be located outside the container (example: SpaceVIL.ListBox), 
            and it must be invisible so as not to waste CPU / GPU resources, but in some 
            cases you must control the visibility of elements that are inside container 
            and should be invisible (example: SpaceVIL.TreeView).
            </summary>
            <param name="value">True: if item should be drawable (visible). 
            False: if item should not be drawable (invisible).</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.IsVisible">
            <summary>
            Getting the visibility status of an item. This property may used in 
            conjunction with the IsDrawable() property.
            </summary>
            <returns>True: if item is visible. False: if item is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.SetVisible(System.Boolean)">
            <summary>
            Setting the visibility status of an item. This property may used in 
            conjunction with the IsDrawable() property.
            </summary>
            <param name="value">True: if item should be visible. 
            False: if item should be invisible.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.Release">
            <summary>
            Method to describe disposing item's resources if the item was removed.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IBaseItem.Effects">
            <summary>
            Gettting access to manage visual effects of the item.
            </summary>
            <returns>Implementation of an SpaceVIL.Core.IAppearanceExtension interface.</returns>
        </member>
        <member name="T:SpaceVIL.Core.IBehavior">
            <summary>
            An interface that describes the alignment of the item and size policy of the item.
            <para/> This interface is part of SpaceVIL.Core.IBaseItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IBehavior.SetAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting an alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBehavior.GetAlignment">
            <summary>
            Getting an alignment of an item's shape relative to its container. 
            </summary>
            <returns>Alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBehavior.SetWidthPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting width policy of an item's shape. Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <param name="policy">Width policy as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBehavior.GetWidthPolicy">
            <summary>
            Getting width policy of an item's shape.Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <returns>Width policy as SpaceVIL.Core.SizePolicy.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBehavior.SetHeightPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting height policy of an item's shape. Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <param name="policy">Height policy as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBehavior.GetHeightPolicy">
            <summary>
            Getting height policy of an item's shape.Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <returns>Height policy as SpaceVIL.Core.SizePolicy.</returns>
        </member>
        <member name="T:SpaceVIL.Core.IBorder">
            <summary>
            IBorder is an interface for creating classes that decorates item's shape with border.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IBorder.GetRadius">
            <summary>
            Getting border radiuses.
            </summary>
            <returns>Border radiuses as SpaceVIL.Decorations.CornerRadius.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBorder.SetRadius(SpaceVIL.Decorations.CornerRadius)">
            <summary>
            Setting radius of the border's corners.
            </summary>
            <param name="value">Radiuses of the border's corners as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBorder.GetColor">
            <summary>
            Getting the border color oa an item's shape.
            </summary>
            <returns>Border color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBorder.SetColor(System.Drawing.Color)">
            <summary>
            Setting the border color of an item's shape.
            </summary>
            <param name="color">Border color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Core.IBorder.GetThickness">
            <summary>
            Getting border thickness of an item's shape.
            </summary>
            <returns>Border thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IBorder.SetThickness(System.Int32)">
            <summary>
            Setting border thickness of an item's shape.
            </summary>
            <param name="thickness">Border thickness.</param>
        </member>
        <member name="T:SpaceVIL.Core.IDialogItem">
            <summary>
            An interface that defines the dialog type of an item.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IDraggable">
            <summary>
            An interface that defines the draggable type of an interactive item (such item can receive EventMouseDrag event).
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IEffect">
            <summary>
            An interface that define visual effect that can be attached to an item.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IEffect.GetEffectName">
            <summary>
            Getting the name of the current implementation of the visual effect.
            </summary>
            <returns>Name of the visual effect as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IEffect.IsApplied">
            <summary>
            Returns True if the effect is applied, False otherwise.
            </summary>
            <returns>True: if effect is applied. False: if effect is not applied.</returns>
        </member>
        <member name="T:SpaceVIL.Core.IEventUpdate">
            <summary>
            An interface that describes update events by type of event.
            <para/> This interface is part of SpaceVIL.Core.IBaseItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IEventUpdate.Update(SpaceVIL.Core.GeometryEventType,System.Int32)">
            <summary>
            Method for updating an item size or/and position.
            </summary>
            <param name="type">Type of event as SpaceVIL.Core.GeometryEventType.</param>
            <param name="value">Value of a property that was changed.</param>
        </member>
        <member name="T:SpaceVIL.Core.IFloating">
            <summary>
            An interface that describes floating independent type of items.
            <para/> Notice: All floating items render above all others items.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IFloating.Show">
            <summary>
            Method that describes how to display an item.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IFloating.Show(SpaceVIL.Core.IItem,SpaceVIL.Core.MouseArgs)">
            <summary>
            Method that describes how to display an element, depending on the sender and mouse arguments.
            </summary>
            <param name="sender">Sender as SpaceVIL.Core.IItem.</param>
            <param name="args">Mouse arguments as SpaceVIL.Core.MouseArgs.</param>
        </member>
        <member name="M:SpaceVIL.Core.IFloating.Hide">
            <summary>
            Method that describes how to hide an item.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IFloating.Hide(SpaceVIL.Core.MouseArgs)">
            <summary>
            Method that describes how to display an element, depending on mouse arguments.
            </summary>
            <param name="args">Mouse arguments as SpaceVIL.Core.MouseArgs.</param>
        </member>
        <member name="M:SpaceVIL.Core.IFloating.IsOutsideClickClosable">
            <summary>
            Method for getting boolean value of item's behavior when mouse click occurs outside the item.
            </summary>
            <returns>True: an item will become invisible if mouse click occurs outside the item.
            False: an item will stay visible if mouse click occurs outside the item.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IFloating.SetOutsideClickClosable(System.Boolean)">
            <summary>
            Method for setting boolean value of item's behavior when mouse click occurs outside the item.
            </summary>
            <param name="value">True: an item should become invisible if mouse click occurs outside the item.
            False: an item should stay visible if mouse click occurs outside the item.</param>
        </member>
        <member name="T:SpaceVIL.Core.IFreeLayout">
            <summary>
            An interface that defines free type of a container.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IFreeLayout.UpdateLayout">
            <summary>
            Method for describing how to update the size and position of children within a container.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IHLayout">
            <summary>
            An interface that defines horizontal type of a container.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IHLayout.UpdateLayout">
            <summary>
            Method for describing how to update the size and position of children within a container.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IImageItem">
            <summary>
            An interface that discribes such type of items that are images (for texturing).
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetImage">
            <summary>
            Method for describing how to get a bitmap in the form of System.Drawing.Bitmap.
            </summary>
            <returns>Image as System.Drawing.Bitmap.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetImageWidth">
            <summary>
            Method for describing how to get an image width.
            </summary>
            <returns>Image width.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetImageHeight">
            <summary>
            Method for describing how to get an image height.
            </summary>
            <returns>Image height.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetColorOverlay">
            <summary>
            Method for getting color overlay (useful in images that have alpha channel).
            </summary>
            <returns>Color overlay as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.IsColorOverlay">
            <summary>
            Method for getting color overlay status.
            </summary>
            <returns>True: if color overlay is using. False: if color overlay is not using.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetRotationAngle">
            <summary>
            Method for getting rotation angle of an image.
            </summary>
            <returns>Rotation angle.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetAreaBounds">
            <summary>
            Method for getting bounds for an image (for example: to keep aspect ratio).
            </summary>
            <returns>Bounds as SpaceVIL.Core.Area.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IImageItem.GetImageQuality">
            <summary>
            Method for getting an image filtering quality.
            </summary>
            <returns>Image filtering quality as SpaceVIL.Core.ImageQuality.</returns>
        </member>
        <member name="T:SpaceVIL.Core.IInputEventArgs">
            <summary>
            An interface that defines input events arguments.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IInputEventArgs.Clear">
            <summary>
            Method for clearing (restoring) all arguments.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IItem">
            <summary>
            An interface that describes common item's properties.
            <para/> This interface is part of SpaceVIL.Core.IBaseItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IItem.SetItemName(System.String)">
            <summary>
            Method for setting the name of the item.
            </summary>
            <param name="name">Item name as System.String.</param>
        </member>
        <member name="M:SpaceVIL.Core.IItem.GetItemName">
            <summary>
            Method for getting the name of the item.
            </summary>
            <returns>Item name as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IItem.SetBackground(System.Drawing.Color)">
            <summary>
            Method for setting background color.
            </summary>
            <param name="color">Background color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Core.IItem.GetBackground">
            <summary>
            Method for getting background color.
            </summary>
            <returns>Background color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IItem.GetTriangles">
            <summary>
            Method for getting triangles of item's shape.
            </summary>
            <returns>Points list of the shape as List of float[2] array (2D).</returns>
        </member>
        <member name="M:SpaceVIL.Core.IItem.SetTriangles(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Method for setting triangles as item's shape.
            </summary>
            <param name="triangles">Points list of the shape as List of float[2] array (2D).</param>
        </member>
        <member name="M:SpaceVIL.Core.IItem.MakeShape">
            <summary>
            Method for making default item's shape. Use in conjunction with 
            GetTriangles() and SetTriangles() methods.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ILines">
            <summary>
            An interface that discribes such type of items 
            that are adjacent points are considered lines (for drawing graphs).
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ILines.SetLineThickness(System.Single)">
            <summary>
            Setting thickness of lines.
            </summary>
            <param name="thickness">Line thickness.</param>
        </member>
        <member name="M:SpaceVIL.Core.ILines.GetLineThickness">
            <summary>
            Getting lines thickness.
            </summary>
            <returns>Lines thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ILines.SetLineColor(System.Drawing.Color)">
            <summary>
            Setting lines color.
            </summary>
            <param name="color">Line color.</param>
        </member>
        <member name="M:SpaceVIL.Core.ILines.GetLineColor">
            <summary>
            Getting lines color.
            </summary>
            <returns>Line color.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ILines.GetPoints">
            <summary>
            Getting adjacent points are considered lines.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ILines.SetPoints(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting adjacent points are considered lines.
            </summary>
            <param name="coord">Points list as List of float[2] array.</param>
        </member>
        <member name="T:SpaceVIL.Core.IMovable">
            <summary>
            An interface that defines the movable type of an interactive item (such item 
            can receive EventMouseMove event).
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IOpenGLLayer">
            <summary>
            Interface for providing OpenGL within SpaceVIL environment.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IOpenGLLayer.Initialize">
            <summary>
            Method for initializing OpenGL components before drawing (shaders, vbo and etc.).
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IOpenGLLayer.IsInitialized">
            <summary>
            Method for checking initializing status of current OpenGL item.
            </summary>
            <returns>Should be True: if an item is already initialized. Should be False: if an item is not initialed yed.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IOpenGLLayer.Draw">
            <summary>
            Method to discribe logic of drawing OpenGL objects.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IOpenGLLayer.Free">
            <summary>
            Method to describe disposing OpenGL resources if the item was removed.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IPoints">
            <summary>
            An interface that discribes such type of items 
            that are points (for drawing graphs).
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.SetPointThickness(System.Single)">
            <summary>
            Setting thickness of points.
            </summary>
            <param name="thickness">Point thickness.</param>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.GetPointThickness">
            <summary>
            Getting points thickness.
            </summary>
            <returns>Point thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.SetPointColor(System.Drawing.Color)">
            <summary>
            Setting points color.
            </summary>
            <param name="color">Points color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.GetPointColor">
            <summary>
            Getting points color.
            </summary>
            <returns>Points color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.SetPointShape(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting custom shape for points (if one want to use other shape than circle).
            </summary>
            <param name="shape">Points list of the shape as List of float[2] array.</param>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.GetPointShape">
            <summary>
            Getting current shape of points. Default: circle shape.
            </summary>
            <returns>Points list of the shape as List of float[2] array.</returns>
            
        </member>
        <member name="M:SpaceVIL.Core.IPoints.GetPoints">
            <summary>
            Getting points coordinates.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IPoints.SetPoints(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting points coordinates.
            </summary>
            <param name="coord">Points list as List of float[2] array.</param>
        </member>
        <member name="T:SpaceVIL.Core.IPosition">
            <summary>
            An interface that describes the attributes of the position of a shape.
            <para/> This interface is part of SpaceVIL.Core.IBaseItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IPosition.SetX(System.Int32)">
            <summary>
            Method for setting X coordinate of the left-top corner of a shape.
            </summary>
            <param name="x">X coordinate.</param>
        </member>
        <member name="M:SpaceVIL.Core.IPosition.GetX">
            <summary>
            Method for getting X coordinate of the left-top corner of a shape.
            </summary>
            <returns>X coordinate.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IPosition.SetY(System.Int32)">
            <summary>
            Method for setting Y coordinate of the left-top corner of a shape.
            </summary>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:SpaceVIL.Core.IPosition.GetY">
            <summary>
            Method for getting Y coordinate of the left-top corner of a shape.
            </summary>
            <returns>Y coordinate.</returns>
        </member>
        <member name="T:SpaceVIL.Core.IShadow">
            <summary>
            IShadow is an interface for creating classes that decorates item's shape with shadow.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IShadow.GetRadius">
            <summary>
            Getting the shadow blur raduis.
            </summary>
            <returns>The blur radius of the shadow. Min value: 0. Max value: 10.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IShadow.GetOffset">
            <summary>
            Getting the offset of the shadow relative to the position of the item.
            </summary>
            <returns>Shadow offset as SpaceVIL.Core.Position.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IShadow.GetColor">
            <summary>
            Getting shadow color.
            </summary>
            <returns>Returns the shadow color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Core.IShadow.GetExtension">
            <summary>
            Getting the values of shadow extensions in pixels.
            </summary>
            <returns>The values of shadow extensions as SpaceVIL.Core.Size</returns>
        </member>
        <member name="T:SpaceVIL.Core.ISize">
            <summary>
            An interface that describes the attributes of the size of a shape.
            <para/> This interface is part of SpaceVIL.Core.IBaseItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetSize(System.Int32,System.Int32)">
            <summary>
            Method setting size of an item's shape.
            </summary>
            <param name="width">Width of a shape.</param>
            <param name="height">Height of a shape.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetSize">
            <summary>
            Method getting size of an item's shape.
            </summary>
            <returns>Size of the shape as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetMinWidth(System.Int32)">
            <summary>
            Method setting the minimum width limit. Actual width cannot be less than this limit.
            </summary>
            <param name="width"> Minimum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetWidth(System.Int32)">
            <summary>
            Method setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width">Width of the item.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetMaxWidth(System.Int32)">
            <summary>
            Method setting the maximum width limit. Actual width cannot be greater than this limit.
            </summary>
            <param name="width">Maximum width limit of the item.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetMinWidth">
            <summary>
            Method getting the minimum width limit.
            </summary>
            <returns> Minimum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetWidth">
            <summary>
            Method fetting item width.
            </summary>
            <returns> Width of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetMaxWidth">
            <summary>
            Method getting the maximum width limit.
            </summary>
            <returns> Maximum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetMinHeight(System.Int32)">
            <summary>
             Method for setting the minimum height limit. Actual height cannot be less than this limit.
            </summary>
            <param name="height"> Minimum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetHeight(System.Int32)">
            <summary>
            Method for setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.SetMaxHeight(System.Int32)">
            <summary>
            Method for setting the maximum height limit. Actual height cannot be greater than this limit.
            </summary>
            <param name="height"> Maximum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetMinHeight">
            <summary>
            Method for getting the minimum height limit.
            </summary>
            <returns> Minimum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetHeight">
            <summary>
            Method for getting item height.
            </summary>
            <returns> Height of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Core.ISize.GetMaxHeight">
            <summary>
            Method for getting the maximum height limit.
            </summary>
            <returns> Maximum height limit of the item. </returns>
        </member>
        <member name="T:SpaceVIL.Core.ISubtractFigure">
            <summary>
            An interface that describes visual effect which cuts specified shape from original item's shape.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.SetSubtractFigure(SpaceVIL.Decorations.Figure)">
            <summary>
            Method for setting shape for subtraction.
            </summary>
            <param name="figure">Figure for subtraction as SpaceVIL.Decoratons.Figure.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.GetSubtractFigure">
            <summary>
            Method for getting the current figure for subtraction.
            </summary>
            <returns>Figure for subtraction as SpaceVIL.Decoratons.Figure.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.SetPositionOffset(System.Int32,System.Int32)">
            <summary>
            Method for setting shape's shift by X, Y axis.
            </summary>
            <param name="x">X axis shift.</param>
            <param name="y">Y axis shift.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.SetSizeScale(System.Single,System.Single)">
            <summary>
            Method for setting shape's scaling factors for width and height.
            </summary>
            <param name="wScale">Scaling factor for width.</param>
            <param name="hScale">Scaling factor for height.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.GetXOffset">
            <summary>
            Method for getting shape's shift by X-axis.
            </summary>
            <returns>X axis shift.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.GetYOffset">
            <summary>
            Method for getting shape's shift by Y-axis.
            </summary>
            <returns>Y axis shift.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.GetWidthScale">
            <summary>
            Method for getting width scaling.
            </summary>
            <returns>Width scaling.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.GetHeightScale">
            <summary>
            Method for getting height scaling.
            </summary>
            <returns>Height scaling.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.SetAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Method for setting shape's allignment within the item.
            </summary>
            <param name="alignments">Alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Core.ISubtractFigure.GetAlignment">
            <summary>
            Method for getting shape's allignment within the item.
            </summary>
            <returns>Alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="T:SpaceVIL.Core.ITextContainer">
            <summary>
            An interface that describes texture for text rendering.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ITextContainer.GetTexture">
            <summary>
            Method for getting text texture.
            </summary>
            <returns>Texture as SpaceVIL.Core.ITextImage.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextContainer.GetForeground">
            <summary>
            Method for getting text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="T:SpaceVIL.Core.ITextEditable">
            <summary>
            An interface that describes elements containing editable text.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ITextImage">
            <summary>
            An interface that describes text image.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ITextImage.GetBytes">
            <summary>
            Method for getting bitmap image as byte array.
            </summary>
            <returns>Bitmap image as byte array.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextImage.IsEmpty">
            <summary>
            Method for getting empty status.
            </summary>
            <returns>True: implementation of the interface does not contain an image.
            False: implementation of the interface contains image.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextImage.GetWidth">
            <summary>
            Method for getting width of the image.
            </summary>
            <returns>Image width.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextImage.GetHeight">
            <summary>
            Method for getting height of the image.
            </summary>
            <returns>Image height.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextImage.GetXOffset">
            <summary>
            Method for getting image offset by X axis.
            </summary>
            <returns>X axis offset.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextImage.GetYOffset">
            <summary>
            Method for getting image offset by Y axis.
            </summary>
            <returns>Y axis offset.</returns>
        </member>
        <member name="T:SpaceVIL.Core.ITextShortcuts">
            <summary>
            An interface that defines items that can receive common keyboard shortcuts 
            (copy, paste, cut and etc.) and describes its attributes.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ITextShortcuts.PasteText(System.String)">
            <summary>
            Method for pasting text.
            </summary>
            <param name="pasteStr">Text for pasting.</param>
        </member>
        <member name="M:SpaceVIL.Core.ITextShortcuts.GetSelectedText">
            <summary>
            Method for getting selected text.
            </summary>
            <returns>Selected text.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextShortcuts.CutText">
            <summary>
            Method for cutting selected text.
            </summary>
            <returns>Cutted text.</returns>
        </member>
        <member name="M:SpaceVIL.Core.ITextShortcuts.Undo">
            <summary>
            Method for undo last change.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ITextShortcuts.Redo">
            <summary>
            Method for redo last undo action.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ITextShortcuts.SelectAll">
            <summary>
            Method for selecting all text in the item.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.ITextWrap">
            <summary>
            An interface that defines text items that can wrap text relative to its width 
            and describes its attributes.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.ITextWrap.IsWrapText">
            <summary>
            Method for getting wrap status of the text item.
            </summary>
            <returns>True: if text is wrapped in width by its container. 
            False: if container does not wraps the contained text.</returns>
        </member>
        <member name="T:SpaceVIL.Core.Interface">
            <summary>
            Not implemented!!!
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IVLayout">
            <summary>
            An interface that defines vertical type of a container.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.IVLayout.UpdateLayout">
            <summary>
            Method for describing how to update the size and position of children within a container.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IVramResource">
            <summary>
            An interface for sealed SpaceVIL OpenGL environment.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.IWindowAnchor">
            <summary>
            An interface that defines the draggable window type of an item.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.KeyArgs">
            <summary>
            A class that describes keyboard key input.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.KeyArgs.Key">
            <summary>
            Key code as SpaceVIL.Core.KeyCode.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.KeyArgs.Scancode">
            <summary>
            Scancode of key.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.KeyArgs.State">
            <summary>
            State of input as SpaceVIL.Core.InputState. Values: Release, Press, Repeat.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.KeyArgs.Mods">
            <summary>
            Used modifiers while typing.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.KeyArgs.Clear">
            <summary>
            Clearing KeyArgs.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.MouseArgs">
            <summary>
            A class that describes mouse inputs.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.MouseArgs.Button">
            <summary>
            Mouse button as SpaceVIL.Core.MouseButton.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.MouseArgs.State">
            <summary>
            State of input as SpaceVIL.Core.InputState. Values: Release, Press, Repeat.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.MouseArgs.Mods">
            <summary>
            Used modifiers while mouse input.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.MouseArgs.Position">
            <summary>
            Mouse cursor position.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.MouseArgs.Clear">
            <summary>
            Clearing MouseArgs
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.Position">
            <summary>
            Position is a class representing the location of a 2D coordinate integer point.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Position.#ctor">
            <summary>
            Default Position constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Position constructor with specified X and Y coordinates.
            </summary>
            <param name="x">X position of the 2D point.</param>
            <param name="y">Y position of the 2D point.</param>
        </member>
        <member name="M:SpaceVIL.Core.Position.SetX(System.Int32)">
            <summary>
            Setting X position of the 2D point.
            </summary>
            <param name="x"> X position of the 2D point. </param>
        </member>
        <member name="M:SpaceVIL.Core.Position.GetX">
            <summary>
            Getting X position of the 2D point.
            </summary>
            <returns> X position of the 2D point. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Position.SetY(System.Int32)">
            <summary>
            Setting Y position of the 2D point.
            </summary>
            <param name="y"> Y position of the 2D point. </param>
        </member>
        <member name="M:SpaceVIL.Core.Position.GetY">
            <summary>
            Getting Y position of the 2D point.
            </summary>
            <returns> Y position of the 2D point. </returns>
        </member>
        <member name="M:SpaceVIL.Core.Position.SetPosition(System.Int32,System.Int32)">
            <summary>
            Setting 2D point position.
            </summary>
            <param name="x"> X position of the 2D point. </param>
            <param name="y"> Y position of the 2D point. </param>
        </member>
        <member name="T:SpaceVIL.Core.Scale">
            <summary>
            Scale is a class that describes the scaling factors along the X and Y axes.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Scale.#ctor">
            <summary>
            Default Scale constructor. All scaling factors are 1.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Scale.#ctor(System.Single,System.Single)">
            <summary>
            Constructs Scale with specified scaling factors.
            </summary>
            <param name="xScale">Scaling factor by X axis.</param>
            <param name="yScale">Scaling factor by Y axis.</param>
        </member>
        <member name="M:SpaceVIL.Core.Scale.SetScale(System.Single,System.Single)">
            <summary>
            Setting scaling factors.
            </summary>
            <param name="xScale">Scaling factor by X axis.</param>
            <param name="yScale">Scaling factor by Y axis.</param>
        </member>
        <member name="M:SpaceVIL.Core.Scale.GetXScale">
            <summary>
            Getting scaling factor by X axis.
            </summary>
            <returns>Scaling factor by X axis.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Scale.GetYScale">
            <summary>
            Getting scaling factor by Y axis.
            </summary>
            <returns>Scaling factor by Y axis.</returns>
        </member>
        <member name="T:SpaceVIL.Core.Size">
            <summary>
            Size is a class that describes the width and height of an object.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Size.#ctor">
            <summary>
            Default Size constructor with width and height equal to 0.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs Size with specified width and height.
            </summary>
            <param name="w">Width of the object.</param>
            <param name="h">Height of the object.</param>
        </member>
        <member name="M:SpaceVIL.Core.Size.GetWidth">
            <summary>
            Getting the width of the object.
            </summary>
            <returns>Width of the object.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Size.SetWidth(System.Int32)">
            <summary>
            Setting the width of the object.
            </summary>
            <param name="value">Width of the object.</param>
        </member>
        <member name="M:SpaceVIL.Core.Size.GetHeight">
            <summary>
            Getting the height of the object.
            </summary>
            <returns>Height of the object.</returns>
        </member>
        <member name="M:SpaceVIL.Core.Size.SetHeight(System.Int32)">
            <summary>
            Setting the height of the object.
            </summary>
            <param name="value">Height of the object.</param>
        </member>
        <member name="M:SpaceVIL.Core.Size.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting the size of the object.
            </summary>
            <param name="w">Width of the object.</param>
            <param name="h">Height of the object.</param>
        </member>
        <member name="T:SpaceVIL.Core.SpaceVILException">
            <summary>
            SpaceVILException is a class of exceptions of the SpaceVIL.
            </summary>
        </member>
        <member name="T:SpaceVIL.Core.TextInputArgs">
            <summary>
            A class that describe keyboard text typing input.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.TextInputArgs.Character">
            <summary>
            Character code.
            </summary>
        </member>
        <member name="F:SpaceVIL.Core.TextInputArgs.Mods">
            <summary>
            Used modifiers while typing.
            </summary>
        </member>
        <member name="M:SpaceVIL.Core.TextInputArgs.Clear">
            <summary>
            Clearing TextInputArgs.
            </summary>
        </member>
        <member name="T:SpaceVIL.Cell">
            <summary>
            Cell is sealed class representing cell in SpaceVIL.Grid.
            You cannot create instances of Cell class, only to get it for proccessing
            from any instance of SpaceVIL.Grid class.
            </summary>
        </member>
        <member name="M:SpaceVIL.Cell.GetParentGrid">
            <summary>
            Getting SpaceVIL.Core.IFreeLayout (usualy SpaceVIL.Grid) 
            instance to which this Cell belongs.
            </summary>
            <returns>Container with cells as SpaceVIL.Core.IFreeLayout 
            (usualy SpaceVIL.Grid).</returns>
        </member>
        <member name="M:SpaceVIL.Cell.GetRow">
            <summary>
            Getting Cell row number.
            </summary>
            <returns>Row number.</returns>
        </member>
        <member name="M:SpaceVIL.Cell.GetColumn">
            <summary>
            Getting Cell column number.
            </summary>
            <returns>Column number.</returns>
        </member>
        <member name="M:SpaceVIL.Cell.GetX">
            <summary>
            Getting X position of the Cell.
            </summary>
            <returns>X position.</returns>
        </member>
        <member name="M:SpaceVIL.Cell.GetY">
            <summary>
            Getting Y position of the Cell.
            </summary>
            <returns>Y position.</returns>
        </member>
        <member name="M:SpaceVIL.Cell.GetItem">
            <summary>
            Getting contained item in the Cell
            </summary>
            <returns>Item as SpaceVIL.Core.IBaseItem</returns>
        </member>
        <member name="T:SpaceVIL.Decorations.Border">
            <summary>
            Border is a class that decorates item's shape with border.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.GetEffectName">
            <summary>
            Getting the effect name. 
            </summary>
            <returns>Returns name Shadow effect as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.GetRadius">
            <summary>
            Getting border radiuses.
            </summary>
            <returns>Border radiuses as SpaceVIL.Decorations.CornerRadius.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.SetRadius(SpaceVIL.Decorations.CornerRadius)">
            <summary>
            Setting radius of the border's corners.
            </summary>
            <param name="value">Radiuses of the border's corners as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.GetColor">
            <summary>
            Getting the border color oa an item's shape.
            </summary>
            <returns>Border color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.SetColor(System.Drawing.Color)">
            <summary>
            Setting the border color of an item's shape.
            </summary>
            <param name="color">Border color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.GetThickness">
            <summary>
            Getting border thickness of an item's shape.
            </summary>
            <returns>Border thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.SetThickness(System.Int32)">
            <summary>
            Setting border thickness of an item's shape.
            </summary>
            <param name="thickness">Border thickness.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.IsApplied">
            <summary>
            Getting the visibility status of a border.
            </summary>
            <returns>True: if border is visible. False: if border is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.SetApplied(System.Boolean)">
            <summary>
            Setting the visibility status of a border.
            </summary>
            <param name="value">True: if border should be visible. 
            False: if border should be invisible.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.#ctor">
            <summary>
            Default Border constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.#ctor(System.Drawing.Color,SpaceVIL.Decorations.CornerRadius,System.Int32)">
            <summary>
            Constructs a Border  with specified color, radius and thickness.
            </summary>
            <param name="color">Border color as System.Drawing.Color.</param>
            <param name="radius">Radiuses of the border's corners as SpaceVIL.Decorations.CornerRadius.</param>
            <param name="thickness">Border thickness.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Border.Clone">
            <summary>
            Clones current Border class instance.
            </summary>
            <returns>Copy of current Border.</returns>
        </member>
        <member name="T:SpaceVIL.Decorations.CornerRadius">
            <summary>
            A class that store radius values for each corner of the rectangle shape.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.CornerRadius.LeftTop">
            <summary>
            Left-top corner radius
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.CornerRadius.RightTop">
            <summary>
            Right-top corner radius
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.CornerRadius.LeftBottom">
            <summary>
            Left-bottom corner radius
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.CornerRadius.RightBottom">
            <summary>
            Right-bottom corner radius
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.CornerRadius.IsCornersZero">
            <summary>
            Checking if all corner radiuses is 0.
            </summary>
            <returns>True: if all corner radiuses is 0. False: if one of the corner radiuses is not 0.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.CornerRadius.#ctor(SpaceVIL.Decorations.CornerRadius)">
            <summary>
            Constructs a CornerRadius with the radius values from other CornerRadius object.
            </summary>
            <param name="radius">Radius values as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.CornerRadius.#ctor(System.Single)">
            <summary>
            Constructs a CornerRadius with the same radius values for each corner of the rectangle object. 
            (default radius = 0).
            </summary>
            <param name="radius">Radius of the item's corners.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.CornerRadius.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a CornerRadius with the radius values for each corner of the rectangle object.
            </summary>
            <param name="lt">Left-top corner radius.</param>
            <param name="rt">Right-top corner radius.</param>
            <param name="lb">Left-bottom corner radius.</param>
            <param name="rb">Right-bottom corner radius.</param>
        </member>
        <member name="T:SpaceVIL.Decorations.CursorImage">
            <summary>
            Class CursorImage provides features for creating custom cursors. It can also 
            be used with several standards types of cursor images (Arrow, IBeam, Crosshair, Hand and etc.).
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.CursorImage.#ctor(SpaceVIL.Core.EmbeddedCursor)">
            <summary>
            Constructor for creating cursor with standards types of cursor images (Arrow, IBeam, Crosshair, Hand and etc.).
            </summary>
            <param name="type">Cursor image as SpaceVIL.Core.EmbeddedCursor enum.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.CursorImage.#ctor(System.Drawing.Bitmap)">
            <summary>
            Constructor for creating cursor with custom bitmap image.
            </summary>
            <param name="bitmap">Cursor image as System.Drawing.Bitmap class.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.CursorImage.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Constructor for creating cursor with custom bitmap image with the specified size.
            </summary>
            <param name="bitmap">Cursor image as System.Drawing.Bitmap class.</param>
            <param name="width">Desired width.</param>
            <param name="height">Desired height.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.CursorImage.GetCursorWidth">
            <summary>
            Getting cursor image width.
            </summary>
            <returns>The width of the image.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.CursorImage.GetCursorHeight">
            <summary>
            Getting cursor image height.
            </summary>
            <returns>The height of the image.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.CursorImage.SetImage(System.Drawing.Bitmap)">
            <summary>
            Setting new image for cursor.
            </summary>
            <param name="image">Cursor image as System.Drawing.Bitmap.</param>
        </member>
        <member name="T:SpaceVIL.Decorations.Figure">
            <summary>
            Figure class represents any triangulated shape. It is used to draw any types of custom shapes.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Figure.GetFigure">
            <summary>
            Getting list of pairs - [x, y] coordinates of a shape.
            </summary>
            <returns> Figure points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Figure.IsFixed">
            <summary>
            Is Figure fixed.
            </summary>
            <returns> True: if shape can not be resized. False: if shape can be resised.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Figure.#ctor(System.Boolean,System.Collections.Generic.List{System.Single[]})">
            <summary>
            Constructs a Figure with specified triangles and specified fixed flag.
            </summary>
            <param name="isFixed"> True: if shape can not be resized. False: if shape can be resised. </param>
            <param name="triangles"> Triangles list of the Figure's shape. </param>
        </member>
        <member name="M:SpaceVIL.Decorations.Figure.#ctor(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Constructs a Figure with specified triangles.
            </summary>
            <param name="triangles">Triangles list of the Figure's shape.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Figure.UpdatePosition(System.Int32,System.Int32)">
            <summary>
            Updating the coordinates of triangles with specified shifts along the X and Y axis.
            </summary>
            <param name="x">Shift by X-axis.</param>
            <param name="y">Shift by Y-axis.</param>
            <returns>Updated points list changed according to the new shift by (x, y)</returns>
        </member>
        <member name="T:SpaceVIL.Decorations.Indents">
            <summary>
            A structure that store indents of the item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Indents.Left">
            <summary>
            Indent from left side of the item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Indents.Top">
            <summary>
            Indent from top side of the item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Indents.Right">
            <summary>
            Indent from right side of the item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Indents.Bottom">
            <summary>
            Indent from bottom side of the item.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Indents.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Indents with strict values for each side (default values is zeros).
            </summary>
            <param name="left">Indent from left side of the item.</param>
            <param name="top">Indent from top side of the item.</param>
            <param name="right">Indent from right side of the item.</param>
            <param name="bottom">Indent from bottom side of the item.</param>
        </member>
        <member name="T:SpaceVIL.Decorations.ItemState">
            <summary>
            A class that describes state of the item and its changes according to state value.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.ItemState.Background">
            <summary>
            Getting backgroud color of the item of current state as System.Drawing.Color.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.ItemState.Border">
            <summary>
            Getting border of the item of current state as SpaceVIL.Decorations.Border.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.ItemState.Shape">
            <summary>
            Getting shape of the item of current state as SpaceVIL.Decorations.Figure.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.ItemState.#ctor">
            <summary>
            Constructs an empty ItemState
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.ItemState.#ctor(System.Drawing.Color)">
            <summary>
            Constructs an ItemState with the specified background color.
            </summary>
            <param name="background">A color of item as System.Drawing.Color.</param>
        </member>
        <member name="T:SpaceVIL.Decorations.Shadow">
            <summary>
            Shadow is visual effect for applying to item's shape. Implements SpaceVIL.Core.IShadow and SpaceVIL.Core.IEffect.
            <para/> This visual effect drops shadow under item's shape.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.GetEffectName">
            <summary>
            Getting the effect name. 
            </summary>
            <returns>Returns name Shadow effect as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetRadius(System.Int32)">
            <summary>
            Setting the specified blur radius of the shadow.
            <para/>Default: 0.
            </summary>
            <param name="value">Blur radius of the shadow. Min value: 0. Max value: 10.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.GetRadius">
            <summary>
            Getting the shadow blur raduis.
            </summary>
            <returns>The blur radius of the shadow. Min value: 0. Max value: 10.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetXOffset(System.Int32)">
            <summary>
            Setting X shift of the shadow.
            </summary>
            <param name="value">Shift by X-axis.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetYOffset(System.Int32)">
            <summary>
            Setting Y shift of the shadow.
            </summary>
            <param name="value">Shift by Y-axis.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.GetOffset">
            <summary>
            Getting the offset of the shadow relative to the position of the item.
            </summary>
            <returns>Shadow offset as SpaceVIL.Core.Position.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetColor(System.Drawing.Color)">
            <summary>
            Setting shadow color.
            </summary>
            <param name="color">Shadow color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting shadow color in RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting shadow color in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Setting shadow color in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting shadow color in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.GetColor">
            <summary>
            Getting shadow color.
            </summary>
            <returns>Returns the shadow color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.SetApplied(System.Boolean)">
            <summary>
            Setting drop shadow status.
            </summary>
            <param name="value">True: allow shadow dropping. False: not allow shadow dropping.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.IsApplied">
            <summary>
            Getting shadow drop status.
            </summary>
            <returns>True: allow shadow dropping. False: not allow shadow dropping.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.GetExtension">
            <summary>
            Getting the values of shadow extensions in pixels.
            </summary>
            <returns>The values of shadow extensions as SpaceVIL.Core.Size</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.#ctor">
            <summary>
            Default Shadow class constructor. Allow shadow dropping.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.#ctor(System.Int32)">
            <summary>
            Shadow class constructor with specified blur radius. Allow shadow dropping.
            </summary>
            <param name="radius">A blur radius of the shadow.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.#ctor(System.Int32,System.Drawing.Color)">
            <summary>
            Shadow class constructor with specified blur radius, shadow color. Allow shadow dropping.
            </summary>
            <param name="radius">A blur radius of the shadow.</param>
            <param name="color">A shadow color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.#ctor(System.Int32,SpaceVIL.Core.Position,System.Drawing.Color)">
            <summary>
            Shadow class constructor with specified blur radius, axis shifts, shadow color. Allow shadow dropping.
            </summary>
            <param name="radius">A blur radius of the shadow.</param>
            <param name="offset">Shift of the shadow.</param>
            <param name="color">A shadow color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.#ctor(System.Int32,SpaceVIL.Core.Size,System.Drawing.Color)">
            <summary>
            Shadow class constructor with specified blur radius, size extensions, shadow color. Allow shadow dropping.
            </summary>
            <param name="radius">A blur radius of the shadow.</param>
            <param name="extension">>Size extension of the shadow.</param>
            <param name="color">A shadow color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.#ctor(System.Int32,SpaceVIL.Core.Position,SpaceVIL.Core.Size,System.Drawing.Color)">
            <summary>
            Shadow class constructor with specified blur radius, axis shifts, size extensions and shadow color. Allow shadow dropping.
            </summary>
            <param name="radius">A blur radius of the shadow.</param>
            <param name="offset">Shift of the shadow.</param>
            <param name="extension">Size extension of the shadow.</param>
            <param name="color">A shadow color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Shadow.Clone">
            <summary>
            Clones current Shadow class instance.
            </summary>
            <returns>Copy of current Shadow.</returns>
        </member>
        <member name="T:SpaceVIL.Decorations.Spacing">
            <summary>
            A class that store vertical and horizontal spacing values of the item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Spacing.Horizontal">
            <summary>
            Horizontal indent between items.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Spacing.Vertical">
            <summary>
            Vertical indent between items.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Spacing.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Spacing with strict horizontal and vertical spacing values.
            <para/> Default Spacing values is zeros.
            </summary>
            <param name="horizontal">Horizontal indent between items.</param>
            <param name="vertical">Vertical indent between items.</param>
        </member>
        <member name="T:SpaceVIL.Decorations.Style">
            <summary>
            Style is a class that describes the appearance of an element. Can contains Styles for inner items.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Background">
            <summary>
            Background color of an item's shape. Attention: this property is required.
            <para/> This property is System.Drawing.Color.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Foreground">
            <summary>
            Color of an item's text. Can be used only if the item contains text and in this case this property is required.
            <para/> This property is System.Drawing.Color.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Font">
            <summary>
            Font of an item's text. Can be used only if the item contains text and in this case this property is required.
            <para/> This property is System.Drawing.Font.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.WidthPolicy">
            <summary>
            Width policy of an item's shape. Can be Fixed (shape not changes its size) or Expand (shape is stretched to all available space). Attention: this property is required.
            <para/> This property is SpaceVIL.Core.SizePolicy.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.HeightPolicy">
            <summary>
            Height policy of an item's shape. Can be Fixed (shape not changes its size) or Expand (shape is stretched to all available space). Attention: this property is required.
            <para/> This property is SpaceVIL.Core.SizePolicy.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Width">
            <summary>
            Width of an item's shape.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.MinWidth">
            <summary>
            Minimum width of an item's shape (shape cannot be smaller this value).
            <para/> Default: 0.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.MaxWidth">
            <summary>
            Maximum width of an item's shape (shape cannot be bigger this value).
            <para/> Default: 32767.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Height">
            <summary>
            Height of an item's shape.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.MinHeight">
            <summary>
            Minimum height of an item's shape (shape cannot be smaller this value).
            <para/> Default: 0.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.MaxHeight">
            <summary>
            Maximum height of an item's shape (shape cannot be bigget this value).
            <para/> Default: 32767.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Alignment">
            <summary>
            Alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            Attention: this property is required.
            <para/> This property is SpaceVIL.Core.ItemAlignment.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.TextAlignment">
            <summary>
            Alignment of an item's text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            Can be used only if the item contains text and in this case this property is required.
            <para/> This property is SpaceVIL.Core.ItemAlignment.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.X">
            <summary>
            X axis position of left-top cornet of an item's shape. This property itself is mostly ignored. Used only when creating container-type items or with SpaceVIL.FreeArea.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Y">
            <summary>
            Y axis position of left-top cornet of an item's shape. This property itself is mostly ignored. Used only when creating container-type items or with SpaceVIL.FreeArea.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Padding">
            <summary>
            Indents of an item to offset its children. Attention: this property is required.
            <para/> This property is SpaceVIL.Decorations.Indents.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Spacing">
            <summary>
            Indents between children of a container type item. It is used mainly in containers.
            <para/> This property is SpaceVIL.Decorations.Spacing.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Margin">
            <summary>
            Indents of an item to offset itself relative to its container. Attention: this property is required.
            <para/> This property is SpaceVIL.Decorations.Indents.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Border">
            <summary>
            Border for an item's shape.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Shape">
            <summary>
            A form of an item's shape. If not assigned, the shape is rectangular.
            <para/> Format: System.Collections.Generic.List&lt;System.Single[]&gt;.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.IsFixedShape">
            <summary>
            A flag that determines if the shape of an item can be changed or not.
            <para/>True: if shape can not be resized. False: if shape can be resised. Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.InnerShapes">
            <summary>
            A storage of shapes for future use. Note: not supported in the current version!
            <para/> Format: System.Collections.Generic.List&lt;SpaceVIL.Core.IBaseItem&gt;.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.Shadow">
            <summary>
            Shadow of an item's shape.
            </summary>
        </member>
        <member name="F:SpaceVIL.Decorations.Style.IsVisible">
            <summary>
            A flag that determines if an item is visible or not.
            <para/> True: if visible. False: if not visible. Default: True.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.#ctor">
            <summary>
            Constructs a default Style. 
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetStyle(SpaceVIL.Core.IBaseItem[])">
            <summary>
            Setting this style for all items in sequence.
            </summary>
            <param name="items">A sequence of items that are SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting size of an item's shape.
            </summary>
            <param name="width">Width of a shape.</param>
            <param name="height">Height of a shape.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetMinSize(System.Int32,System.Int32)">
            <summary>
            Setting minimum size of an item's shape (shape can not be smaller than specified width and height).
            </summary>
            <param name="width">Minimum width of a shape.</param>
            <param name="height">Minimum height of a shape.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetMaxSize(System.Int32,System.Int32)">
            <summary>
            Setting maximim size of an item's shape (shape can not be bigger than specified width and height).
            </summary>
            <param name="width">Maximim width of a shape.</param>
            <param name="height">Maximim height of a shape.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetSizePolicy(SpaceVIL.Core.SizePolicy,SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting the size policy of an item's shape. 
            Can be Fixed (shape not changes its size) or Expand (shape is stretched to all available space).
            </summary>
            <param name="widthPolicy">Width policy of an item's shape.</param>
            <param name="heightPolicy">Height policy of an item's shape.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetBackground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item's shape in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item's shape in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetBackground(System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item's shape in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetBackground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item's shape in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of an item in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of an item in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of an item in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of an item in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetPadding(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents of an item to offset its children.
            </summary>
            <param name="padding">Padding indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents of an item to offset its children.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents of an item to offset itself relative to its container.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents of an item to offset itself relative to its container.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetSpacing(SpaceVIL.Decorations.Spacing)">
            <summary>
            Setting indents between children of a container type item.
            </summary>
            <param name="spacing">Spacing as SpaceVIL.Decorations.Spacing.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetSpacing(System.Int32,System.Int32)">
            <summary>
            Setting indents between children of a container type item.
            </summary>
            <param name="horizontal">Horizontal indent.</param>
            <param name="vertical">Vertical indent.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetBorder(SpaceVIL.Decorations.Border)">
            <summary>
            Setting border of an item's shape. Border consist of corner radiuses, thickness and color.
            </summary>
            <param name="border">Border as SpaceVIL.Decorations.Border.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetBorder(System.Drawing.Color,SpaceVIL.Decorations.CornerRadius,System.Int32)">
            <summary>
            Setting border for an item's shape. Border consist of corner radiuses, thickness and color.
            </summary>
            <param name="color">Border color as System.Drawing.Color.</param>
            <param name="radius">Radiuses of an border corners as SpaceVIL.Decorations.CornerRadius.</param>
            <param name="thickness">Border thickness.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetShadow(SpaceVIL.Decorations.Shadow)">
            <summary>
            Setting shadow for an item's shape. 
            </summary>
            <param name="shadow">Shadow as SpaceVIL.Decorations.Shadow.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting an Alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            Attention: this property is required.
            </summary>
            <param name="alignment">Alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting an Alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            Attention: this property is required.
            </summary>
            <param name="alignment">Alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Alignment of an item's text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            Can be used only if the item contains text and in this case this property is required.
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Alignment of an item's text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            Can be used only if the item contains text and in this case this property is required.
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.AddInnerShape(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding inner primitives to the item (as decorations only).
            Note: not supported in the current version!
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.AddInnerStyle(System.String,SpaceVIL.Decorations.Style)">
            <summary>
            Assigning a style for an item's child by key name.
            </summary>
            <param name="keyName">Key name of a child.</param>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetInnerStyle(System.String)">
            <summary>
            Getting a child’s style by key name.
            </summary>
            <param name="keyName">Key name of a child.</param>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.RemoveInnerStyle(System.String)">
            <summary>
            Removing a child's style by its key name.
            </summary>
            <param name="keyName">Key name of a child.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.AddItemState(SpaceVIL.Core.ItemStateType,SpaceVIL.Decorations.ItemState)">
            <summary>
            Adding visual state for an item. 
            <para/> Type can be Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
            <param name="type">Type as SpaceVIL.Core.ItemStateType.</param>
            <param name="state">Visual state as SpaceVIL.Decorations.ItemState.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetState(SpaceVIL.Core.ItemStateType)">
            <summary>
            Getting visual state of an item by type. 
            <para/> Type can be Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
            <param name="type">Type as SpaceVIL.Core.ItemStateType.</param>
            <returns>Visual state as SpaceVIL.Decorations.ItemState.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetAllStates">
            <summary>
            Getting all presented in the current style visual states of an item.
            </summary>
            <returns> Dictionary of an ItemStateTypes and its ItemStates. </returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.RemoveItemState(SpaceVIL.Core.ItemStateType)">
            <summary>
            Removing visual state of an item by type.
            <para/> Type can be Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
            <param name="type">Type as SpaceVIL.Core.ItemStateType.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.Clone">
            <summary>
            Cloning the current style and returning a new deep copy of Style.
            </summary>
            <returns>Deep copy of current style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetDefaultCommonStyle">
            <summary>
            Getting a default common style. Properly filled in all the necessary properties.
            <para/> Use this method to create instance of Style class instead of  using pure constructor (new Style()).
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetButtonCoreStyle">
            <summary>
            Getting default style for a ButtonCore item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetButtonToggleStyle">
            <summary>
            Getting default style for a ButtonToggle item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetCheckBoxStyle">
            <summary>
            Getting default style for a CheckBox item. Properly filled in all the necessary properties.
            <para/> Inner styles: "indicator", "text".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetIndicatorStyle">
            <summary>
            Getting default style for a Indicator item. Properly filled in all the necessary properties.
            <para/> Inner styles: "marker".
            <para/> This is part of CheckBox item style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTextLineStyle">
            <summary>
            Getting default style for a text type item. Attention: not all the necessary properties properly filled.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetComboBoxStyle">
            <summary>
            Getting default style for a ComboBox item. Properly filled in all the necessary properties.
            <para/> Inner styles: "selection", "dropdownbutton", "dropdownarea", "arrow".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetComboBoxDropDownStyle">
            <summary>
            Getting default style for a ComboBoxDropDown item. Properly filled in all the necessary properties.
            <para/> Inner styles: "itemlist".
            <para/> Inner styles for "itemlist": "vscrollbar", "hscrollbar", "menu".
            <para/> This is part of ComboBox item style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetMenuItemStyle">
            <summary>
            Getting default style for a MenuItem item. Properly filled in all the necessary properties.
            <para/> Inner styles: "text", "arrow".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetContextMenuStyle">
            <summary>
            Getting default style for a ContextMenu item. Properly filled in all the necessary properties.
            <para/> Inner styles: "itemlist".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetFreeAreaStyle">
            <summary>
            Getting default style for a FreeArea item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetFrameStyle">
            <summary>
            Getting default style for a Frame item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetGridStyle">
            <summary>
            Getting default style for a Grid item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetHorizontalScrollBarStyle">
            <summary>
            Getting default style for a HorizontalScrollBar item. Properly filled in all the necessary properties.
            <para/> Inner styles: "uparrow", "downarrow", "slider".
            <para/> Inner styles for "slider": "track", "handler".
            <para/> This is part of many items style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetSimpleHorizontalScrollBarStyle">
            <summary>
            Getting simplified style for a SimpleHorizontalScrollBar item. Properly filled in all the necessary properties.
            <para/> Inner styles: "uparrow", "downarrow", "slider".
            <para/> Inner styles for "slider": "track", "handler".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetVerticalScrollBarStyle">
            <summary>
            Getting default style for a VerticalScrollBar item. Properly filled in all the necessary properties.
            <para/> Inner styles: "uparrow", "downarrow", "slider".
            <para/> Inner styles for "slider": "track", "handler".
            <para/> This is part of many items style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetSimpleVerticalScrollBarStyle">
            <summary>
            Getting simplified style for a SimpleVerticalScrollBar item. Properly filled in all the necessary properties.
            <para/> Inner styles: "uparrow", "downarrow", "slider".
            <para/> Inner styles for "slider": "track", "handler".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetHorizontalSliderStyle">
            <summary>
            Getting default style for a HorizontalSlider item. Properly filled in all the necessary properties.
            <para/> Inner styles: "track", "handler".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetVerticalSliderStyle">
            <summary>
            Getting default style for a VerticalSlider item. Properly filled in all the necessary properties.
            <para/> Inner styles: "track", "handler".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetHorizontalStackStyle">
            <summary>
            Getting default style for a HorizontalStack item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetVerticalStackStyle">
            <summary>
            Getting default style for a VerticalStack item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetHorizontalSplitAreaStyle">
            <summary>
            Getting default style for a HorizontalSplitArea item. Properly filled in all the necessary properties.
            <para/> Inner styles: "splitholder".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetVerticalSplitAreaStyle">
            <summary>
            Getting default style for a VerticalSplitArea item. Properly filled in all the necessary properties.
            <para/> Inner styles: "splitholder".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetLabelStyle">
            <summary>
            Getting default style for a Label item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetListAreaStyle">
            <summary>
            Getting default style for a ListArea item. Properly filled in all the necessary properties.
            <para/> Inner styles: "selection".
            <para/> This is part of many items style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetListBoxStyle">
            <summary>
            Getting default style for a ListBox item. Properly filled in all the necessary properties.
            <para/> Inner styles: "area", "vscrollbar", "hscrollbar", "menu".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetWContainerStyle">
            <summary>
            Note: not supported in current version.
            </summary>
            <returns> default style for WContainer objects. </returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetRadioButtonStyle">
            <summary>
            Getting default style for a RadioButton item. Properly filled in all the necessary properties.
            <para/> Inner styles: "indicator", "text".
            <para/> Inner styles of "indicator": "marker".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetPasswordLineStyle">
            <summary>
            Getting default style for a PasswordLine item. Properly filled in all the necessary properties.
            <para/> Inner styles: "showmarker", "textedit".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTextEditStyle">
            <summary>
            Getting default style for a TextEdit item. Properly filled in all the necessary properties.
            <para/> Inner styles: "text".
            <para/> Inner styles for "text": "cursor", "selection", "substrate".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTextBlockStyle">
            <summary>
            Getting default style for a sealed TextBlock item. Properly filled in all the necessary properties.
            <para/> Inner styles: "cursor", "selection".
            <para/> This is part of TextArea item style as "textedit".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTextAreaStyle">
            <summary>
            Getting default style for a TextArea item. Properly filled in all the necessary properties.
            <para/> Inner styles: "textedit", "vscrollbar", "hscrollbar", "menu".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTextViewStyle">
            <summary>
            Getting default style for a TextView item. Properly filled in all the necessary properties.
            <para/> Inner styles: "selection".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetPopUpMessageStyle">
            <summary>
            Getting default style for a PopUpMessage item. Properly filled in all the necessary properties.
            <para/> Inner styles: "closebutton".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetProgressBarStyle">
            <summary>
            Getting default style for a ProgressBar item. Properly filled in all the necessary properties.
            <para/> Inner styles: "progressbar".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetToolTipStyle">
            <summary>
            Getting default style for a ToolTip item. Properly filled in all the necessary properties.
            <para/> Inner styles: "text".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTitleBarStyle">
            <summary>
            Getting default style for a TitleBar item. Properly filled in all the necessary properties.
            <para/> Inner styles: "closebutton", "minimizebutton", "maximizebutton", "title".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTreeViewStyle">
            <summary>
            Getting default style for a TreeView item. Properly filled in all the necessary properties.
            <para/> Inner styles: "area", "vscrollbar", "hscrollbar", "menu".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTreeItemStyle">
            <summary>
            Getting default style for a TreeItem item. Properly filled in all the necessary properties.
            <para/> Inner styles: "indicator", "branchicon", "leaficon".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetSpinItemStyle">
            <summary>
            Getting default style for a SpinItem item. Properly filled in all the necessary properties.
            <para/> Inner styles: "uparrow", "downarrow", "buttonsarea", "textedit".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetDialogItemStyle">
            <summary>
            Getting default style for a DialogItem item. Properly filled in all the necessary properties.
            <para/> Inner styles: "window".
            <para/> This is part of OpenEntryDialog item style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetMessageItemStyle">
            <summary>
            Getting default style for a MessageItem item. Properly filled in all the necessary properties.
            <para/> Inner styles: "window", "button", "toolbar", "userbar", "message", "layout".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetWindowContainerStyle">
            <summary>
            Getting default style for a window itself. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetFileSystemEntryStyle">
            <summary>
            Getting default style for a FileSystemEntry item. Properly filled in all the necessary properties.
            <para/> Inner styles: "icon", "text".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetOpenEntryDialogStyle">
            <summary>
            Getting default style for a OpenEntryDialog item. Properly filled in all the necessary properties.
            <para/> Inner styles: "window", "layout", "toolbar", "toolbarbutton", 
            "addressline", "filenameline", "list", "controlpanel", "okbutton", 
            "cancelbutton", "filter", "filtertext", "divider".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetInputDialogStyle">
            <summary>
            Getting default style for a InputDialog item. Properly filled in all the necessary properties.
            <para/> Inner styles: "window", "button", "textedit", "layout", "toolbar".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetSelectionItemStyle">
            <summary>
            Getting default style for a SelectionItem item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetWrapAreaStyle">
            <summary>
            Getting default style for a WrapArea item. Properly filled in all the necessary properties.
            <para/> Inner styles: "selection".
            <para/> This is part of WrapGrid item style as "area".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetWrapGridStyle">
            <summary>
            Getting default style for a WrapGrid item. Properly filled in all the necessary properties.
            <para/> Inner styles: "area", "vscrollbar", "hscrollbar".
            <para/> Inner styles for "area": see Style.GetWrapAreaStyle().
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetSideAreaStyle">
            <summary>
            Getting default style for a SideArea item. Properly filled in all the necessary properties.
            <para/> Inner styles: "window", "closebutton".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetImageItemStyle">
            <summary>
            Getting default style for a ImageItem item. Properly filled in all the necessary properties.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetLoadingScreenStyle">
            <summary>
            Getting default style for a LoadingScreen item. Properly filled in all the necessary properties.
            <para/> Inner styles: "text", "image".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTabStyle">
            <summary>
            Getting default style for a Tab item. Properly filled in all the necessary properties.
            <para/> Inner styles: "text", "closebutton", "view".
            <para/> This is part of TabView item style as "tab".
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTabBarStyle">
            <summary>
            Getting default style for a TabBar item. Properly filled in all the necessary properties.
            <para/> This is part of TabView item style.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.Style.GetTabViewStyle">
            <summary>
            Getting default style for a *** item. Properly filled in all the necessary properties.
            <para/> Inner styles: "tabbar", "tab", "viewarea".
            <para/> Inner styles for "tab": see Style.GetTabStyle().
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="T:SpaceVIL.Decorations.SubtractFigure">
            <summary>
            SubtractFigure is visual effect for applying to item's shape. Implements SpaceVIL.Core.ISubtractFigure and SpaceVIL.Core.IEffect.
            <para/> This visual effect cuts specified shape from original item's shape.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.#ctor(SpaceVIL.Decorations.Figure)">
            <summary>
            Constructs subtract effect with specified shape.
            </summary>
            <param name="figure">Figure for subtraction as SpaceVIL.Decoratons.Figure.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.SetSubtractFigure(SpaceVIL.Decorations.Figure)">
            <summary>
            Setting shape for subtraction.
            </summary>
            <param name="figure">Figure for subtraction as SpaceVIL.Decoratons.Figure.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetSubtractFigure">
            <summary>
            Getting the current figure for subtraction.
            </summary>
            <returns>Figure for subtraction as SpaceVIL.Decoratons.Figure.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetEffectName">
            <summary>
            Getting the effect name. 
            </summary>
            <returns>Returns name SubtractEffect as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.SetPositionOffset(System.Int32,System.Int32)">
            <summary>
            Setting shape's shift by X, Y axis.
            </summary>
            <param name="x">X axis shift.</param>
            <param name="y">Y axis shift.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.SetSizeScale(System.Single,System.Single)">
            <summary>
            Setting shape's scaling factors for width and height.
            </summary>
            <param name="wScale">Scaling factor for width.</param>
            <param name="hScale">Scaling factor for height.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetXOffset">
            <summary>
            Getting shape's shift by X-axis.
            </summary>
            <returns>X axis shift.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetYOffset">
            <summary>
            Getting shape's shift by Y-axis.
            </summary>
            <returns>Y axis shift.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetWidthScale">
            <summary>
            Getting width scaling.
            </summary>
            <returns>Width scaling.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetHeightScale">
            <summary>
            Getting height scaling.
            </summary>
            <returns>Height scaling.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.GetAlignment">
            <summary>
            Getting shape's allignment within the item.
            </summary>
            <returns>Alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.SetAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting shape's allignment within the item.
            </summary>
            <param name="alignments">Alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.IsApplied">
            <summary>
            Returns True if the effect is applied, false otherwise.
            </summary>
            <returns>True: if effect is applied. False: if shadow is not applied.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.SubtractFigure.SetApplied(System.Boolean)">
            <summary>
            Determines whether the effect should be applied or not.
            </summary>
            <param name="value">True: if the effect is to be applied. 
            False: if effect is not to be applied.</param>
        </member>
        <member name="T:SpaceVIL.Decorations.ThemeStyle">
            <summary>
            A style theme to store styles for items in the current application.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.#ctor">
            <summary>
            Constructs a default ThemeStyle.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.GetThemeStyle(System.Type)">
            <summary>
            Returns style of the theme for the object by its class name.
            </summary>
            <param name="type">Type of an item as System.Type.</param>
            <returns>Assigned style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.SetCurrentAsDefault">
            <summary>
            Setting this theme as default.
            </summary>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.AddSpecificItemStyle(SpaceVIL.Core.IBaseItem,SpaceVIL.Decorations.Style)">
            <summary>
            Add unique style for the specified item (specific item, not type of item).
            </summary>
            <param name="item">An item as SpaceVIL.Core.IBaseItem.</param>
            <param name="style">A style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.RemoveSpecificItemStyle(SpaceVIL.Core.IBaseItem,SpaceVIL.Decorations.Style)">
            <summary>
            Remove unique style for the item (specific item, not type of item).
            </summary>
            <param name="item">An item as SpaceVIL.Core.IBaseItem.</param>
            <param name="style">A style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.ReplaceDefaultItemStyle(System.Type,SpaceVIL.Decorations.Style)">
            <summary>
            Replace default style for the items with specified class type.
            </summary>
            <param name="type">Type of an item as System.Type.</param>
            <param name="style">A style as SpaceVIL.Decorations.Style.</param>
            <returns>If default style replaced</returns>
        </member>
        <member name="M:SpaceVIL.Decorations.ThemeStyle.AddDefaultCustomItemStyle(System.Type,SpaceVIL.Decorations.Style)">
            <summary>
            Add custom style to default theme for the items with specified class type.
            </summary>
            <param name="type">Type of an item as System.Type.</param>
            <param name="style">A style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.GraphicsMathService">
            <summary>
            GraphicsMathService is a static class with static methods for working with colors, shapes and images.
            </summary>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.MixColors(System.Drawing.Color[])">
            <summary>
            Mixing two or more colors into one.
            </summary>
            <param name="colors">Sequence of colors as System.Drawing.Color.</param>
            <returns>Mixed color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.CloneColor(System.Drawing.Color)">
            <summary>
            Getting clone of the specified color.
            </summary>
            <param name="color">Color for cloning as System.Drawing.Color.</param>
            <returns>Copy of specified color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Making a rectangle as two triangles by its width, height and top left corner position (x, y).
            </summary>
            <param name="w">Width of rectangle (default = 100).</param>
            <param name="h">Height of rectangle (default = 100).</param>
            <param name="x">X position of rectangle (default = 0).</param>
            <param name="y">Y position of rectangle (default = 0).</param>
            <returns>Rectangle points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetRoundSquare(SpaceVIL.Decorations.CornerRadius,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Making a rectangle with roundness corners.
            </summary>
            <param name="cornerRadius"> Radius values for all corners as SpaceVIL.Decorations.CornerRadius.</param>
            <param name="width"> Rectangle width (default = 100). </param>
            <param name="height"> Rectangle height (default = 100). </param>
            <param name="x"> X position (left top corner) of the result object (default = 0). </param>
            <param name="y"> Y position (left top corner) of the result object (default = 0). </param>
            <returns> Points list of the shape with roundness corners as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetRoundSquare(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Making a rectangle with roundness corners.
            </summary>
            <param name="radius"> Same radius value for each corner (default = 0). </param>
            <param name="width"> Rectangle width (default = 100). </param>
            <param name="height"> Rectangle height (default = 100). </param>
            <param name="x"> X position (left top corner) of the result object (default = 0). </param>
            <param name="y"> Y position (left top corner) of the result object (default = 0). </param>
            <returns> Points list of the shape with roundness corners as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetStar(System.Single,System.Single,System.Int32)">
            <summary>
            Making a star figure with specified outer radius, inner radius and number of points.
            </summary>
            <param name="R"> Circumscribed circle radius (default = 100). </param>
            <param name="r"> Incircle radius (default = 50). </param>
            <param name="n"> Vertices count (default = 5). </param>
            <returns> Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetRegularPolygon(System.Single,System.Int32)">
            <summary>
            Making a regular polygon with specified radius and number of edges.
            </summary>
            <param name="r">Radius of regular polygon.</param>
            <param name="n">Number of edges of regular polygon.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetEllipse(System.Single,System.Int32)">
            <summary>
            Making an ellipse with two equal radii (i. e. circle).
            </summary>
            <param name="r">Radius of a circle (default = 100).</param>
            <param name="n">Points count on the ellipse border (default = 32). </param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetEllipse(System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Making an ellipse.
            </summary>
            <param name="w"> Ellipse width. </param>
            <param name="h"> Ellipse height. </param>
            <param name="x"> X position of the left top corner (ellipse center in x + w/2) (default = 0). </param>
            <param name="y"> Y position of the left top corner (ellipse center in y + h/2) (default = 0). </param>
            <param name="n"> points count on the ellipse border (default = 32). </param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetTriangle(System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Making a triangle with corners in (x + w/2, y), (x, y + h), (x + w, y + h), rotated on angle degrees.
            </summary>
            <param name="w">Triangle width (default = 100).</param>
            <param name="h">Triangle height (default = 100).</param>
            <param name="x">Triangle X offset (default = 0).</param>
            <param name="y">Triangle Y offset (default = 0).</param>
            <param name="angle"> Rotation angle for the triangle in degrees (default = 0). </param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetCross(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Making cross shape with specified width, height, thickness and rotation angle.
            </summary>
            <param name="w"> Cross width. </param>
            <param name="h"> Cross height. </param>
            <param name="thickness"> Cross parts thickness. </param>
            <param name="alpha"> Cross rotation angle in degrees. </param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.RotateShape(System.Single,System.Single,System.Single,System.Collections.Generic.List{System.Single[]})">
            <summary>
            Rotating the specified shape.
            </summary>
            <param name="w">Width of the shape.</param>
            <param name="h">Height of the shape.</param>
            <param name="angle">Rotation angle in degrees.</param>
            <param name="triangles">Triangles list of the specified shape.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetArrow(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Making an arrow shape.
            </summary>
            <param name="w">Arrow width.</param>
            <param name="h">Arrow height.</param>
            <param name="thickness">Arrow thickness.</param>
            <param name="alpha">Rotation angle in degrees.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.MoveShape(System.Collections.Generic.List{System.Single[]},System.Single,System.Single)">
            <summary>
            Moving the specified shape by X or/and Y direction.
            </summary>
            <param name="shape">Triangles list of the specified shape.</param>
            <param name="x">X axis shift.</param>
            <param name="y">Y axis shift.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetFolderIconShape(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Making folder icon shape.
            </summary>
            <param name="w">Shape width (default = 20).</param>
            <param name="h">Shape width (default = 15).</param>
            <param name="x">Shape X axis shift (default = 0).</param>
            <param name="y">Shape Y axis shift (default = 0).</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetRoundSquareBorder(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Making a rectangle border with roundness corners.
            </summary>
            <param name="width"> Rectangle border width. </param>
            <param name="height"> Rectangle border height. </param>
            <param name="radius"> Same radius value for each corner. </param>
            <param name="thickness"> Border thickness. </param>
            <param name="x"> X position (left top corner) of the result shape. </param>
            <param name="y"> Y position (left top corner) of the result shape. </param>
            <returns> Points list of the rectangle border with roundness corners as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetRoundSquareBorder(SpaceVIL.Decorations.CornerRadius,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Making a rectangle border with roundness corners.
            </summary>
            <param name="cornerRadius"> Radius values for all corners as SpaceVIL.Decorations.CornerRadius.</param>
            <param name="width"> Rectangle border width. </param>
            <param name="height"> Rectangle border height. </param>
            <param name="thickness"> Border thickness. </param>
            <param name="x"> X position (left top corner) of the result shape. </param>
            <param name="y"> Y position (left top corner) of the result shape. </param>
            <returns> Points list of the rectangle border with roundness corners as List of float[2] array</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.ScaleBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Smooth scaling the specified image by new size.
            </summary>
            <param name="img">Image as System.Drawing.Bitmap.</param>
            <param name="w">New width of the image.</param>
            <param name="h">New height of the image.</param>
            <returns>Scaled image as System.Drawing.Bitmap.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.ColorTransform(System.Int32,System.Int32,System.Int32)">
            <summary>
            Making System.Drawing.Color from specified byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <returns>Color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.ColorTransform(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Making System.Drawing.Color from specified byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
            <returns>Color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.ColorTransform(System.Single,System.Single,System.Single)">
            <summary>
            Making System.Drawing.Color from specified float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <returns>Color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.ColorTransform(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Making System.Drawing.Color from specified float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
            <returns>Color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.UpdateShape(System.Collections.Generic.List{System.Single[]},System.Int32,System.Int32)">
            <summary>
            Updating the specified shape by its new size (streching by new size).
            </summary>
            <param name="triangles">Triangles list of the specified shape.</param>
            <param name="w">New shape width.</param>
            <param name="h">New shape height.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.UpdateShape(System.Collections.Generic.List{System.Single[]},System.Int32,System.Int32,SpaceVIL.Core.Area,SpaceVIL.Core.ItemAlignment)">
            <summary>
            Updating the specified shape by its new size (streching by new size).
            </summary>
            <param name="triangles">Triangles list of the specified shape.</param>
            <param name="w">New shape width.</param>
            <param name="h">New shape height.</param>
            <param name="area">New shape bounds as SpaceVIL.Core.Area.</param>
            <param name="alignments">New shape alignments as List of SpaceVIL.Core.ItemAlignment.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.GetFigureBounds(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Getting a shape's bounds as SpaceVIL.Core.Area.
            </summary>
            <param name="triangles">Triangles list of the specified shape.</param>
            <returns>Shape's bounds as SpaceVIL.Core.Area.</returns>
        </member>
        <member name="M:SpaceVIL.GraphicsMathService.MoveShape(System.Collections.Generic.List{System.Single[]},System.Single,System.Single,SpaceVIL.Core.Area,SpaceVIL.Core.ItemAlignment)">
            <summary>
            Moving the specified shape relative to the specified area, specifiedalignment and specified shifts.
            </summary>
            <param name="triangles">Triangles list of the specified shape.</param>
            <param name="x">X axis shift.</param>
            <param name="y">Y axis shift.</param>
            <param name="area">Area as SpaceVIL.Core.Area.</param>
            <param name="alignments">Alignment as SpaceVIL.Core.ItemAlignment.</param>
            <returns>Points list of the shape as List of float[2] array.</returns>
        </member>
        <member name="T:SpaceVIL.ItemsRefreshManager">
            <summary>
            ItemsRefreshManager is a manager that allows you to add an item of a certain type to the queue for a forced refresh. 
            It can be use with custom implementation of one of the types: shape, text, image. 
            For example: a Bitmap change in an IImageItem implementation, a shape change in an IBaseItem implementation.
            </summary>
        </member>
        <member name="M:SpaceVIL.ItemsRefreshManager.SetRefreshShape(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding an IBaseItem implementation to the queue for a forced refresh.
            <para/>Tips: use this function only if you want to refresh shape of an item, 
            ITextContainer and IImageItem are not shapes.
            </summary>
            <param name="item">An item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if adding is successfull. False: if an item is already in the refresh queue.</returns>
        </member>
        <member name="M:SpaceVIL.ItemsRefreshManager.SetRefreshText(SpaceVIL.Core.ITextContainer)">
            <summary>
            Adding an ITextContainer implementation to the queue for a forced refresh.
            <para/>Tips: use this function only if you want to refresh text of an item, 
            IBaseItem and IImageItem are not text.
            </summary>
            <param name="item">An item as SpaceVIL.Core.ITextContainer.</param>
            <returns>True: if adding is successfull. False: if an item is already in the refresh queue.</returns>
        </member>
        <member name="M:SpaceVIL.ItemsRefreshManager.SetRefreshImage(SpaceVIL.Core.IImageItem)">
            <summary>
            Adding an IImageItem implementation to the queue for a forced refresh.
            <para/>Tips: use this function only if you want to refresh image of an item, 
            IBaseItem and ITextContainer are not images.
            </summary>
            <param name="item">An item as SpaceVIL.Core.IImageItem.</param>
            <returns>True: if adding is successfull. False: if an item is already in the refresh queue.</returns>
        </member>
        <member name="T:SpaceVIL.WindowManager">
            <summary>
            WindowManager is a static class that is designed to manage instances of a window and entire application. 
            Provides control for changing render frequency, render type, vertical sync, adding/closing windows, exiting the app and more.
            </summary>
        </member>
        <member name="M:SpaceVIL.WindowManager.SetRenderFrequency(SpaceVIL.Core.RedrawFrequency)">
            <summary>
            Setting the frequency of redrawing scene in idle state. 
            The higher the level, the more computer resources are used. 
            Default: SpaceVIL.Core.RedrawFrequency.Low
            <para/>Can be: 
            <para/>VeryLow - 1 frame per second, 
            <para/>Low - up to 10 frames per second, 
            <para/>Medium - up to 30 frames per second,
            <para/>High - up to 60 frames per second,
            <para/>Ultra - up to 120 frames per second,
            </summary>
            <param name="level">A frequency level as SpaceVIL.Core.RedrawFrequency</param>
        </member>
        <member name="M:SpaceVIL.WindowManager.GetRenderFrequency">
            <summary>
            Getting the current render frequency.
            </summary>
            <returns>The current render frequency as SpaceVIL.Core.RedrawFrequency.</returns>
        </member>
        <member name="M:SpaceVIL.WindowManager.EnableVSync(System.Int32)">
            <summary>
            Setting the vsync value. If value is 0 - vsync is OFF, if other value - vsync is ON. 
            The total amount of FPS calculated by the formula: 1.0 / Math.Abs(value) * DisplayRefreshRate, 
            so if value is 2 (or -2) and dysplay refresh rate is 60 then 1.0 / 2 * 60 = 30 fps.
            Default: 1 - ENABLE.
            </summary>
            <param name="value">Value of vsync.</param>
        </member>
        <member name="M:SpaceVIL.WindowManager.GetVSyncValue">
            <summary>
            Getting the current vsync value. If value is 0 - vsync is OFF, if other value - vsync is ON. 
            The total amount of FPS calculated by the formula: 1.0 / Math.Abs(value) * DisplayRefreshRate, 
            so if value is 2 (or -2) and dysplay refresh rate is 60 then 1.0 / 2 * 60 = 30 fps.
            Default: 1 - ENABLE.
            </summary>
            <returns>The current vsync value</returns>
        </member>
        <member name="M:SpaceVIL.WindowManager.SetRenderType(SpaceVIL.Core.RenderType)">
            <summary>
            Setting the common render type. Default: SpaceVIL.Core.RenderType.Periodic.
            <para/>Can be:
            <para/>IfNeeded - the scene is redrawn only if any input event occurs (mouse move, mouse click, 
            keyboard key press, window resizing and etc.), 
            <para/>Periodic - the scene is redrawn according to the current render frequency type 
            (See SetRenderFrequency(type)) in idle and every time when any input event occurs, 
            <para/>Always - the scene is constantly being redrawn.
            </summary>
            <param name="type">A render type as SpaceVIL.Core.RenderType.</param>
        </member>
        <member name="M:SpaceVIL.WindowManager.AddWindow(SpaceVIL.CoreWindow)">
            <summary>
            Adding a window to rendering queue. After adding the window shows up immediately.
            </summary>
            <param name="wnd">Any CoreWindow instance.</param>
        </member>
        <member name="M:SpaceVIL.WindowManager.CloseWindow(SpaceVIL.CoreWindow)">
            <summary>
            Closing the specified window if it exist in render queue.
            </summary>
            <param name="wnd">Any CoreWindow instance.</param>
        </member>
        <member name="M:SpaceVIL.WindowManager.StartWith(SpaceVIL.CoreWindow[])">
            <summary>
            Launching the applications and showing all specified windows.
            </summary>
            <param name="windows">A sequence of any amount of CoreWindow instances.</param>
        </member>
        <member name="M:SpaceVIL.WindowManager.AppExit">
            <summary>
            Exiting the current application. All windows will be closed and all their EventClose will be executed.
            </summary>
        </member>
        <member name="T:SpaceVIL.BaseItem">
            <summary>
            Abstract class implementation of SpaceVIL.Core.IBaseItem interface. 
            <para/> SpaceVIL.Core.IBaseItem is the main interface of SpaceVIL environment. 
            <para/> Contains all the necessary methods for rendering objects and interacting with them.
            </summary>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetHandler(SpaceVIL.CoreWindow)">
            <summary>
            Setting the window to which the item will belong.
            </summary>
            <param name="handler">Window as SpaceVIL.CoreWindow.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetHandler">
            <summary>
            Getting the window to which the item will belong.
            </summary>
            <returns>Window as SpaceVIL.CoreWindow.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetParent">
            <summary>
            Getting the parent of the item.
            </summary>
            <returns>Parent as SpaceVIL.Prototype 
            (Prototype is container and can contains children).</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetParent(SpaceVIL.Prototype)">
            <summary>
            Setting the parent of the item.
            </summary>
            <param name="parent">Parent as SpaceVIL.Prototype 
            (Prototype is container and can contains children).</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.InitElements">
            <summary>
            Initializing children if this BaseItem is container (SpaceVIL.Prototype).
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMargin">
            <summary>
            Getting the indents of an item to offset itself relative to its container.
            </summary>
            <returns>Margin as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting the indents of an item to offset itself relative to its container.
            </summary>
            <param name="margin">Margin as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the indents of an item to offset itself relative to its container.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetTriangles">
            <summary>
            Getting triangles of item's shape.
            </summary>
            <returns>Points list of the shape as List of float[2] array (2D).</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetTriangles(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting triangles as item's shape.
            </summary>
            <param name="triangles">Points list of the shape as List of float[2] array (2D).</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.MakeShape">
            <summary>
            Making default item's shape. Use in conjunction with 
            GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetBackground(System.Drawing.Color)">
            <summary>
            Setting background color of an item's shape.
            </summary>
            <param name="color">Background color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetBackground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item's shape in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetBackground(System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetBackground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetBackground">
            <summary>
            Getting background color of an item.
            </summary>
            <returns>Background color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetItemName(System.String)">
            <summary>
            Setting the name of the item.
            </summary>
            <param name="name">Item name as System.String.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetItemName">
            <summary>
            Getting the name of the item.
            </summary>
            <returns>Item name as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.IsDrawable">
            <summary>
            Getting the drawable (visibility) status of an item. This property used in 
            conjunction with the IsVisible() property.
            <para/> Explanation: an item can be visible and invisible, in some cases 
            the item can be located outside the container (example: SpaceVIL.ListBox), 
            and it must be invisible so as not to waste CPU / GPU resources, but in some 
            cases you must control the visibility of elements that are inside container 
            and should be invisible (example: SpaceVIL.TreeView).
            </summary>
            <returns>True: if item is drawable (visible). 
            False: if item is not drawable (invisible).</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetDrawable(System.Boolean)">
            <summary>
            Setting the drawable (visibility) status of an item. This property used in 
            conjunction with the IsVisible() property.
            <para/> Explanation: an item can be visible and invisible, in some cases 
            the item can be located outside the container (example: SpaceVIL.ListBox), 
            and it must be invisible so as not to waste CPU / GPU resources, but in some 
            cases you must control the visibility of elements that are inside container 
            and should be invisible (example: SpaceVIL.TreeView).
            </summary>
            <param name="value">True: if item should be drawable (visible). 
            False: if item should not be drawable (invisible).</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.IsVisible">
            <summary>
            Getting the visibility status of an item. This property may used in 
            conjunction with the IsDrawable() property.
            </summary>
            <returns>True: if item is visible. False: if item is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetVisible(System.Boolean)">
            <summary>
            Setting the visibility status of an item. This property may used in 
            conjunction with the IsDrawable() property.
            </summary>
            <param name="value">True: if item should be visible. 
            False: if item should be invisible.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMinWidth(System.Int32)">
            <summary>
            Setting the minimum width limit. Actual width cannot be less than this limit.
            </summary>
            <param name="width"> Minimum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMaxWidth(System.Int32)">
            <summary>
            Setting the maximum width limit. Actual width cannot be greater than this limit.
            </summary>
            <param name="width"> Maximum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMinWidth">
            <summary>
            Getting the minimum width limit.
            </summary>
            <returns> Minimum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetWidth">
            <summary>
            Getting item width.
            </summary>
            <returns> Width of the item. </returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMaxWidth">
            <summary>
            Getting the maximum width limit.
            </summary>
            <returns> Maximum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMinHeight(System.Int32)">
            <summary>
            Setting the minimum height limit. Actual height cannot be less than this limit.
            </summary>
            <param name="height"> Minimum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMaxHeight(System.Int32)">
            <summary>
            Setting the maximum height limit. Actual height cannot be greater than this limit.
            </summary>
            <param name="height"> Maximum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMinHeight">
            <summary>
            Getting the minimum height limit.
            </summary>
            <returns> Minimum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetHeight">
            <summary>
            Getting item height.
            </summary>
            <returns> Height of the item. </returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMaxHeight">
            <summary>
            Getting the maximum height limit.
            </summary>
            <returns> Maximum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting item size (width and height).
            </summary>
            <param name="width"> Width of the item. </param>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMinSize(System.Int32,System.Int32)">
            <summary>
            Setting minimum item size limit (width and height limits).
            </summary>
            <param name="width"> Minimum width limit of the item. </param>
            <param name="height"> Minimum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetMaxSize(System.Int32,System.Int32)">
            <summary>
            Setting maximum item size limit (width and height limits).
            </summary>
            <param name="width"> Maximum width limit of the item. </param>
            <param name="height"> Maximum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetSize">
            <summary>
            Getting current item size.
            </summary>
            <returns>Item size as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMinSize">
            <summary>
            Getting current item minimum size limit.
            </summary>
            <returns>Minimum item size limit as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetMaxSize">
            <summary>
            Getting current item maximum size limit.
            </summary>
            <returns>Minimum item size limit as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting an alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting an alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetAlignment">
            <summary>
            Getting an alignment of an item's shape relative to its container. 
            </summary>
            <returns>Alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetSizePolicy(SpaceVIL.Core.SizePolicy,SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting the size policy of an item's shape. 
            Can be Fixed (shape not changes its size) or Expand (shape is stretched to all available space).
            </summary>
            <param name="width">Width policy of an item's shape as SpaceVIL.Core.SizePolicy.</param>
            <param name="height">Height policy of an item's shape as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetWidthPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting width policy of an item's shape. Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <param name="policy">Width policy as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetWidthPolicy">
            <summary>
            Getting width policy of an item's shape.Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <returns>Width policy as SpaceVIL.Core.SizePolicy.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetHeightPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting height policy of an item's shape. Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <param name="policy">Height policy as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetHeightPolicy">
            <summary>
            Getting height policy of an item's shape.Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <returns>Height policy as SpaceVIL.Core.SizePolicy.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of a shape.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetX">
            <summary>
            Getting X coordinate of the left-top corner of a shape.
            </summary>
            <returns>X position of the left-top corner.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of a shape.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetY">
            <summary>
            Getting Y coordinate of the left-top corner of a shape.
            </summary>
            <returns>Y position of the left-top corner.</returns>
        </member>
        <member name="M:SpaceVIL.BaseItem.Update(SpaceVIL.Core.GeometryEventType,System.Int32)">
            <summary>
            Updating an item size or/and position.
            </summary>
            <param name="type">Type of event as SpaceVIL.Core.GeometryEventType.</param>
            <param name="value">Value of a property that was changed.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style that describes the appearance of an item.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.GetCoreStyle">
            <summary>
            Getting the core (only appearance properties without inner styles) style of an item.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="F:SpaceVIL.BaseItem.HoverRule">
            <summary>
            Hovering rule propetry of this item. 
            <para/> Can be ItemHoverRule.Lazy or ItemHoverRule.Strict (see SpaceVIL.Core.ItemHoverRule).
            </summary>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetConfines">
            <summary>
            Setting the confines of the item relative to its parent's size and position.
            <para/> Example: items can be partially (or completely) outside the container (example: ListBox), 
            in which case the part that is outside the container should not be visible and should not interact with the user.
            </summary>
        </member>
        <member name="M:SpaceVIL.BaseItem.SetConfines(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the confines of the item relative to specified bounds.
            <para/> Example: items can be partially (or completely) outside the container (example: ListBox), 
            in which case the part that is outside the container should not be visible and should not 
            interact with the user.
            </summary>
            <param name="x0">Left X begin position.</param>
            <param name="x1">Right X end position.</param>
            <param name="y0">Top Y begin position.</param>
            <param name="y1">Bottom Y end position.</param>
        </member>
        <member name="M:SpaceVIL.BaseItem.Release">
            <summary>
            Method to describe disposing item's resources if the item was removed.
            </summary>
        </member>
        <member name="M:SpaceVIL.BaseItem.Effects">
            <summary>
            Gettting access to manage visual effects of the item.
            </summary>
            <returns>Implementation of an SpaceVIL.Core.IAppearanceExtension interface.</returns>
        </member>
        <member name="T:SpaceVIL.BlankItem">
            <summary>
            BlankItem is pure subclass of Prototype without any extensions.
            <para/> Example: used as cheap version of SpaceVIL.ButtonCore 
            (SpaceVIL.ButtonCore contains text 
            and additional methods extensions).
            </summary>
        </member>
        <member name="M:SpaceVIL.BlankItem.#ctor">
            <summary>
            Default BlankItem constructor.
            </summary>
        </member>
        <member name="T:SpaceVIL.ButtonCore">
            <summary>
            ButtonCore is the basic implementation of a user interface button. 
            <para/> Contains text. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonCore.#ctor">
            <summary>
            Default ButtonCore constructor. Text is empty.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonCore.#ctor(System.String)">
            <summary>
            Constructs a ButtonCore with the specified text.
            </summary>
            <param name="text">Button text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of a ButtonCore text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of a ButtonCore text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to ButtonCore.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to ButtonCore.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.GetText">
            <summary>
            Getting the current text of the ButtonCore.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonCore.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize ButtonCore by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonCore.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize ButtonCore by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a ButtonCore.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ButtonCore in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ButtonCore in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ButtonCore in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ButtonCore in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ButtonCore.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonCore.InitElements">
            <summary>
            Initializing text in the ButtonCore.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonCore.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ButtonCore.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.ButtonToggle">
            <summary>
            ButtonToggle is the basic implementation of a user interface button with 
            the ability to be enabled or be disabled. 
            <para/> Contains text. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.#ctor">
            <summary>
            Default ButtonToggle constructor. Text is empty.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.#ctor(System.String)">
            <summary>
            Constructs a ButtonToggle with the specified text.
            </summary>
            <param name="text">Button text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.IsToggled">
            <summary>
            Returns True if this button is toggled otherwise returns False.
            </summary>
            <returns>True: this item is toggled. False: this item is untoggled.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetToggled(System.Boolean)">
            <summary>
            Toggles this button between on or off.
            </summary>
            <param name="value">True: if you want this item to be toggled. 
            False: if you want this item to be untoggled.</param>
        </member>
        <member name="F:SpaceVIL.ButtonToggle.EventToggle">
            <summary>
            Event that is invoked when a button toggles.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.Release">
            <summary>
            Disposing ButtonToggle resources if the item was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of a ButtonToggle text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of a ButtonToggle text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this ButtonToggle.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to ButtonToggle.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.GetText">
            <summary>
            Getting the current text of the ButtonToggle.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize ButtonToggle by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize ButtonToggle by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a ButtonToggle.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ButtonToggle in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ButtonToggle in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ButtonToggle in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ButtonToggle in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.InitElements">
            <summary>
            Initializing text in the ButtonToggle.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ButtonToggle.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ButtonToggle.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.CheckBox">
            <summary>
            CheckBox is the basic implementation of a user interface check box with 
            the ability to be checked or be unchecked. 
            <para/> Contains text and indicator. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetIndicator">
            <summary>
            Getting indicator item of the CheckBox.
            </summary>
            <returns>Indicator as SpaceVIL.Indicator.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.#ctor">
            <summary>
            Default CheckBox constructor. Text is empty.
            </summary>
        </member>
        <member name="M:SpaceVIL.CheckBox.#ctor(System.String)">
            <summary>
            Constructs a CheckBox with the specified text.
            </summary>
            <param name="text">CheckBox text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetMouseHover(System.Boolean)">
            <summary>
            Overrided Prototype.SetMouseHover(bool) method.
            <para/> Setting this item hovered (mouse cursor located within item's shape).
            </summary>
            <param name="value">True: if you want this item be hovered. 
            False: if you want this item be not hovered.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.InitElements">
            <summary>
            Initializing indicator and text in the CheckBox. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.CheckBox.IsChecked">
            <summary>
            Returns True if CheckBox is checked otherwise returns False.
            </summary>
            <returns>True: CheckBox is checked. False: CheckBox is unchecked.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetChecked(System.Boolean)">
            <summary>
            Setting CheckBox checked or unchecked.
            </summary>
            <param name="value">True: if you want CheckBox to be checked. 
            False: if you want CheckBox to be unchecked.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this CheckBox.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to CheckBox.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetText">
            <summary>
            Getting the current text of the CheckBox.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize CheckBox by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize CheckBox by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a CheckBox.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a CheckBox in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a CheckBox in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a CheckBox in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a CheckBox in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CheckBox.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.CheckBox.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the CheckBox.
            <para/> Inner styles: "indicator", "text".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.ComboBox">
            <summary>
            ComboBox is an item allowing to select one of the many options from the list. 
            <para/> Contains text, drop-down button, drop-down list. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.ComboBox.SelectionChanged">
            <summary>
            Event that is invoked when one of the options is selected.
            </summary>
        </member>
        <member name="F:SpaceVIL.ComboBox.ReturnFocus">
            <summary>
            Property that allows to specify what item will be focused after drop-down list is closed.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBox.Release">
            <summary>
            Disposing ComboBox resources if it was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBox.#ctor">
            <summary>
            Default ComboBox constructor. Options list is empty.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBox.#ctor(SpaceVIL.MenuItem[])">
            <summary>
            Constructs ComboBox with spesified sequence of options (as SpaceVIL.MenuItem).
            </summary>
            <param name="items">Sequence of options as SpaceVIL.MenuItem.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of an ComboBox text of selected option. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of an ComboBox text of selected option. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to ComboBox.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to ComboBox.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text of selected option. 
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text of selected option.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text of selected option.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text of selected option.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetFont">
            <summary>
            Getting the current font of the text of selected option.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetText(System.String)">
            <summary>
            Setting the text of selected option.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetText">
            <summary>
            Getting the current text  of selected option.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize ComboBox by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize ComboBox by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of selected option.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of selected option in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of selected option in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of selected option in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of selected option in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetForeground">
            <summary>
            Getting current text color of selected option.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.InitElements">
            <summary>
            Initializing and adding of all elements in the ComboBox 
            (drop-down list, drop bown button, selection, options and etc.).
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBox.Open">
            <summary>
            Opens drop-down list.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBox.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to ComboBox. 
            If item is SpaceVIL.MenuItem then it is added to the drop-down list as an option.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing item from ComboBox. 
            If item is SpaceVIL.MenuItem then it is removed from the drop-down list.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetCurrentIndex(System.Int32)">
            <summary>
            Selecting option by its index in the drop-down list.
            </summary>
            <param name="index">Index in the drop-down list.</param>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetCurrentIndex">
            <summary>
            Getting index of selected option in the drop-down list.
            </summary>
            <returns>Index of selected option.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetSelectedItem">
            <summary>
            Getting current selected item in DropDown list.
            </summary>
            <returns>Current selected item as SpaceVIL.Core.IBaseItem.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.GetListContent">
            <summary>
            Getting all existing options (list of SpaceVIL.IBaseItem objects).
            </summary>
            <returns>Options as List&lt;SpaceVIL.IBaseItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.ComboBox.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ComboBox.
            <para/> Inner styles: "selection", "dropdownbutton", "arrow", "dropdownarea".
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
            </summary>
        </member>
        <member name="T:SpaceVIL.ComboBoxDropDown">
            <summary>
            ComboBoxDropDown is drop-down list implementation for ComboBox (see SpaceVIL.ComboBox). 
            ComboBox do not contains ComboBoxDropDown in usual way (ComboBox.GetItems() does not 
            return ComboBoxDropDown), they just connected with each other. Used for selecting 
            option from the list. ComboBoxDropDown is a floating item (see SpaceVIL.Core.IFloating 
            and  enum SpaceVIL.Core.LayoutType) and closes when mouse click outside the 
            ComboBoxDropDown area.
            <para/> Contains ListBox. 
            <para/> Supports all events except drag and drop.
            <para/> Notice: All floating items render above all others items.
            </summary>
        </member>
        <member name="F:SpaceVIL.ComboBoxDropDown.SelectionChanged">
            <summary>
            Event that is invoked when one of the options is selected.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.Release">
            <summary>
            Disposing ComboBoxDropDown resources if it was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="F:SpaceVIL.ComboBoxDropDown.ItemList">
            <summary>
            ListBox for storing a list of options (SpaceVIL.MenuItem).
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.GetText">
            <summary>
            Getting the text of selected option.
            </summary>
            <returns>Text of selected option.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.GetCurrentIndex">
            <summary>
            Getting index of the current selected option in the list.
            </summary>
            <returns>Index of the current selected option</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.GetSelectedItem">
            <summary>
            Getting current selected item in ItemList.
            </summary>
            <returns>Current selected item as SpaceVIL.Core.IBaseItem.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.SetCurrentIndex(System.Int32)">
            <summary>
            Selecting an option from the list at the specified index.
            </summary>
            <param name="index">Index of option in the list.</param>
        </member>
        <member name="F:SpaceVIL.ComboBoxDropDown.ActiveButton">
            <summary>
            You can specify mouse button (see SpaceVIL.Core.MouseButton) 
            that is used to open ComboBoxDropDown.
            <para/> Default: SpaceVIL.Core.MouseButton.ButtonLeft.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.IsOutsideClickClosable">
            <summary>
            Returns True if ComboBoxDropDown (see SpaceVIL.Core.IFloating)
            should closes when mouse click outside the area of ComboBoxDropDown otherwise returns False.
            </summary>
            <returns>True: if ComboBoxDropDown closes when mouse click outside the area.
            False: if ComboBoxDropDown stays opened when mouse click outside the area.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.SetOutsideClickClosable(System.Boolean)">
            <summary>
            Setting boolean value of item's behavior when mouse click occurs outside the ComboBoxDropDown.
            </summary>
            <param name="value">True: ComboBoxDropDown should become invisible if mouse click occurs outside the item.
            False: an item should stay visible if mouse click occurs outside the item.</param>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.#ctor">
            <summary>
            Default ComboBoxDropDown constructor. 
            ComboBoxDropDown does not pass any input events and invisible by default.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.InitElements">
            <summary>
            Initializing all elements in the ComboBoxDropDown. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.GetListCount">
            <summary>
            Getting number of options in the list.
            </summary>
            <returns>Number of options in the list.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.GetListContent">
            <summary>
            Getting all existing options (list of SpaceVIL.IBaseItem objects).
            </summary>
            <returns>Options as List&lt;SpaceVIL.IBaseItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding option (or any SpaceVIL.Core.IBaseItem implementation) to the ComboBoxDropDown.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing option (or any SpaceVIL.Core.IBaseItem implementation) from the ComboBoxDropDown.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.Show(SpaceVIL.Core.IItem,SpaceVIL.Core.MouseArgs)">
            <summary>
            Shows the ComboBoxDropDown at the proper position.
            </summary>
            <param name="sender"> The item from which the show request is sent. </param>
            <param name="args"> Mouse click arguments (cursor position, mouse button,
            mouse button press/release, etc.). </param>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.Show">
            <summary>
            Shows the ComboBoxDropDown at the position (0, 0).
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.Hide">
            <summary>
            Hide the ComboBoxDropDown without destroying.
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.Hide(SpaceVIL.Core.MouseArgs)">
            <summary>
            Hide the ComboBoxDropDown without destroying with using specified mouse arguments.
            </summary>
            <param name="args">Arguments as SpaceVIL.Core.MouseArgs.</param>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.SetConfines">
            <summary>
            Overridden method for setting confines according 
            to position and size of the ComboBoxDropDown (see Prototype.SetConfines()).
            </summary>
        </member>
        <member name="M:SpaceVIL.ComboBoxDropDown.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ComboBoxDropDown.
            <para/> Inner styles: "itemlist".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.ContextMenu">
            <summary>
            ContextMenu is a menu for selecting one of the available options 
            from the list that perform the assigned action. ContextMenu is a floating 
            item (see SpaceVIL.Core.IFloating and  enum SpaceVIL.Core.LayoutType) and 
            closes when mouse click outside the ContextMenu area.
            <para/> Contains ListBox. 
            <para/> Supports all events except drag and drop.
            <para/> Notice: All floating items render above all others items.
            <para/> ContextMenu does not pass any input events and invisible by default.
            </summary>
        </member>
        <member name="F:SpaceVIL.ContextMenu.ReturnFocus">
            <summary>
            Property that allows to specify what item will be focused after ContextMenu is closed.
            </summary>
        </member>
        <member name="F:SpaceVIL.ContextMenu.ItemList">
            <summary>
            ListBox for storing a list of options (SpaceVIL.MenuItem).
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.GetSender">
            <summary>
            Getting the item that invokes ContextMenu.
            </summary>
            <returns>Item as SpaceVIL.Prototype.</returns>
        </member>
        <member name="F:SpaceVIL.ContextMenu.ActiveButton">
            <summary>
            You can specify mouse button (see SpaceVIL.Core.MouseButton) 
            that is used to open ContextMenu.
            <para/> Default: SpaceVIL.Core.MouseButton.ButtonRight.
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.IsOutsideClickClosable">
            <summary>
            Returns True if ContextMenu (see SpaceVIL.Core.IFloating)
            should closes when mouse click outside the area of ContextMenu otherwise returns False.
            </summary>
            <returns>True: if ContextMenu closes when mouse click outside the area.
            False: if ContextMenu stays opened when mouse click outside the area.</returns>
        </member>
        <member name="M:SpaceVIL.ContextMenu.SetOutsideClickClosable(System.Boolean)">
            <summary>
            Setting boolean value of item's behavior when mouse click occurs outside the ContextMenu.
            </summary>
            <param name="value">True: ContextMenu should become invisible if mouse click occurs outside the item.
            False: an item should stay visible if mouse click occurs outside the item.</param>
        </member>
        <member name="M:SpaceVIL.ContextMenu.#ctor(SpaceVIL.CoreWindow)">
            <summary>
            Constructs a ContextMenu and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            ContextMenu does not pass any input events and invisible by default.
            </summary>
            <param name="handler">Window for attaching ContextMenu.</param>
        </member>
        <member name="M:SpaceVIL.ContextMenu.#ctor(SpaceVIL.CoreWindow,SpaceVIL.MenuItem[])">
            <summary>
            Constructs a ContextMenu with specified options and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching ContextMenu.</param>
            <param name="items">Sequence of options as SpaceVIL.MenuItem.</param>
        </member>
        <member name="M:SpaceVIL.ContextMenu.InitElements">
            <summary>
            Initializing all elements in the ContextMenu.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.GetListCount">
            <summary>
            Getting number of options in the list.
            </summary>
            <returns>Number of options in the list.</returns>
        </member>
        <member name="M:SpaceVIL.ContextMenu.GetListContent">
            <summary>
            Getting all existing options (list of SpaceVIL.MenuItem objects).
            </summary>
            <returns>Options as List&lt;SpaceVIL.MenuItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.ContextMenu.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding option (or any SpaceVIL.Core.IBaseItem implementation) to the ComboBoxDropDown. 
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.ContextMenu.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing option (or any SpaceVIL.Core.IBaseItem implementation) from the ComboBoxDropDown.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.ContextMenu.Show(SpaceVIL.Core.IItem,SpaceVIL.Core.MouseArgs)">
            <summary>
            Shows the ContextMenu at the proper position.
            </summary>
            <param name="sender"> The item from which the show request is sent. </param>
            <param name="args"> Mouse click arguments (cursor position, mouse button,
            mouse button press/release, etc.). </param>
        </member>
        <member name="M:SpaceVIL.ContextMenu.Show">
            <summary>
            Shows the ContextMenu at the position (0, 0).
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.Clear">
            <summary>
            Remove all content in the ContextMenu.
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.Hide">
            <summary>
            Hide the ContextMenu without destroying.
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.Hide(SpaceVIL.Core.MouseArgs)">
            <summary>
            Hide the ContextMenu without destroying with using specified mouse arguments.
            <para/> This method do exactly as Hide() method without arguments.
            </summary>
            <param name="args">Arguments as SpaceVIL.Core.MouseArgs.</param>
        </member>
        <member name="M:SpaceVIL.ContextMenu.SetConfines">
            <summary>
            Overridden method for setting confines according 
            to position and size of the ContextMenu (see Prototype.SetConfines()).
            </summary>
        </member>
        <member name="M:SpaceVIL.ContextMenu.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ContextMenu.
            <para/> Inner styles: "itemlist".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.CustomSelector.#ctor">
            <summary>
            Constructs a CustomSelector
            </summary>
        </member>
        <member name="M:SpaceVIL.CustomSelector.SetRectangles(System.Collections.Generic.List{SpaceVIL.Core.Point})">
            <summary>
            Make CustomSelector's rectangles with left top and right bottom points
            </summary>
        </member>
        <member name="M:SpaceVIL.CustomSelector.ShiftAreaY(System.Int32)">
            <summary>
            Shift selector on Y direction
            </summary>
        </member>
        <member name="M:SpaceVIL.CustomSelector.ShiftAreaX(System.Int32)">
            <summary>
            Shift selector on X direction
            </summary>
        </member>
        <member name="T:SpaceVIL.CustomShape">
            <summary>
            CustomShape is a subclass that extends from SpaceVIL.Primitive and can be any type of shapes.
            <para/> You must provide the correct 2D vertices (triangles) of your figure to wark with this class.
            </summary>
        </member>
        <member name="M:SpaceVIL.CustomShape.#ctor">
            <summary>
            Default CustomShape constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.CustomShape.#ctor(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Constructs a CustomShape with the specified shape.
            </summary>
            <param name="shape">Shape as list of tringles 
            (points list of the shape as List of float[2] array).</param>
        </member>
        <member name="M:SpaceVIL.CustomShape.MakeShape">
            <summary>
            Overridden method for stretching the shape of the current item 
            relative to the current size. 
            Use in conjunction with GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="T:SpaceVIL.DialogItem">
            <summary>
            DialogItem is an abstract class for imitation of modal window.
            <para/>DialogItem extends Prototype class, IDialogItem interface. 
            </summary>
        </member>
        <member name="F:SpaceVIL.DialogItem.Window">
            <summary>
            Window area of DialogItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogItem.#ctor">
            <summary>
            Constructs a DialogItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogItem.InitElements">
            <summary>
            Initializing all elements in the DialogItem.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogItem.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows DialogItem and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching InputDialog.</param>
        </member>
        <member name="M:SpaceVIL.DialogItem.Close">
            <summary>
            Close the DialogItem.
            </summary>
        </member>
        <member name="F:SpaceVIL.DialogItem.OnCloseDialog">
            <summary>
            An event to describe the actions that must be performed after the dialog is closed.
            <para/> Event type: SpaceVIL.EventCommonMethod.
            <para/> Function arguments: none.
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogItem.Release">
            <summary>
            Disposing DialogItem resources if the it was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the DialogItem.
            <para/> Inner styles: "window".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.Ellipse">
            <summary>
            Ellipse is a subclass that extends from SpaceVIL.Primitive 
            for rendering an ellipse shape.
            </summary>
        </member>
        <member name="F:SpaceVIL.Ellipse.Quality">
            <summary>
            Property to specify number of edges in an ellipse shape.
            <para/> Default: 16.
            </summary>
        </member>
        <member name="M:SpaceVIL.Ellipse.#ctor">
            <summary>
            Default Ellipse constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Ellipse.#ctor(System.Int32)">
            <summary>
            Constructs an Ellipse with specified number of edges in an ellipse shape.
            </summary>
            <param name="quality">Number of edges.</param>
        </member>
        <member name="M:SpaceVIL.Ellipse.MakeShape">
            <summary>
            Overridden method for stretching the ellipse shape relative to the current size. 
            Use in conjunction with GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="T:SpaceVIL.FileSystemEntry">
            <summary>
            FileSystemEntry is a class representing file system entry (file, folder and etc.). 
            Used in SpaceVIL.OpenEntryDialog entry list. 
            <para/> Contains text and icon.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetEntryType">
            <summary>
            Getting a type of entry (see SpaceVIL.Core.FileSystemEntryType).
            </summary>
            <returns>Type of entry as SpaceVIL.Core.FileSystemEntryType.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetIcon">
            <summary>
            Getting image icon.
            </summary>
            <returns>Image icon as SpaceVIL.ImageItem.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetIcon(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Setting image icon of file system entry. 
            Applys smooth scaling the specified image by new size.
            </summary>
            <param name="icon">Bitmap image as System.Drawing.Bitmap.</param>
            <param name="width">New width of the image.</param>
            <param name="height">New height of the image.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.#ctor(SpaceVIL.Core.FileSystemEntryType,System.String)">
            <summary>
            Constructs a FileSystemEntry with specified entry type and text.
            </summary>
            <param name="type">Type of entry as SpaceVIL.Core.FileSystemEntryType.</param>
            <param name="text">Text of entry.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this FileSystemEntry.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to FileSystemEntry.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetText">
            <summary>
            Getting the current text of the FileSystemEntry.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize FileSystemEntry by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize FileSystemEntry by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a FileSystemEntry.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a FileSystemEntry in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a FileSystemEntry in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a FileSystemEntry in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a FileSystemEntry in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.InitElements">
            <summary>
            Initializing all elements in the FileSystemEntry.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.FileSystemEntry.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the FileSystemEntry.
            <para/> Inner styles: "icon", "text".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.FloatItem">
            <summary>
            FloatItem is a floating container for other items (see SpaceVIL.Core.IFloating). 
            Can be moved using drag and drop events. 
            <para/> Supports all events including drag and drop.
            <para/> Notice: All floating items render above all others items.
            </summary>
        </member>
        <member name="F:SpaceVIL.FloatItem.IsFloating">
            <summary>
            Property for enabling/disabling drag and drop. 
            <para/> True: Drag and drop is enabled. False: Drag and drop is disabled.
            <para/> Default: True.
            </summary>
        </member>
        <member name="M:SpaceVIL.FloatItem.IsOutsideClickClosable">
            <summary>
            Returns True if FloatItem (see SpaceVIL.Core.IFloating)
            should closes when mouse click outside the area of FloatItem otherwise returns False.
            </summary>
            <returns>True: if FloatItem closes when mouse click outside the area.
            False: if FloatItem stays opened when mouse click outside the area.</returns>
        </member>
        <member name="M:SpaceVIL.FloatItem.SetOutsideClickClosable(System.Boolean)">
            <summary>
            Setting boolean value of item's behavior when mouse click occurs outside the FloatItem.
            </summary>
            <param name="value">True: FloatItem should become invisible if mouse click occurs outside the item.
            False: an item should stay visible if mouse click occurs outside the item.</param>
        </member>
        <member name="M:SpaceVIL.FloatItem.#ctor(SpaceVIL.CoreWindow)">
            <summary>
            Constructs a FloatItem and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            FloatItem invisible by default.
            </summary>
            <param name="handler">Window for attaching FloatItem.</param>
        </member>
        <member name="M:SpaceVIL.FloatItem.InitElements">
            <summary>
            Initializing FloatItem. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.FloatItem.Show(SpaceVIL.Core.IItem,SpaceVIL.Core.MouseArgs)">
            <summary>
            Shows the FloatItem at the proper position.
            </summary>
            <param name="sender"> The item from which the show request is sent. </param>
            <param name="args"> Mouse click arguments (cursor position, mouse button,
            mouse button press/release, etc.). </param>
        </member>
        <member name="M:SpaceVIL.FloatItem.Show">
            <summary>
            Shows the FloatItem at the position (0, 0).
            </summary>
        </member>
        <member name="M:SpaceVIL.FloatItem.Hide">
            <summary>
            Hides the FloatItem without destroying.
            </summary>
        </member>
        <member name="M:SpaceVIL.FloatItem.Hide(SpaceVIL.Core.MouseArgs)">
            <summary>
            Hides the FloatItem without destroying.
            <para/> This method do exactly as Hide() method without arguments.
            </summary>
            <param name="args">Mouse click arguments (cursor position, mouse button,
            mouse button press/release, etc.).</param>
        </member>
        <member name="M:SpaceVIL.FloatItem.SetConfines">
            <summary>
            Overridden method for setting confines according 
            to position and size of the FloatItem (see Prototype.SetConfines()).
            </summary>
        </member>
        <member name="T:SpaceVIL.Frame">
            <summary>
            Frame is the basic container. 
            It groups items based on items alignment, margins, paddings, sizes and size policies.
            <para/> Frame cannot receive any events, so Frame is always in the SpaceVIL.Core.ItemStateType.Base state.
            </summary>
        </member>
        <member name="M:SpaceVIL.Frame.#ctor">
            <summary>
            Default Frame constructor. Frame cannot get focus.
            </summary>
        </member>
        <member name="T:SpaceVIL.FreeArea">
            <summary>
            FreeArea is class representing an unbounded area with free location of inner items.
            FreeArea implements SpaceVIL.Core.IFreeLayout and SpaceVIL.Core.IDraggable.
            FreeArea is supposed to be used with SpaceVIL.ResizableItem.
            <para/> Supports all events including drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.FreeArea.#ctor">
            <summary>
            Default FreeArea constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.FreeArea.GetVScrollOffset">
            <summary>
            Getting Y axis offset of an unbounded area of FreArea.
            <para/> Default: 0.
            </summary>
            <returns>Y axis offset of an unbounded area.</returns>
        </member>
        <member name="M:SpaceVIL.FreeArea.SetVScrollOffset(System.Int64)">
            <summary>
            Setting Y axis offset of an unbounded area of FreArea.
            </summary>
            <param name="value">Y axis offset of an unbounded area.</param>
        </member>
        <member name="M:SpaceVIL.FreeArea.GetHScrollOffset">
            <summary>
            Getting X axis offset of an unbounded area of FreArea.
            <para/> Default: 0.
            </summary>
            <returns>X axis offset of an unbounded area.</returns>
        </member>
        <member name="M:SpaceVIL.FreeArea.SetHScrollOffset(System.Int64)">
            <summary>
            Setting X axis offset of an unbounded area of FreArea.
            </summary>
            <param name="value">X axis offset of an unbounded area.</param>
        </member>
        <member name="M:SpaceVIL.FreeArea.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the FreeArea. 
            <para/> Notice: Make sure the item is in the correct position to be visible.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.FreeArea.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Remove item from the FreeArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.FreeArea.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IFreeLayout).
            </summary>
        </member>
        <member name="T:SpaceVIL.Graph">
            <summary>
            Graph is class representing custom graphs with lines and points.
            <para/> Contains SpaceVIL.PointsContainer and SpaceVIL.LinesContainer.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.Graph.IsHover">
            <summary>
            Property to enable or disable mouse events (hover, click, press, scroll).
            <para/> True: Graph can receive mouse events. False: cannot receive mouse events.
            <para/> Default: False.
            </summary>
        </member>
        <member name="M:SpaceVIL.Graph.#ctor">
            <summary>
            Default Graph constructor. The ability to get focus is disabled by default.
            </summary>
        </member>
        <member name="M:SpaceVIL.Graph.#ctor(System.Boolean)">
            <summary>
            Constructs Graph with the ability to enable or disable mouse events.
            </summary>
            <param name="hover">True: Graph can receive mouse events. 
            False: cannot receive mouse events.</param>
        </member>
        <member name="M:SpaceVIL.Graph.InitElements">
            <summary>
            Initializing all elements of Graph.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Graph.SetPointThickness(System.Single)">
            <summary>
            Setting thickness of Graph points.
            </summary>
            <param name="thickness">Point thickness.</param>
        </member>
        <member name="M:SpaceVIL.Graph.GetPointThickness">
            <summary>
            Getting Graph points thickness.
            </summary>
            <returns>Point thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Graph.SetPointColor(System.Drawing.Color)">
            <summary>
            Setting Graph points color. Default: White.
            </summary>
            <param name="color">Points color.</param>
        </member>
        <member name="M:SpaceVIL.Graph.GetPointColor">
            <summary>
            Getting Graph points color.
            </summary>
            <returns>Points color.</returns>
        </member>
        <member name="M:SpaceVIL.Graph.SetPointShape(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting custom shape for points (if one want to use other shape than circle).
            </summary>
            <param name="shape">Points list of the shape as List of float[2] array.</param>
        </member>
        <member name="M:SpaceVIL.Graph.GetPointShape">
            <summary>
            Getting current shape of points. Default: circle shape.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.Graph.SetPoints(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting Graph points coordinates.
            </summary>
            <param name="coord">Points list as List of float[2] array.</param>
        </member>
        <member name="M:SpaceVIL.Graph.GetPoints">
            <summary>
            Getting Graph points coordinates.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.Graph.SetLineThickness(System.Single)">
            <summary>
            Setting Graph thickness of lines.
            </summary>
            <param name="thickness">Line thickness.</param>
        </member>
        <member name="M:SpaceVIL.Graph.GetLineThickness">
            <summary>
            Getting Graph lines thickness.
            </summary>
            <returns>Lines thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Graph.SetLineColor(System.Drawing.Color)">
            <summary>
            Setting Graph lines color.
            </summary>
            <param name="color">Line color.</param>
        </member>
        <member name="M:SpaceVIL.Graph.GetLineColor">
            <summary>
            Getting Graph lines color.
            </summary>
            <returns>Lines color.</returns>
        </member>
        <member name="T:SpaceVIL.Grid">
            <summary>
            Grid is a class that represents a grid type container. 
            Each element is in a specific grid cell. 
            <para/> Cells size based on items margins, sizes and size policies.
            <para/> Grid cannot receive any events, so Grid is always in the SpaceVIL.Core.ItemStateType.Base state.
            </summary>
        </member>
        <member name="M:SpaceVIL.Grid.#ctor">
            <summary>
            Default Grid constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Grid.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Grid with the given number of rows and number of columns.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:SpaceVIL.Grid.SetFormat(System.Int32,System.Int32)">
            <summary>
            Setting a new grid format with the given number of rows and number of columns.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:SpaceVIL.Grid.SetRowCount(System.Int32)">
            <summary>
            Setting a new count of the rows.
            </summary>
            <param name="value">Number of rows.</param>
        </member>
        <member name="M:SpaceVIL.Grid.GetRowCount">
            <summary>
            Getting current rows count in grid.
            </summary>
            <returns>Current rows count.</returns>
        </member>
        <member name="M:SpaceVIL.Grid.SetColumnCount(System.Int32)">
            <summary>
            Setting a new count of the columns.
            </summary>
            <param name="value">Number of columns.</param>
        </member>
        <member name="M:SpaceVIL.Grid.GetColumnCount">
            <summary>
            Getting current columns  count in grid.
            </summary>
            <returns>Current columns count.</returns>
        </member>
        <member name="M:SpaceVIL.Grid.GetCell(System.Int32,System.Int32)">
            <summary>
            Returns the cell by row and column number.
            </summary>
            <param name="row">Number of cell row.</param>
            <param name="column">Number of cell column.</param>
            <returns>Cell of the Grid as SpaceVIL.Cell.</returns>
        </member>
        <member name="M:SpaceVIL.Grid.GetAllCells">
            <summary>
            Getting all cells as list.
            </summary>
            <returns>Cells as List&lt;SpaceVIL.Cell&gt;</returns>
        </member>
        <member name="M:SpaceVIL.Grid.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing item from the Grid. if the removal was successful Cell becomes free.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.Grid.RemoveItem(System.Int32,System.Int32)">
            <summary>
            Removing item from the Grid by number of row and number of column. 
            if the removal was successful Cell becomes free.
            </summary>
            <param name="row">Index of row.</param>
            <param name="column">Index of column.</param>
        </member>
        <member name="M:SpaceVIL.Grid.Clear">
            <summary>
            Remove all items in the Grid.
            </summary>
        </member>
        <member name="M:SpaceVIL.Grid.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the Grid. 
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.Grid.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32,System.Int32)">
            <summary>
            Inserting item into the Cell by row and column index.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:SpaceVIL.Grid.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Inserting item into the Cell by cell index.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Cell index.</param>
        </member>
        <member name="M:SpaceVIL.Grid.SetWidth(System.Int32)">
            <summary>
            Setting Grid width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width">Width of the Grid.</param>
        </member>
        <member name="M:SpaceVIL.Grid.SetHeight(System.Int32)">
            <summary>
            Setting Grid height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height">Height of the Grid.</param>
        </member>
        <member name="M:SpaceVIL.Grid.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the Grid.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.Grid.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of the Grid.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.Grid.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IFreeLayout).
            </summary>
        </member>
        <member name="T:SpaceVIL.HorizontalScrollBar">
            <summary>
            HorizontalScrollBar is the basic implementation of a user interface scroll bar 
            (horizontal version). 
            <para/> Contains arrow buttons, slider.
            <para/> By default ability to get focus is disabled.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.HorizontalScrollBar.UpArrow">
            <summary>
            Button to scroll up.
            </summary>
        </member>
        <member name="F:SpaceVIL.HorizontalScrollBar.DownArrow">
            <summary>
            Button to scroll down.
            </summary>
        </member>
        <member name="F:SpaceVIL.HorizontalScrollBar.Slider">
            <summary>
            Slider for scrolling with mouse drag and drop ivents or mouse wheel.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalScrollBar.#ctor">
            <summary>
            Default HorizontalScrollBar constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalScrollBar.InitElements">
            <summary>
            Initializing all elements in the HorizontalScrollBar.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalScrollBar.SetArrowsVisible(System.Boolean)">
            <summary>
            Setting Up and Down arrow buttons visibility of the HorizontalScrollBar.
            </summary>
            <param name="value">True: if you want buttons visible. 
            False: if you want buttons invisible.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalScrollBar.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the HorizontalScrollBar.
            <para/> Inner styles: "uparrow", "downarrow", "slider".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.HorizontalSlider">
            <summary>
            HorizontalSlider is the basic implementation of a user interface slider (horizontal version).
            <para/> Contains track, handler.
            <para/> Supports all events including drag and drop 
            (internal handler (SpaceVIL.ScrollHandler) supports drag and drop events).
            </summary>
        </member>
        <member name="F:SpaceVIL.HorizontalSlider.Track">
            <summary>
            Slider track.
            </summary>
        </member>
        <member name="F:SpaceVIL.HorizontalSlider.Handler">
            <summary>
            Slider handler.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetStep(System.Single)">
            <summary>
            Setting slider movement step.
            </summary>
            <param name="value">Slider step.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.GetStep">
            <summary>
            Getting slider movement step.
            </summary>
            <returns>Slider step.</returns>
        </member>
        <member name="F:SpaceVIL.HorizontalSlider.EventValueChanged">
            <summary>
            Event that is invoked when value of the slider is changed.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.Release">
            <summary>
            Disposing all resources if the item was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetIgnoreStep(System.Boolean)">
            <summary>
            Ignoring slider step (affects only on animation). 
            Set False if you want the slider to move strictly in steps.
            <para/> Default: True.
            </summary>
            <param name="value">True: if you want to ignore step. 
            False: if you do not want to ignore step. </param>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.IsIgnoreStep">
            <summary>
            Returns True if slider movement ignore steps otherwise returns False.
            </summary>
            <returns>True: if movement step is ignored. 
            False: if movement step is not ignored. </returns>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetCurrentValue(System.Single)">
            <summary>
            Setting the current slider value. If the value is greater/less than the maximum/minimum 
            slider value, then the slider value becomes equal to the maximum/minimum value.
            </summary>
            <param name="value">Slider value.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.GetCurrentValue">
            <summary>
            Getting the current slider value.
            </summary>
            <returns>Slider value.</returns>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetMinValue(System.Single)">
            <summary>
            Setting the minimum slider value limit. 
            Slider value cannot be less than this limit.
            </summary>
            <param name="value">Minimum slider value limit.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.GetMinValue">
            <summary>
            Getting the current minimum slider value limit.
            </summary>
            <returns>Minimum slider value limit.</returns>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetMaxValue(System.Single)">
            <summary>
            Setting the maximum slider value limit. 
            Slider value cannot be greater than this limit.
            </summary>
            <param name="value">Maximum slider value limit.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.GetMaxValue">
            <summary>
            Getting the current maximum slider value limit.
            </summary>
            <returns>Maximum slider value limit.</returns>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.#ctor">
            <summary>
            Default HorizontalSlider constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.InitElements">
            <summary>
            Initializing all elements in the HorizontalSlider.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the HorizontalSlider.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSlider.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the HorizontalSlider.
            <para/> Inner styles: "track", "handler".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.HorizontalSplitArea">
            <summary>
            HorizontalSplitArea is a container with two divided areas (on top and on bottom). 
            HorizontalSplitArea implements SpaceVIL.Core.IVLayout.
            <para/> Contains SpaceVIL.SplitHolder.
            <para/> By default ability to get focus is disabled.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetSplitPosition(System.Int32)">
            <summary>
            Setting position of the split holder.
            </summary>
            <param name="position">Position of the split holder.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetSplitColor(System.Drawing.Color)">
            <summary>
            Setting split holder color.
            </summary>
            <param name="color">Split holder color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.#ctor">
            <summary>
            Defaults HorizontalSplitArea constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.InitElements">
            <summary>
            Initializing all elements in the HorizontalSplitArea. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetTopItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Assign item on the top area of the HorizontalSplitArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetBottomItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Assign item on the bottom area of the HorizontalSplitArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetHeight(System.Int32)">
            <summary>
            Setting HorizontalSplitArea height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height">Height of the HorizontalSplitArea.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of the HorizontalSplitArea.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IVLayout).
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetSplitThickness(System.Int32)">
            <summary>
            Setting thickness of SplitHolder divider.
            </summary>
            <param name="thickness">Thickness of SplitHolder divider.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalSplitArea.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the HorizontalSplitArea.
            <para/> Inner styles: "splitholder".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.HorizontalStack">
            <summary>
            HorizontalStack is a class that represents a line type container (horizontal version). 
            HorizontalStack groups items one after another using content alignment, margins, paddings, 
            sizes and size policies.
            HorizontalStack implements SpaceVIL.Core.IHLayout.
            <para/> By default ability to get focus is disabled.
            <para/> HorizontalStack cannot receive any events, 
            so HorizontalStack is always in the SpaceVIL.Core.ItemStateType.Base state.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.SetContentAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting content alignment within HorizontalStack area. 
            <para/> Supports only: ItemAlignment.Left, ItemAlignment.HCenter, ItemAlignment.Right.
            <para/> Default: ItemAlignment.Left.
            </summary>
            <param name="alignment">Content alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.GetContentAlignment">
            <summary>
            Getting current content alignment.
            <para/> Can be: ItemAlignment.Left, ItemAlignment.HCenter, ItemAlignment.Right.
            </summary>
            <returns>Content alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.#ctor">
            <summary>
            Default HorizontalStack constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the HorizontalStack. 
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Inserting item to the HorizontalStack container. 
            If the count of container elements is less than the index, 
            then the element is added to the end of the list.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the HorizontalStack container.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.SetWidth(System.Int32)">
            <summary>
            Setting HorizontalStack width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width">Width of the HorizontalStack.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the HorizontalStack.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.HorizontalStack.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IHLayout).
            </summary>
        </member>
        <member name="T:SpaceVIL.ImageItem">
            <summary>
            ImageItem is class for rendering loaded images. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetAreaBounds">
            <summary>
            Getting bounds for an image (for example: to keep aspect ratio).
            </summary>
            <returns>Bounds as SpaceVIL.Core.Area.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetImage">
            <summary>
            Getting a bitmap image in the form as System.Drawing.Bitmap.
            </summary>
            <returns>Image as System.Drawing.Bitmap.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetRotationAngle(System.Single)">
            <summary>
            Setting rotation angle for image.
            <para/> Default: 0.
            </summary>
            <param name="angle">Rotation angle.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetRotationAngle">
            <summary>
            Getting rotation angle for image.
            </summary>
            <returns>Rotation angle.</returns>
        </member>
        <member name="F:SpaceVIL.ImageItem.IsHover">
            <summary>
            Property to enable or disable mouse events (hover, click, press, scroll).
            <para/> True: ImageItem can receive mouse events. False: cannot receive mouse events.
            <para/> Default: False.
            </summary>
        </member>
        <member name="M:SpaceVIL.ImageItem.#ctor">
            <summary>
            Default ImageItem constructor. Does not contains any image.
            </summary>
        </member>
        <member name="M:SpaceVIL.ImageItem.#ctor(System.Drawing.Bitmap)">
            <summary>
            Constructs an ImageItem with an bitmap image.
            </summary>
            <param name="picture">Bitmap image as System.Drawing.Bitmap.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.#ctor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Constructs an ImageItem with an bitmap image 
            with the ability to enable or disable mouse events.
            </summary>
            <param name="picture">Bitmap image as System.Drawing.Bitmap.</param>
            <param name="hover">True: ImageItem can receive mouse events. 
            False: cannot receive mouse events.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetImageWidth">
            <summary>
            Getting an image width.
            </summary>
            <returns>Image width.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetImageHeight">
            <summary>
            Getting an image height.
            </summary>
            <returns>Image height.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetImage(System.Drawing.Bitmap)">
            <summary>
            Setting new bitmap image of ImageItem.
            </summary>
            <param name="image">New bitmap image as System.Drawing.Bitmap.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetColorOverlay">
            <summary>
            Getting color overlay (useful in images that have alpha channel).
            </summary>
            <returns>Color overlay as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetColorOverlay(System.Drawing.Color)">
            <summary>
            Setting color overlay (useful in images that have alpha channel).
            </summary>
            <param name="color">Color overlay as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetColorOverlay(System.Drawing.Color,System.Boolean)">
            <summary>
            Setting color overlay (useful in images that have alpha channel) 
            with ability to specify overlay status.
            </summary>
            <param name="color">Color overlay as System.Drawing.Color.</param>
            <param name="overlay">True: if color overlay is using. 
            False: if color overlay is not using.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetColorOverlay(System.Boolean)">
            <summary>
            Setting color overlay status.
            </summary>
            <param name="overlay">True: if color overlay is using. 
            False: if color overlay is not using.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.IsColorOverlay">
            <summary>
            Getting color overlay status.
            </summary>
            <returns>True: if color overlay is using. 
            False: if color overlay is not using.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.KeepAspectRatio(System.Boolean)">
            <summary>
            Setting value to keep or not to keep еру aspect ratio of the image.
            </summary>
            <param name="value">True: to keep aspect ratio of the image. 
            False: to not keep aspect ratio of the image.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.IsAspectRatio">
            <summary>
            Returns True if aspect ratio of the image is kept otherwise returns False.
            </summary>
            <returns>True: if aspect ratio of the image is kept. 
            False: if aspect ratio of the image is not kept.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting ImageItem size (width and height).
            </summary>
            <param name="width"> Width of the ImageItem. </param>
            <param name="height"> Height of the ImageItem. </param>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetHeight(System.Int32)">
            <summary>
            Setting ImageItem height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the ImageItem. </param>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetWidth(System.Int32)">
            <summary>
            Setting ImageItem width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the ImageItem. </param>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the ImageItem.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of the ImageItem.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.ImageItem.Release">
            <summary>
            Disposing bitmap resources if the item was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ImageItem.GetImageQuality">
            <summary>
            Getting an image filtering quality.
            </summary>
            <returns>Image filtering quality as SpaceVIL.Core.ImageQuality.</returns>
        </member>
        <member name="M:SpaceVIL.ImageItem.SetImageQuality(SpaceVIL.Core.ImageQuality)">
            <summary>
            Setting an image filtering quality.
            </summary>
            <param name="quality">Image filtering quality as SpaceVIL.Core.ImageQuality.</param>
        </member>
        <member name="T:SpaceVIL.Indicator">
            <summary>
            Indicator is the basic implementation of a user interface indicator which 
            can be in enabled state or can be disabled state. 
            Used in SpaceVIL.CheckBox and SpaceVIL.RadioButton.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.Indicator.#ctor">
            <summary>
            Default Indicator constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Indicator.InitElements">
            <summary>
            Initializing all elements in the Indicator. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Indicator.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the Indicator.
            <para/> Inner styles: "marker".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.InputDialog">
            <summary>
            InputDialog - an imitation of modal window 
            for entering text and perform assigned actions. 
            <para/> Contains ACTION button, CANCEL button, titlebar. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputDialog.GetResult">
            <summary>
            Getting text input result. Default: empty.
            </summary>
            <returns>Text result as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.InputDialog.GetActionButton">
            <summary>
            Getting ACTION button for appearance customizing or assigning new actions.
            </summary>
            <returns>InputDialog's OK button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.InputDialog.GetCancelButton">
            <summary>
            Getting CANCEL button for appearance customizing or assigning new actions.
            </summary>
            <returns>InputDialog's CANCEL button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.InputDialog.SetCancelVisible(System.Boolean)">
            <summary>
            Setting CANCEL button visible of invisible.
            </summary>
            <param name="value">True: if you want CANCEL button to be visible. 
            False: if you want CANCEL button to be invisible.</param>
        </member>
        <member name="M:SpaceVIL.InputDialog.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a InputDialog with specified default text, 
            title and name of ACTION button.
            </summary>
            <param name="title">Title of InputDialog as System.String.</param>
            <param name="actionName">Name of ACTION button as System.String.</param>
            <param name="textByDefault">Default text of text field as System.String.</param>
        </member>
        <member name="M:SpaceVIL.InputDialog.#ctor(System.String,System.String)">
            <summary>
            Constructs a InputDialog with specified 
            title and name of ACTION button.
            </summary>
            <param name="title">Title of InputDialog as System.String.</param>
            <param name="actionName">Name of ACTION button as System.String.</param>
        </member>
        <member name="M:SpaceVIL.InputDialog.InitElements">
            <summary>
            Initializing all elements in the InputDialog. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputDialog.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows InputDialog and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching InputDialog.</param>
        </member>
        <member name="M:SpaceVIL.InputDialog.Close">
            <summary>
            Closes InputDialog.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputDialog.SelectAll">
            <summary>
            Select all text in the text field.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputDialog.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style for entire InputDialog.
            <para/> Inner styles: textedit", "layout", "toolbar", "button".
            </summary>
            <param name="style">A style for InputDialog as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.Label">
            <summary>
            Label is is the basic implementation of a user interface non-editable text item. 
            Label has multiline text support.
            <para/> Supports all events except drag and drop.
            <para/> By default, Label is stretched to all available space in the container.
            </summary>
        </member>
        <member name="F:SpaceVIL.Label.IsHover">
            <summary>
            Property to enable or disable mouse events (hover, click, press, scroll).
            <para/> True: Label can receive mouse events. False: cannot receive mouse events.
            <para/> Default: True.
            </summary>
        </member>
        <member name="M:SpaceVIL.Label.#ctor">
            <summary>
            Default Label constructor. 
            </summary>
        </member>
        <member name="M:SpaceVIL.Label.#ctor(System.String)">
            <summary>
            Constructs a Label with text.
            </summary>
            <param name="text">Label text.</param>
        </member>
        <member name="M:SpaceVIL.Label.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a Label with text and with the ability 
            to enable or disable mouse events.
            </summary>
            <param name="text">Label text.</param>
            <param name="hover">True: Label can receive mouse events. 
            False: cannot receive mouse events.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of Label text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of an Label text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Label.GetTextAlignment">
            <summary>
            Getting alignment of a Label text. 
            </summary>
            <returns>Text alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.Label.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to Label.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to Label.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Label.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.Label.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.Label.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.Label.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.Label.GetText">
            <summary>
            Getting the current text of the Label.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Label.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a Label.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Label.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a Label in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Label.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a Label in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Label.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a Label in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Label.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a Label in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Label.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Label.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize Label by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.Label.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize Label by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.Label.SetWidth(System.Int32)">
            <summary>
            Setting Label width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the Label. </param>
        </member>
        <member name="M:SpaceVIL.Label.InitElements">
            <summary>
            Initializing all elements in the Label.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Label.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the Label.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Label.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IVLayout).
            </summary>
        </member>
        <member name="T:SpaceVIL.LinesContainer">
            <summary>
            LinesContainer is class for rendering lines in graph.
            </summary>
        </member>
        <member name="M:SpaceVIL.LinesContainer.#ctor">
            <summary>
            Default LinesContainer constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.LinesContainer.SetLineThickness(System.Single)">
            <summary>
            Setting thickness of lines.
            </summary>
            <param name="thickness">Line thickness.</param>
        </member>
        <member name="M:SpaceVIL.LinesContainer.GetLineThickness">
            <summary>
            Getting lines thickness.
            </summary>
            <returns>Lines thickness.</returns>
        </member>
        <member name="M:SpaceVIL.LinesContainer.SetLineColor(System.Drawing.Color)">
            <summary>
            Setting lines color.
            <para/> Default: Blue.
            </summary>
            <param name="color">Line color.</param>
        </member>
        <member name="M:SpaceVIL.LinesContainer.GetLineColor">
            <summary>
            Getting lines color.
            </summary>
            <returns>Lines color.</returns>
        </member>
        <member name="M:SpaceVIL.LinesContainer.SetPoints(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting points coordinates.
            </summary>
            <param name="coord">Points list as List of float[2] array.</param>
        </member>
        <member name="M:SpaceVIL.LinesContainer.GetPoints">
            <summary>
            Getting points coordinates.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.LinesContainer.MakeShape">
            <summary>
            Overridden method for stretching the points position relative 
            to the current size of the item. 
            Use in conjunction with GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="T:SpaceVIL.ListArea">
            <summary>
            ListArea is a scrollable container for other elements with ability of selection. 
            ListArea is part of SpaceVIL.ListBox which controls scrolling, resizing and etc.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.ListArea.SelectionChanged">
            <summary>
            Event that is invoked when one of the element is selected.
            </summary>
        </member>
        <member name="F:SpaceVIL.ListArea.ItemListChanged">
            <summary>
            Event that is invoked when one of the set of elements is changed.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListArea.Release">
            <summary>
            Disposing ListArea resources if it was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListArea.SetStep(System.Int32)">
            <summary>
            Setting scroll movement step.
            </summary>
            <param name="value">Scroll step.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.GetStep">
            <summary>
            Getting scroll movement step.
            </summary>
            <returns>Scroll step.</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.GetSelection">
            <summary>
            Getting index of selected item.
            </summary>
            <returns>Index of selected item.</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.GetSelectedItem">
            <summary>
            Getting selected item.
            </summary>
            <returns>Selected item as SpaceVIL.Core.IBaseItem</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.SetSelection(System.Int32)">
            <summary>
            Select item by index.
            </summary>
            <param name="index">Index of selection.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.Unselect">
            <summary>
            Unselect selected item.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListArea.SetSelectionVisible(System.Boolean)">
            <summary>
            Enable or disable selection ability of ListArea.
            </summary>
            <param name="value">True: if you want selection ability of ListArea to be enabled. 
            False: if you want selection ability of ListArea to be disabled.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.IsSelectionVisible">
            <summary>
            Returns True if selection ability of ListArea is enabled otherwise returns False.
            </summary>
            <returns>True: selection ability of ListArea is enabled. 
            False: selection ability of ListArea is disabled.</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.#ctor">
            <summary>
            Default ListArea constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListArea.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Insert item into the ListArea by index.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Add item to the ListArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.SetListContent(System.Collections.Generic.IEnumerable{SpaceVIL.Core.IBaseItem})">
            <summary>
            Adding all elements in the ListArea from the given list.
            </summary>
            <param name="content">List of items as 
            System.Collections.Generic.IEnumerable&lt;IBaseItem&gt;</param>
        </member>
        <member name="M:SpaceVIL.ListArea.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the ListArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.Clear">
            <summary>
            Removing all items from the ListArea.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListArea.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of the ListArea.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.GetVScrollOffset">
            <summary>
            Getting vertical scroll offset in the ListArea.
            </summary>
            <returns>Vertical scroll offset.</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.SetVScrollOffset(System.Int64)">
            <summary>
            Setting vertical scroll offset of the ListArea.
            </summary>
            <param name="value">Vertical scroll offset.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.GetHScrollOffset">
            <summary>
            Getting horizontal scroll offset in the ListArea.
            </summary>
            <returns>Horizontal scroll offset.</returns>
        </member>
        <member name="M:SpaceVIL.ListArea.SetHScrollOffset(System.Int64)">
            <summary>
            Setting horizontal scroll offset of the ListArea.
            </summary>
            <param name="value">Horizontal scroll offset.</param>
        </member>
        <member name="M:SpaceVIL.ListArea.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IVLayout).
            </summary>
        </member>
        <member name="M:SpaceVIL.ListArea.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ListArea. 
            <para/> Inner styles: "selection".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.ListBox">
            <summary>
            ListBox is a container for SpaceVIL.ListArea 
            (scrollable container for other elements with ability of selection)
            and scroll bars. ListBox controls scrolling, resizing and other actions of SpaceVIL.ListArea.
            <para/> Contains list area, scroll bars, menu button, navigation context menu.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.SetScrollStep(System.Int32)">
            <summary>
            Setting scroll movement step.
            </summary>
            <param name="value">Scroll step.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.GetScrollStep">
            <summary>
            Getting scroll movement step.
            </summary>
            <returns>Scroll step.</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.GetSelection">
            <summary>
            Getting index of selected item.
            </summary>
            <returns>Index of selected item.</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.SetSelection(System.Int32)">
            <summary>
            Select item by index.
            </summary>
            <param name="index">Index of selection.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.Unselect">
            <summary>
            Unselect selected item.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.SetSelectionVisible(System.Boolean)">
            <summary>
            Enable or disable selection ability of ListArea.
            </summary>
            <param name="value">True: if you want selection ability of ListArea to be enabled. 
            False: if you want selection ability of ListArea to be disabled.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.IsSelectionVisible">
            <summary>
            Returns True if selection ability of ListArea is enabled otherwise returns False.
            </summary>
            <returns>True: selection ability of ListArea is enabled. 
            False: selection ability of ListArea is disabled.</returns>
        </member>
        <member name="F:SpaceVIL.ListBox.Menu">
            <summary>
            Interactive item to show the navigation context menu.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.SetMenuDisabled(System.Boolean)">
            <summary>
            Setting the navigation context menu to disable or enable.
            </summary>
            <param name="value">True: if you want to disable navigation context menu. 
            False: if you want to enable navigation context menu. </param>
        </member>
        <member name="M:SpaceVIL.ListBox.GetArea">
            <summary>
            Getting list area of ListBox.
            </summary>
            <returns>List area as SpaceVIL.ListArea.</returns>
        </member>
        <member name="F:SpaceVIL.ListBox.VScrollBar">
            <summary>
            Vertical scroll bar of ListBox.
            </summary>
        </member>
        <member name="F:SpaceVIL.ListBox.HScrollBar">
            <summary>
            Horizontal scroll bar of ListBox.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.GetVScrollBarPolicy">
            <summary>
            Getting vertical scroll bar visibility policy.
            </summary>
            <returns>Visibility policy as SpaceVIL.Core.VisibilityPolicy.</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.SetVScrollBarPolicy(SpaceVIL.Core.VisibilityPolicy)">
            <summary>
            Setting vertical scroll bar visibility policy.
            <para/> Default: SpaceVIL.Core.VisibilityPolicy.AsNeeded.
            </summary>
            <param name="policy">Visibility policy as SpaceVIL.Core.VisibilityPolicy.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.GetHScrollBarPolicy">
            <summary>
            Getting horizontal scroll bar visibility policy.
            </summary>
            <returns>Visibility policy as SpaceVIL.Core.VisibilityPolicy.</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.SetHScrollBarPolicy(SpaceVIL.Core.VisibilityPolicy)">
            <summary>
            Setting horizontal scroll bar visibility policy.
            <para/> Default: SpaceVIL.Core.VisibilityPolicy.AsNeeded.
            </summary>
            <param name="policy">Visibility policy as SpaceVIL.Core.VisibilityPolicy.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.#ctor">
            <summary>
            Default ListBox constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.ListBox.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.ListBox.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the list area of ListBox.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Insert item into the list area of ListBox by index.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.ListBox.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the list area of ListBox.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.Clear">
            <summary>
            Removing all items from the list area of ListBox.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.UpdateElements">
            <summary>
            Updating all ListBox inner items.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.InitElements">
            <summary>
            Initializing all elements in the ListBox. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ListBox.GetListContent">
            <summary>
            Getting content of the list area of ListBox.
            </summary>
            <returns>Content of the list area as 
            List&lt;SpaceVIL.Core.IBaseItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.SetListContent(System.Collections.Generic.IEnumerable{SpaceVIL.Core.IBaseItem})">
            <summary>
            Adding all elements in the list area of ListBox from the given list.
            </summary>
            <param name="content">List of items as 
            IEnumerable&lt;SpaceVIL.Core.IBaseItem&gt;</param>
        </member>
        <member name="M:SpaceVIL.ListBox.GetWrapper(SpaceVIL.Core.IBaseItem)">
            <summary>
            Getting wrapper of item.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>Wrapper of given item as SpaceVIL.SelectionItem.</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.GetSelectedItem">
            <summary>
            Getting selected item.
            </summary>
            <returns>Selected item as SpaceVIL.Core.IBaseItem</returns>
        </member>
        <member name="M:SpaceVIL.ListBox.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ListBox. 
            <para/> Inner styles: "area", "vscrollbar", "hscrollbar", "menu".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.LoadingScreen">
            <summary>
            LoadingScreen is designed to lock the entire window 
            to prevent all input events during the execution of any long time task.
            <para/> Contains image and text.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetImage(System.Drawing.Bitmap)">
            <summary>
            Setting an image that should let the user know that 
            another task is not yet complete, and the user must wait.
            </summary>
            <param name="image">Image as System.Drawing.Bitmap.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetValueVisible(System.Boolean)">
            <summary>
            Setting the text that represents the progress of the unfinished task, 
            visible or invisible.
            </summary>
            <param name="value">True: if text should be visible. 
            False: if text should be invisible.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.IsValueVisible">
            <summary>
            Returns True if text that represents the progress of 
            the unfinished task is visible, otherwise returns False.
            </summary>
            <returns>True: if text is visible. 
            False: if text is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.#ctor">
            <summary>
            Default LoadingScreen constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.InitElements">
            <summary>
            Initializing all elements in the LoadingScreen. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetCurrentValue(System.Int32)">
            <summary>
            Setting the progress value of the unfinished task.
            </summary>
            <param name="value">Progress value of the unfinished task.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.GetCurrentValue">
            <summary>
            Getting the progress value of the unfinished task.
            </summary>
            <returns>Progress value of the unfinished task.</returns>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetToClose">
            <summary>
            Informing of LoadingScreen to closes.
            </summary>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows LoadingScreen and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching LoadingScreen.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.Close">
            <summary>
            Closes LoadingScreen.
            </summary>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a ButtonCore.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ButtonCore in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ButtonCore in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ButtonCore in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ButtonCore in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.LoadingScreen.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the LoadingScreen. 
            <para/> Inner styles: "text", "image".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.MenuItem">
            <summary>
            MenuItem is designed to be an option in menu type items 
            such as SpaceVIL.ContextMenu and ComboBoxDropDown.
            <para/> Contains text and arrow.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.MenuItem.IsActionItem">
            <summary>
            Property to mark this MenuItem as active type (such MenuItem can show another SpaceVIL.ContextMenu). 
            True this MenuItem is active otherwise False.
            <para/> Default: False.
            </summary>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetSender">
            <summary>
            Getting the item that invokes ContextMenu of this MenuItem.
            </summary>
            <returns>Item as SpaceVIL.Prototype.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetSubContextMenu">
            <summary>
            Getting the assigned SpaceVIL.ContextMenu. 
            If MenuItem is active type it can invoke assigned SpaceVIL.ContextMenu.
            </summary>
            <returns>Assigned context menu as SpaceVIL.ContextMenu.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetArrow">
            <summary>
            Getting arrow for styling appearance.
            </summary>
            <returns>Arrow as SpaceVIL.CustomShape.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.AssignContextMenu(SpaceVIL.ContextMenu)">
            <summary>
            Assigning SpaceVIL.ContextMenu to this MenuItem. 
            In this case MenuItem becomes active type and can invoke assigned SpaceVIL.ContextMenu.
            </summary>
            <param name="contextMenu">Assigned context menu as SpaceVIL.ContextMenu.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.#ctor">
            <summary>
            Default MenuItem constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.MenuItem.#ctor(System.String)">
            <summary>
            Constructs a MenuItem with text.
            </summary>
            <param name="text">Text for MenuItem.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.#ctor(SpaceVIL.ContextMenu,System.String)">
            <summary>
            Constructs a MenuItem with text and assigns context menu.
            </summary>
            <param name="contextMenu">Assigned context menu as SpaceVIL.ContextMenu.</param>
            <param name="text">Text for MenuItem.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize item by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize item by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this MenuItem.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to MenuItem.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetText">
            <summary>
            Getting the current text of the MenuItem.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a MenuItem.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a MenuItem in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a MenuItem in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a MenuItem in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a MenuItem in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.MenuItem.InitElements">
            <summary>
            Initializing all elements in the MenuItem.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.MenuItem.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item into the container (this).
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the MenuItem.
            <para/> Inner styles: "arrow", "text".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.AddArrow(SpaceVIL.CustomShape)">
            <summary>
            Adding custom arrow shape.
            </summary>
            <param name="arrow">Arrow shape as SpaceVIL.CustomShape.</param>
        </member>
        <member name="M:SpaceVIL.MenuItem.Show">
            <summary>
            Shows the assigned ContextMenu at the proper position. Only if this MeniItem is active type.
            </summary>
        </member>
        <member name="M:SpaceVIL.MenuItem.Hide">
            <summary>
            Hides the assigned ContextMenu. Only if this MeniItem is active type.
            </summary>
        </member>
        <member name="T:SpaceVIL.MessageItem">
            <summary>
            MessageItem - an imitation of modal window for displaying any messages with ability to reply to them. 
            It supports custom toolbar to make user's reply flexible.
            <para/> Contains ok button, cancel button, titlebar, toolbar. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetResult">
            <summary>
            Getting MessageItem result.
            <para/> Default: False
            </summary>
            <returns>True: OK button was clicked. False: any button other than OK was pressed.</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetUserButtonResult">
            <summary>
            Getting result from custom toolbar (if it was created).
            </summary>
            <returns>Id of clicked button (see AddUserButton(ButtonCore button, int id)).</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetOkButton">
            <summary>
            Getting OK button for appearance customizing or assigning new actions.
            </summary>
            <returns>MessageItem's OK button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetCancelButton">
            <summary>
            Getting CANCEL button for appearance customizing or assigning new actions.
            </summary>
            <returns>MessageItem's CANCEL button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.SetCancelVisible(System.Boolean)">
            <summary>
            Setting CANCEL button visible of invisible.
            </summary>
            <param name="value">True: if you want CANCEL button to be visible. 
            False:if you want CANCEL button to be invisible.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.#ctor">
            <summary>
            Default MessageItem constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageItem.#ctor(System.String,System.String)">
            <summary>
            Constructs a MessageItem with specified message and title.
            </summary>
            <param name="message">Message to a user.</param>
            <param name="title">Title of MessageItem.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.SetMessageText(System.String)">
            <summary>
            Setting a text of message of MessageItem.
            </summary>
            <param name="text">Text of message.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetMessageText">
            <summary>
            Getting the current text of message of MessageItem.
            </summary>
            <returns>The current text of message.</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.SetTitle(System.String)">
            <summary>
            Setting a text of title of MessageItem.
            </summary>
            <param name="title">Text of title.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetTitle">
            <summary>
            Getting the current text of title of MessageItem.
            </summary>
            <returns>The current text of title.</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.InitElements">
            <summary>
            Initializing all elements in the Messagetem. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageItem.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows MessageItem and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching MessageItem.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.Close">
            <summary>
            Closes MessageItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageItem.AddUserButton(SpaceVIL.ButtonCore,System.Int32)">
            <summary>
            Adding a custom user button to toolbal with the specified ID.
            </summary>
            <param name="button">User button as SpaceVIL.ButtonCore.</param>
            <param name="id">Button's ID as System.Int32.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.GetDialogButtonStyle">
            <summary>
            Getting the current style of a custom user button (that placed into user's toolbar).
            </summary>
            <returns>The current style of custom user buttons as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.MessageItem.SetDialogButtonStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style for a custom user button (that placed into user's toolbar).
            </summary>
            <param name="style">A style for custom user buttons as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.MessageItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style for entire MessageBox.
            <para/> Inner styles: "message", "layout", "toolbar", "userbar" (custom toolbar), "button".
            </summary>
            <param name="style">A style for MessageBox as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.OpenDialog">
            <summary>
            Abstract class containing all common methods and properties 
            for creating UI element for file browsing.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenDialog.SetTitle(System.String)">
            <summary>
            Setting a title text of the dialog window.
            </summary>
            <param name="title">Title text.</param>
        </member>
        <member name="M:SpaceVIL.OpenDialog.GetTitle">
            <summary>
            Getting a title text of the dialog window.
            </summary>
            <returns>Title text.</returns>
        </member>
        <member name="M:SpaceVIL.OpenDialog.#ctor">
            <summary>
            Default common constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenDialog.InitElements">
            <summary>
            Initializing all elements in the OpenDialog.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenDialog.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows OpenDialog and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching OpenDialog.</param>
        </member>
        <member name="M:SpaceVIL.OpenDialog.Close">
            <summary>
            Closes OpenDialog.
            </summary>
        </member>
        <member name="T:SpaceVIL.OpenEntryDialog">
            <summary>
            OpenEntryDialog is user interface element for browsing file system 
            to select a file or folder to open or save.
            Support create/rename/delete files and folders, navigate shortcuts, file filtering.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.GetResult">
            <summary>
            Getting full path of selected fyle system entry.
            </summary>
            <returns>Full path of selected fyle system entry.</returns>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.SetDefaultPath(System.String)">
            <summary>
            Setting the default path that will be opened when OpenEntryDialog is shown.
            </summary>
            <param name="path">Default path to open.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.#ctor(System.String,SpaceVIL.Core.FileSystemEntryType,SpaceVIL.Core.OpenDialogType)">
            <summary>
            Constructs OpenEntryDialog with title text, entry type and dialog type. 
            <para/> Entry type can be FileSystemEntryType.File or FileSystemEntryType.Directory. 
            <para/> Dialog type can be OpenDialogType.Open or OpenDialogType.Save.
            </summary>
            <param name="title">Title text.</param>
            <param name="entryType">Entry type as SpaceVIL.Core.FileSystemEntryType.</param>
            <param name="dialogType">Dialog type as SpaceVIL.Core.OpenDialogType.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.#ctor(System.String,SpaceVIL.Core.FileSystemEntryType)">
            <summary>
            Constructs OpenEntryDialog with title text, entry type. Dialog type is OpenDialogType.Open.
            <para/> Entry type can be FileSystemEntryType.File or FileSystemEntryType.Directory. 
            </summary>
            <param name="title">Title text.</param>
            <param name="entryType">Entry type as SpaceVIL.Core.FileSystemEntryType.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.#ctor(System.String)">
            <summary>
            Constructs OpenEntryDialog with title text. Entry type is FileSystemEntryType.File. 
            Dialog type is OpenDialogType.Open.
            </summary>
            <param name="title">Title text.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.InitElements">
            <summary>
            Initializing all elements in the OpenEntryDialog.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.RefreshFolder">
            <summary>
            Refresh opened folder.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.AddFilterExtensions(System.String[])">
            <summary>
            Adding file filter extensions. 
            <para/> Rule: "filter name (*.ext1, *.ext2, *.extN) ; *.ext1, *.ext2, *.extN&quot;
            <para/> Example 1: "Text files (*.txt) ; *.txt&quot;
            <para/> Example 2: "Images (*.png, *.bmp, *.jpg) ; *.png, *.bmp, *.jpg&quot;
            </summary>
            <param name="exts"> File filter extensions. </param>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows OpenEntryDialog and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching OpenEntryDialog.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryDialog.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the OpenEntryDialog.
            <para/> Inner styles: "window", "layout", "toolbar", "toolbarbutton",
            "buttonhidden", "addressline", "filenameline", "list", "controlpanel", 
            "okbutton", "cancelbutton", "filter", "filtertext", "divider".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.PasswordLine">
            <summary>
            PaasswordLine is designed to hide the input of text information. 
            <para/> Contains text field, unhide button.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.PasswordLine.#ctor">
            <summary>
            Default PasswordLine constructor
            </summary>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetFocus">
            <summary>
            Setting focus on this PasswordLine if it is focusable.
            </summary>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of a PasswordLine text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of a PasswordLine text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetTextAlignment">
            <summary>
            Getting alignment of a PasswordLine text. 
            </summary>
            <returns>Text alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this PasswordLine.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to PasswordLine.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetPassword">
            <summary>
            Getting entered hidden text data.
            </summary>
            <returns>Text data.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a PasswordLine.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a PasswordLine in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a PasswordLine in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a PasswordLine in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a PasswordLine in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.IsEditable">
            <summary>
            Returns True if PasswordLine is editable otherwise returns False.
            </summary>
            <returns>True: if PasswordLine is editable.
            True: if PasswordLine is not editable.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetEditable(System.Boolean)">
            <summary>
            Setting PasswordLine text field be editable or be non-editable.
            </summary>
            <param name="value">True: if you want PasswordLine be editable.
            True: if you want PasswordLine be non-editable.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.InitElements">
            <summary>
            Initializing indicator and text in the PasswordLine. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.PasswordLine.IsPassEvents">
            <summary>
            Getting boolean value to know if this item can pass further 
            any input events (mouse, keyboard and etc.).
            <para/> Tip: Need for filtering input events.
            </summary>
            <returns>True: if this item pass on any input events.
            False: If this item do not pass any input events.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.IsPassEvents(SpaceVIL.Core.InputEventType)">
            <summary>
            Getting boolean value to know if this item can pass further 
            the specified type of input events (mouse, keyboard and etc.).
            </summary>
            <param name="e">Type of input events as SpaceVIL.Core.InputEventType.</param>
            <returns>True: if this item pass on the specified type of input events.
            False: If this item do not pass the specified type of input events.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetPassEvents">
            <summary>
            Getting all allowed input events.
            </summary>
            <returns>Allowed input events as List&lt;SpaceVIL.Core.InputEventType&gt;</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetBlockedEvents">
            <summary>
            Getting all blocked input events.
            </summary>
            <returns>Blocked input events as List&lt;SpaceVIL.Core.InputEventType&gt;</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetPassEvents(System.Boolean)">
            <summary>
            Setting on or off so that this item can pass further 
            any input events (mouse, keyboard and etc.).
            </summary>
            <param name="value">True: if you want that this item may to pass on any input events.
            False: if you want that this item cannot to pass on any input events.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetPassEvents(System.Boolean,SpaceVIL.Core.InputEventType)">
            <summary>
            Setting on or off so that this item can pass further 
            the specified type of input events (mouse, keyboard and etc.).
            </summary>
            <param name="value">True: if you want this item can pass further the specified type of input events.
            False: if you want this item connot pass further the specified type of input events.</param>
            <param name="e">Type of input events as SpaceVIL.Core.InputEventType.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetPassEvents(System.Boolean,SpaceVIL.Core.InputEventType[])">
            <summary>
            Setting on or off so that this item can pass further 
            the specified types of input events (mouse, keyboard and etc.).
            </summary>
            <param name="value">True: if you want this item can pass further the specified types of input events.
            False: if you want this item connot pass further the specified types of input events.</param>
            <param name="events">Sequence of input event types as SpaceVIL.Core.InputEventType.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize PasswordLine by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize PasswordLine by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.Clear">
            <summary>
            Remove all text from the PasswordLine.
            </summary>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the PasswordLine.
            <para/> Inner styles: "showmarker", "textedit".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateText(System.String)">
            <summary>
            Setting the substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            </summary>
            <param name="substrateText">Substrate text.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateFontSize(System.Int32)">
            <summary>
            Setting font size of the substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            <para/> Font family of substrate text is the same as main font.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            <para/> Font family of substrate text is the same as main font.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateForeground(System.Drawing.Color)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color of a PasswordLine.
            </summary>
            <param name="color">Substrate text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color of a PasswordLine in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SeSubstratetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color of a PasswordLine in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible)color of a PasswordLine in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.SetSubstrateForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible)color of a PasswordLine in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetSubstrateForeground">
            <summary>
            Getting current substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.PasswordLine.GetSubstrateText">
            <summary>
            Getting substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            </summary>
            <returns>Substrate text.</returns>
        </member>
        <member name="T:SpaceVIL.PointsContainer">
            <summary>
            PointsContainer is class for rendering points in graph. 
            </summary>
        </member>
        <member name="M:SpaceVIL.PointsContainer.#ctor">
            <summary>
            Default PointsContainer constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.PointsContainer.SetPointThickness(System.Single)">
            <summary>
            Setting thickness of points.
            </summary>
            <param name="thickness">Point thickness.</param>
        </member>
        <member name="M:SpaceVIL.PointsContainer.GetPointThickness">
            <summary>
            Getting points thickness.
            </summary>
            <returns>Point thickness.</returns>
        </member>
        <member name="M:SpaceVIL.PointsContainer.SetPointColor(System.Drawing.Color)">
            <summary>
            Setting points color. Default: White.
            </summary>
            <param name="color">Points color.</param>
        </member>
        <member name="M:SpaceVIL.PointsContainer.GetPointColor">
            <summary>
            Getting points color.
            </summary>
            <returns>Points color.</returns>
        </member>
        <member name="M:SpaceVIL.PointsContainer.SetPointShape(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting custom shape for points (if one want to use other shape than circle).
            </summary>
            <param name="shape">Points list of the shape as List of float[2] array.</param>
        </member>
        <member name="M:SpaceVIL.PointsContainer.GetPointShape">
            <summary>
            Getting current shape of points. Default: circle shape.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.PointsContainer.SetPoints(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting points coordinates.
            </summary>
            <param name="coord">Points list as List of float[2] array.</param>
        </member>
        <member name="M:SpaceVIL.PointsContainer.GetPoints">
            <summary>
            Getting points coordinates.
            </summary>
            <returns>Points list as List of float[2] array.</returns>
        </member>
        <member name="M:SpaceVIL.PointsContainer.MakeShape">
            <summary>
            Overridden method for stretching the points position relative 
            to the current size of the item. 
            Use in conjunction with GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="T:SpaceVIL.PopUpMessage">
            <summary>
            PopUpMessage is designed to display short quick messages to the user. 
            PopUpMessage disappears after a specified period of time (default: 2 seconds), 
            or you can prevent this by moving the cursor over PopUpMessage and closing 
            it later manually.
            <para/> Contains text, close button.
            <para/> Supports all events except drag and drop.
            <para/> By default PopUpMessage do not pass further 
            any input events (mouse, keyboard and etc.).
            </summary>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetTimeOut(System.Int32)">
            <summary>
            Setting waiting time in milliseconds after which PopUpMessage will be closed.
            <para/>Default: 2000 milliseconds (2 seconds).
            </summary>
            <param name="milliseconds">Waiting time in milliseconds.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetTimeOut">
            <summary>
            Getting current waiting time in milliseconds after which PopUpMessage will be closed.
            </summary>
            <returns>Current waiting time in milliseconds.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.#ctor(System.String)">
            <summary>
            Constructs a PopUpMessage with text message.
            </summary>
            <param name="message">Text message to an user.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this PopUpMessage.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to PopUpMessage.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetText">
            <summary>
            Getting the current text of the PopUpMessage.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize PopUpMessage by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize PopUpMessage by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a PopUpMessage.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a PopUpMessage in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a PopUpMessage in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a PopUpMessage in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a PopUpMessage in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.InitElements">
            <summary>
            Initializing indicator and text in the PopUpMessage. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.Show(SpaceVIL.CoreWindow)">
            <summary>
            Shows PopUpMessage and attaches it to the specified window 
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            </summary>
            <param name="handler">Window for attaching PopUpMessage.</param>
        </member>
        <member name="M:SpaceVIL.PopUpMessage.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the PopUpMessage.
            <para/> Inner styles: "closebutton".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.Primitive">
            <summary>
            The Primitive is an abstract extension of BaseItem for primitive non-interactive items.
            <para/> Examples of subclasses: SpaceVIL.Ellipse, SpaceVIL.Rectangle, SpaceVIL.Triangle and etc.
            </summary>
        </member>
        <member name="M:SpaceVIL.Primitive.#ctor">
            <summary>
            Default constructor of Primitive class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceVIL.Primitive.#ctor(System.String)">
            <summary>
            Constructs a Primitive with the specified name.
            </summary>
            <param name="name"> Item name of Primitive. </param>
        </member>
        <member name="M:SpaceVIL.Primitive.SetPosition(System.Int32,System.Int32)">
            <summary>
            Setting item position.
            </summary>
            <param name="x"> X position of the left-top corner. </param>
            <param name="y"> Y position of the left-top corner. </param>
        </member>
        <member name="M:SpaceVIL.Primitive.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style that describes the appearance of an item.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Primitive.GetCoreStyle">
            <summary>
            Getting the core (only appearance properties without inner styles) style of an item.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="T:SpaceVIL.ProgressBar">
            <summary>
            LoadingScreen is designed to show progress 
            the execution of any long time task.
            <para/> Contains image and text.
            <para/> Supports all events except drag and drop.
            <para/> By default ProgressBar cannot get focus.
            </summary>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetValueVisible(System.Boolean)">
            <summary>
            Setting the text that represents the progress of the unfinished task, 
            visible or invisible.
            </summary>
            <param name="value">True: if text should be visible. 
            False: if text should be invisible.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.IsValueVisible">
            <summary>
            Returns True if text that represents the progress of 
            the unfinished task is visible, otherwise returns False.
            </summary>
            <returns>True: if text is visible. 
            False: if text is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.#ctor">
            <summary>
            Default ProgressBar constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.ProgressBar.InitElements">
            <summary>
            Initializing all elements in the ProgressBar. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetMaxValue(System.Int32)">
            <summary>
            Setting the maximum progress value of the unfinished task limit. 
            Progress value cannot be greater than this limit.
            </summary>
            <param name="value">Maximum progress value of the unfinished task limit.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetMaxValue">
            <summary>
            Getting the current maximum progress value of the unfinished task limit.
            </summary>
            <returns>Maximum progress value of the unfinished task limit.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetMinValue(System.Int32)">
            <summary>
            Setting the minimum progress value of the unfinished task limit. 
            Progress value cannot be less than this limit.
            </summary>
            <param name="value">Minimum progress value of the unfinished task limit.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetMinValue">
            <summary>
            Getting the current minimum sprogress value of the unfinished task limit.
            </summary>
            <returns>Minimum progress value of the unfinished task limit.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetCurrentValue(System.Int32)">
            <summary>
            Setting the current progress value of the unfinished task. 
            If the value is greater/less than the maximum/minimum 
            progress value, then the progress value becomes equal 
            to the maximum/minimum value.
            </summary>
            <param name="value">Progress value of of the unfinished task.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetCurrentValue">
            <summary>
            Getting the progress value of the unfinished task.
            </summary>
            <returns>Progress value of the unfinished task.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this ProgressBar.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to ProgressBar.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize ProgressBar by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize ProgressBar by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a ProgressBar.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ProgressBar in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a ProgressBar in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ProgressBar in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a ProgressBar in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.ProgressBar.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item into the container (this).
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of a shape.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.ProgressBar.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the ContextMenu.
            <para/> Inner styles: "progressbar".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.Prototype">
            <summary>
            The Prototype is an abstract implementation of IBaseItem for complex interactive items.
            <para/> Contains all the necessary methods for rendering objects and interacting with them.
            <para/> Examples of subclasses: SpaceVIL.ButtonCore, SpaceVIL.TextEdit, SpaceVIL.ListBox and etc.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.#ctor">
            <summary>
            Default constructor of Prototype class.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventResize">
            <summary>
            Event that is invoked when an item is resizing.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventDestroy">
            <summary>
            Event that is invoked when an item is destroyed (removed).
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseHover">
            <summary>
            Event that is invoked when mouse cursor enters inside an item area.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseLeave">
            <summary>
            Event that is invoked when mouse cursor leaves inside an item area.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseClick">
            <summary>
            Event that is invoked when mouse click (release) on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseDoubleClick">
            <summary>
            Event that is invoked when mouse double click on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMousePress">
            <summary>
            Event that is invoked when mouse press on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseDrag">
            <summary>
            Event that is invoked when mouse drag on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseMove">
            <summary>
            Event that is invoked when mouse move on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventMouseDrop">
            <summary>
            Event that is invoked when mouse drop on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventScrollUp">
            <summary>
            Event that is invoked when mouse wheel scrolls up on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventScrollDown">
            <summary>
            Event that is invoked when mouse wheel scrolls down on an item.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventKeyPress">
            <summary>
            Event that is invoked when key of keyboard is pressed.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventKeyRelease">
            <summary>
            Event that is invoked when key of keyboard is released.
            </summary>
        </member>
        <member name="F:SpaceVIL.Prototype.EventTextInput">
            <summary>
            Event that is invoked when typing text on the keyboard.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.Release">
            <summary>
            Method to describe disposing item's resources if the item was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.SetHandler(SpaceVIL.CoreWindow)">
            <summary>
            Setting the window to which the item will belong.
            </summary>
            <param name="handler">Window as SpaceVIL.CoreWindow.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetHandler">
            <summary>
            Getting the window to which the item belongs.
            </summary>
            <returns>Window as SpaceVIL.CoreWindow.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.GetToolTip">
            <summary>
            Getting tooltip text of the item.
            <para/> Tooltip is hint about an item that appears 
            when you hold the mouse cursor over an item long enough.
            </summary>
            <returns>Tooltip text.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetToolTip(System.String)">
            <summary>
            Setting tooltip text of the item.
            <para/> Tooltip is hint about an item that appears 
            when you hold the mouse cursor over an item long enough.
            </summary>
            <param name="text">Tooltip text.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetParent">
            <summary>
            Getting the parent of the item.
            </summary>
            <returns>Parent as SpaceVIL.Prototype 
            (Prototype is container and can contains children).</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetParent(SpaceVIL.Prototype)">
            <summary>
            Setting the parent of the item.
            </summary>
            <param name="parent">Parent as SpaceVIL.Prototype 
            (Prototype is container and can contains children).</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetSpacing">
            <summary>
            Getting indents between children of a container type item.
            </summary>
            <returns>Indents between children as SpaceVIL.Decorations.Spacing.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetSpacing(SpaceVIL.Decorations.Spacing)">
            <summary>
            Setting indents between children of a container type item.
            </summary>
            <param name="spacing">Spacing as SpaceVIL.Decorations.Spacing.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetSpacing(System.Int32,System.Int32)">
            <summary>
            Setting indents between children of a container type item.
            </summary>
            <param name="horizontal">Horizontal indent. Default: 0.</param>
            <param name="vertical">Vertical indent. Default: 0.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetPadding">
            <summary>
            Getting indents of an item for offset its children.
            </summary>
            <returns>Padding indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetPadding(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents of an item to offset its children.
            </summary>
            <param name="padding">Padding indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents of an item to offset its children.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMargin">
            <summary>
            Getting the indents of an item to offset itself relative to its container.
            </summary>
            <returns>Margin as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting the indents of an item to offset itself relative to its container.
            </summary>
            <param name="margin">Margin as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the indents of an item to offset itself relative to its container.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorder(SpaceVIL.Decorations.Border)">
            <summary>
            Setting border of an item's shape. Border consist of corner radiuses, thickness and color.
            </summary>
            <param name="border">Border as SpaceVIL.Decorations.Border.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorderFill(System.Drawing.Color)">
            <summary>
            Setting the border color of an item's shape.
            </summary>
            <param name="fill">Border color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetBorderFill">
            <summary>
            Getting the border color oa an item's shape.
            </summary>
            <returns>Border color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorderFill(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the border color of an item's shape in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorderFill(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting the border color of an item's shape in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorderRadius(SpaceVIL.Decorations.CornerRadius)">
            <summary>
            Setting radius of the border's corners.
            </summary>
            <param name="radius">Radiuses of the border's corners as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorderRadius(System.Int32)">
            <summary>
            Setting border radius with the same values for each corner of the rectangle object.
            </summary>
            <param name="radius">Radius of the border's corners.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetBorderRadius">
            <summary>
            Getting border radiuses.
            </summary>
            <returns>Border radiuses as SpaceVIL.Decorations.CornerRadius.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBorderThickness(System.Int32)">
            <summary>
            Setting border thickness of an item's shape.
            </summary>
            <param name="thickness">Border thickness.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetBorderThickness">
            <summary>
            Getting border thickness of an item's shape.
            </summary>
            <returns>Border thickness.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.InitElements">
            <summary>
            Initializing children and their attributes.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.GetTriangles">
            <summary>
            Getting triangles of item's shape.
            </summary>
            <returns>Points list of the shape as List of float[2] array (2D).</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetTriangles(System.Collections.Generic.List{System.Single[]})">
            <summary>
            Setting triangles as item's shape.
            </summary>
            <param name="triangles">Points list of the shape as List of float[2] array (2D).</param>
        </member>
        <member name="M:SpaceVIL.Prototype.MakeShape">
            <summary>
            Making default item's shape. Use in conjunction with 
            GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBackground(System.Drawing.Color)">
            <summary>
            Setting background color of an item's shape.
            </summary>
            <param name="color">Background color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBackground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item's shape in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBackground(System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetBackground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetBackground">
            <summary>
            Getting background color of an item.
            </summary>
            <returns>Background color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetItemName(System.String)">
            <summary>
            Setting the name of the item.
            </summary>
            <param name="name">Item name as System.String.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetItemName">
            <summary>
            Getting the name of the item.
            </summary>
            <returns>Item name as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMinWidth(System.Int32)">
            <summary>
            Setting the minimum width limit. Actual width cannot be less than this limit.
            </summary>
            <param name="width"> Minimum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMinWidth">
            <summary>
            Getting the minimum width limit.
            </summary>
            <returns> Minimum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetWidth">
            <summary>
            Getting item width.
            </summary>
            <returns> Width of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMaxWidth(System.Int32)">
            <summary>
            Setting the maximum width limit. Actual width cannot be greater than this limit.
            </summary>
            <param name="width"> Maximum width limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMaxWidth">
            <summary>
            Getting the maximum width limit.
            </summary>
            <returns> Maximum width limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMinHeight(System.Int32)">
            <summary>
            Setting the minimum height limit. Actual height cannot be less than this limit.
            </summary>
            <param name="height"> Minimum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMinHeight">
            <summary>
            Getting the minimum height limit.
            </summary>
            <returns> Minimum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetHeight">
            <summary>
            Getting item height.
            </summary>
            <returns> Height of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMaxHeight(System.Int32)">
            <summary>
            Setting the maximum height limit. Actual height cannot be greater than this limit.
            </summary>
            <param name="height"> Maximum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMaxHeight">
            <summary>
            Getting the maximum height limit.
            </summary>
            <returns> Maximum height limit of the item. </returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting item size (width and height).
            </summary>
            <param name="width"> Width of the item. </param>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetSize">
            <summary>
            Getting current item size.
            </summary>
            <returns>Item size as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMinSize(System.Int32,System.Int32)">
            <summary>
            Setting minimum item size limit (width and height limits).
            </summary>
            <param name="width"> Minimum width limit of the item. </param>
            <param name="height"> Minimum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMinSize">
            <summary>
            Getting current item minimum size limit.
            </summary>
            <returns>Minimum item size limit as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMaxSize(System.Int32,System.Int32)">
            <summary>
            Setting maximum item size limit (width and height limits).
            </summary>
            <param name="width"> Maximum width limit of the item. </param>
            <param name="height"> Maximum height limit of the item. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetMaxSize">
            <summary>
            Getting current item maximum size limit.
            </summary>
            <returns>Minimum item size limit as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting an alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting an alignment of an item's shape relative to its container. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetAlignment">
            <summary>
            Getting an alignment of an item's shape relative to its container. 
            </summary>
            <returns>Alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetSizePolicy(SpaceVIL.Core.SizePolicy,SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting the size policy of an item's shape. 
            Can be Fixed (shape not changes its size) or Expand (shape is stretched to all available space).
            </summary>
            <param name="width">Width policy of an item's shape.</param>
            <param name="height">Height policy of an item's shape.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetWidthPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting width policy of an item's shape. Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <param name="policy">Width policy as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetWidthPolicy">
            <summary>
            Getting width policy of an item's shape.Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <returns>Width policy as SpaceVIL.Core.SizePolicy.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetHeightPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting height policy of an item's shape. Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <param name="policy">Height policy as SpaceVIL.Core.SizePolicy.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetHeightPolicy">
            <summary>
            Getting height policy of an item's shape.Can be Fixed (shape not changes its size) 
            or Expand (shape is stretched to all available space).
            </summary>
            <returns>Height policy as SpaceVIL.Core.SizePolicy.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetPosition(System.Int32,System.Int32)">
            <summary>
            Setting item position.
            </summary>
            <param name="x"> X position of the left-top corner. </param>
            <param name="y"> Y position of the left-top corner. </param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of a shape.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetX">
            <summary>
            Getting X coordinate of the left-top corner of a shape.
            </summary>
            <returns>X position of the left-top corner.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of a shape.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetY">
            <summary>
            Getting Y coordinate of the left-top corner of a shape.
            </summary>
            <returns>Y position of the left-top corner.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetConfines">
            <summary>
            Setting the confines of the item relative to its parent's size and position.
            <para/> Example: items can be partially (or completely) outside the container (example: ListBox), 
            in which case the part that is outside the container should not be visible and should not interact with the user.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.SetConfines(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the confines of the item relative to specified bounds.
            <para/> Example: items can be partially (or completely) outside the container (example: ListBox), 
            in which case the part that is outside the container should not be visible and should not interact with the user.
            </summary>
            <param name="x0">Left X begin position.</param>
            <param name="x1">Right X end position.</param>
            <param name="y0">Top Y begin position.</param>
            <param name="y1">Bottom Y end position.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style that describes the appearance of an item.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetCoreStyle">
            <summary>
            Getting the core (only appearance properties without inner styles) style of an item.
            </summary>
            <returns>Style as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.AddItemState(SpaceVIL.Core.ItemStateType,SpaceVIL.Decorations.ItemState)">
            <summary>
            Adding visual state for an item. 
            <para/> Type can be Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
            <param name="type">Type as SpaceVIL.Core.ItemStateType.</param>
            <param name="state">Visual state as SpaceVIL.Decorations.ItemState.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.RemoveItemState(SpaceVIL.Core.ItemStateType)">
            <summary>
            Removing visual state of an item by type.
            <para/> Type can be Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
            <param name="type">Type as SpaceVIL.Core.ItemStateType.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.RemoveAllItemStates">
            <summary>
            Removing all item visual states.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.GetState(SpaceVIL.Core.ItemStateType)">
            <summary>
            Getting item visual state by its type.
            <para/> Type can be Base, Hovered, Pressed, Toggled, Focused, Disabled.
            </summary>
            <param name="type">Type as SpaceVIL.Core.ItemStateType.</param>
            <returns>Item visual state as SpaceVIL.Decorations.ItemState.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.UpdateState">
            <summary>
            Updating Prototype's state according to its ItemStateType.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Inserting item to the container (this). 
            If the count of container elements is less than the index, 
            then the element is added to the end of the list.
            </summary>
            <param name="item">Child as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.AddItems(SpaceVIL.Core.IBaseItem[])">
            <summary>
            Adding sequence of items into the container (this).
            </summary>
            <param name="items">Sequence of items.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item into the container (this).
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.Update(SpaceVIL.Core.GeometryEventType,System.Int32)">
            <summary>
            Updating an item size or/and position.
            </summary>
            <param name="type">Type of event as SpaceVIL.Core.GeometryEventType.</param>
            <param name="value">Value of a property that was changed.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsDrawable">
            <summary>
            Getting the drawable (visibility) status of an item. This property used in 
            conjunction with the IsVisible() property.
            <para/> Explanation: an item can be visible and invisible, in some cases 
            the item can be located outside the container (example: SpaceVIL.ListBox), 
            and it must be invisible so as not to waste CPU / GPU resources, but in some 
            cases you must control the visibility of elements that are inside container 
            and should be invisible (example: SpaceVIL.TreeView).
            </summary>
            <returns>True: if item is drawable (visible). 
            False: if item is not drawable (invisible).</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetDrawable(System.Boolean)">
            <summary>
            Setting the drawable (visibility) status of an item. This property used in 
            conjunction with the IsVisible() property.
            <para/> Explanation: an item can be visible and invisible, in some cases 
            the item can be located outside the container (example: SpaceVIL.ListBox), 
            and it must be invisible so as not to waste CPU / GPU resources, but in some 
            cases you must control the visibility of elements that are inside container 
            and should be invisible (example: SpaceVIL.TreeView).
            </summary>
            <param name="value">True: if item should be drawable (visible). 
            False: if item should not be drawable (invisible).</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsVisible">
            <summary>
            Getting the visibility status of an item. This property may used in 
            conjunction with the IsDrawable() property.
            </summary>
            <returns>True: if item is visible. False: if item is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetVisible(System.Boolean)">
            <summary>
            Setting the visibility status of an item. This property may used in 
            conjunction with the IsDrawable() property.
            </summary>
            <param name="value">True: if item should be visible. 
            False: if item should be invisible.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsPassEvents">
            <summary>
            Getting boolean value to know if this item can pass further 
            any input events (mouse, keyboard and etc.).
            <para/> Tip: Need for filtering input events.
            </summary>
            <returns>True: if this item pass on any input events.
            False: If this item do not pass any input events.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.IsPassEvents(SpaceVIL.Core.InputEventType)">
            <summary>
            Getting boolean value to know if this item can pass further 
            the specified type of input events (mouse, keyboard and etc.).
            </summary>
            <param name="e">Type of input events as SpaceVIL.Core.InputEventType.</param>
            <returns>True: if this item pass on the specified type of input events.
            False: If this item do not pass the specified type of input events.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.GetPassEvents">
            <summary>
            Getting all allowed input events.
            </summary>
            <returns>Allowed input events as List&lt;SpaceVIL.Core.InputEventType&gt;</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.GetBlockedEvents">
            <summary>
            Getting all blocked input events.
            </summary>
            <returns>Blocked input events as List&lt;SpaceVIL.Core.InputEventType&gt;</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetPassEvents(System.Boolean)">
            <summary>
            Setting on or off so that this item can pass further 
            any input events (mouse, keyboard and etc.).
            </summary>
            <param name="value">True: if you want that this item may to pass on any input events.
            False: if you want that this item cannot to pass on any input events.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetPassEvents(System.Boolean,SpaceVIL.Core.InputEventType)">
            <summary>
            Setting on or off so that this item can pass further 
            the specified type of input events (mouse, keyboard and etc.).
            </summary>
            <param name="value">True: if you want this item can pass further the specified type of input events.
            False: if you want this item connot pass further the specified type of input events.</param>
            <param name="e">Type of input events as SpaceVIL.Core.InputEventType.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetPassEvents(System.Boolean,SpaceVIL.Core.InputEventType[])">
            <summary>
            Setting on or off so that this item can pass further 
            the specified types of input events (mouse, keyboard and etc.).
            </summary>
            <param name="value">True: if you want this item can pass further the specified types of input events.
            False: if you want this item connot pass further the specified types of input events.</param>
            <param name="events">Sequence of input event types as SpaceVIL.Core.InputEventType.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsDisabled">
            <summary>
            Returns True if this item is disabled (non-interactive) otherwise returns False.
            </summary>
            <returns>True: this item is disabled. False: this item is enabled.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetDisabled(System.Boolean)">
            <summary>
            Setting this item disabled (become non-interactive) or enabled.
            </summary>
            <param name="value">True: if you want to disable this item. 
            False: if you want to enable this item.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsMouseHover">
            <summary>
            Returns True if this item is hovered otherwise returns False.
            </summary>
            <returns>True: this item is hovered. 
            False: this item is not hovered.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMouseHover(System.Boolean)">
            <summary>
            Setting this item hovered (mouse cursor located within item's shape).
            </summary>
            <param name="value">True: if you want this item be hovered. 
            False: if you want this item be not hovered.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsMousePressed">
            <summary>
            Returns True if mouse is pressed on this item (mouse cursor located within 
            item's shape and any of the mouse button is pressed) otherwise False.
            </summary>
            <returns>True: if mouse is pressed on this item. 
            False: if mouse is not pressed on this item.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetMousePressed(System.Boolean)">
            <summary>
            Setting True if you want that mouse is pressed on this item (mouse cursor located 
            within item's shape and any of the mouse button is pressed) otherwise False.
            </summary>
            <param name="value">True: if you want this item be mouse pressed. 
            False: if you want this item be not mouse pressed.</param>
        </member>
        <member name="F:SpaceVIL.Prototype.IsFocusable">
            <summary>
            Item's focusable property.
            <para/> True: this item can get focus. False: this item cannot get focus.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.IsFocused">
            <summary>
            Returns True if this item gets focus otherwise False.
            </summary>
            <returns>True: if this item is focused. False: if this item is not focused.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetFocus">
            <summary>
            Setting focus on this item if it is focusable.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.GetItems">
            <summary>
            Getting list of the Prototype's inner items (children).
            </summary>
            <returns>List of children as List&lt;SpaceVIL.Core.IBaseItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from container (this).
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.Clear">
            <summary>
            Removing all children.
            </summary>
        </member>
        <member name="M:SpaceVIL.Prototype.SetContent(System.Collections.Generic.List{SpaceVIL.Core.IBaseItem})">
            <summary>
            Setting content for this item.
            <para/> Note: this method is only for sorting children 
            i.e. Prototype.GetItems() contains equal set of children 
            as input argument: List&lt;SpaceVIL.Core.IBaseItem&gt; content.
            If content is different this method do nothing.
            </summary>
            <param name="content">Sorted (in any way) content of this item.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.IsCustomFigure">
            <summary>
            Getting the custom shape if it is set. 
            You can set any shape using Prototype.SetCustomFigure(Figure) 
            and it will replace the default rectangle shape.
            </summary>
            <returns>Custom shape as SpaceVIL.Decorations.Figure.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetCustomFigure(SpaceVIL.Decorations.Figure)">
            <summary>
            Setting the custom shape to replace the default rectangle shape.
            </summary>
            <param name="figure">Custom shape as SpaceVIL.Decorations.Figure.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetHoverRule">
            <summary>
            Getting the hovering rule of this item.
            <para/> Can be ItemHoverRule.Lazy or ItemHoverRule.Strict (see SpaceVIL.Core.ItemHoverRule).
            </summary>
            <returns>Hovering rule as SpaceVIL.Core.ItemHoverRule.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetHoverRule(SpaceVIL.Core.ItemHoverRule)">
            <summary>
            Setting the hovering rule for this item.
            </summary>
            <param name="rule">Hovering rule as SpaceVIL.Core.ItemHoverRule.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.GetCursor">
            <summary>
            Getting the mouse cursor image of this item.
            </summary>
            <returns>Mouse cursor image as SpaceVIL.Decorations.CursorImage.</returns>
        </member>
        <member name="M:SpaceVIL.Prototype.SetCursor(SpaceVIL.Core.EmbeddedCursor)">
            <summary>
            Setting mouse cursor image for this item from embedded cursors.
            </summary>
            <param name="type">Mouse cursor type as SpaceVIL.Core.EmbeddedCursor.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetCursor(SpaceVIL.Decorations.CursorImage)">
            <summary>
            Setting mouse cursor image for this item.
            </summary>
            <param name="cursor">Mouse cursor image as SpaceVIL.Decorations.CursorImage.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetCursor(System.Drawing.Bitmap)">
            <summary>
            Creating and setting mouse cursor image for this item from specified bitmap image.
            </summary>
            <param name="bitmap">Bitmap for mouse cursor image as System.Drawing.Bitmap.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.SetCursor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Creating and setting mouse cursor image for this item from specified scaled bitmap image.
            </summary>
            <param name="bitmap">Bitmap for mouse cursor image as System.Drawing.Bitmap.</param>
            <param name="width">New width of mouse cursor image.</param>
            <param name="height">New height of mouse cursor image.</param>
        </member>
        <member name="M:SpaceVIL.Prototype.Effects">
            <summary>
            Gettting access to manage visual effects of the item.
            </summary>
            <returns>Implementation of an SpaceVIL.Core.IAppearanceExtension interface.</returns>
        </member>
        <member name="T:SpaceVIL.RadioButton">
            <summary>
            RadioButton is the basic implementation of a user interface radio button with 
            the ability to be checked (others radio button becomes unchecked) 
            or be unchecked. Contains text and indicator. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetIndicator">
            <summary>
            Getting indicator item of the RadioButton.
            </summary>
            <returns>Indicator as SpaceVIL.Indicator.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.#ctor">
            <summary>
            Default RadioButton constructor. Text is empty.
            </summary>
        </member>
        <member name="M:SpaceVIL.RadioButton.#ctor(System.String)">
            <summary>
            Constructs a RadioButton with the specified text.
            </summary>
            <param name="text">RadioButton text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetMouseHover(System.Boolean)">
            <summary>
            Overrided Prototype.SetMouseHover(bool) method.
            <para/> Setting this item hovered (mouse cursor located within item's shape).
            </summary>
            <param name="value">True: if you want this item be hovered. 
            False: if you want this item be not hovered.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.InitElements">
            <summary>
            Initializing indicator and text in the RadioButton. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.RadioButton.IsChecked">
            <summary>
            Returns True if RadioButton is checked otherwise returns False.
            </summary>
            <returns>True: RadioButton is checked. False: RadioButton is unchecked.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetChecked">
            <summary>
            Setting RadioButton checked or unchecked.
            </summary>
            <param name="value">True: if you want RadioButton to be checked. 
            False: if you want RadioButton to be unchecked.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this RadioButton.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to RadioButton.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetText">
            <summary>
            Getting the current text of the RadioButton.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize RadioButton by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize RadioButton by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a RadioButton.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a RadioButton in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a RadioButton in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a RadioButton in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a RadioButton in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.RadioButton.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.RadioButton.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the RadioButton.
            <para/> Inner styles: "indicator", "text".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.Rectangle">
            <summary>
            Rectangle is a subclass that extends from SpaceVIL.Primitive 
            for rendering a rectangle shape.
            </summary>
        </member>
        <member name="M:SpaceVIL.Rectangle.SetBorderRadius(System.Int32)">
            <summary>
            Setting the same radius values for each corner of the rectangle object.
            </summary>
            <param name="radius">Radii of the corners as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Rectangle.SetBorderRadius(SpaceVIL.Decorations.CornerRadius)">
            <summary>
             Setting the radii of corners.
            </summary>
            <param name="radius">Radii of the corners as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Rectangle.#ctor">
            <summary>
            Default Rectangle constructor. Radii of the corners are 0.
            </summary>
        </member>
        <member name="M:SpaceVIL.Rectangle.#ctor(SpaceVIL.Decorations.CornerRadius)">
            <summary>
            Constructs an Rectangle with specified corner radii.
            </summary>
            <param name="radius">Radii of the corners as SpaceVIL.Decorations.CornerRadius.</param>
        </member>
        <member name="M:SpaceVIL.Rectangle.MakeShape">
            <summary>
            Overridden method for stretching the rectangle shape relative to the current size. 
            Use in conjunction with GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="T:SpaceVIL.ResizableItem">
            <summary>
            ResisableItem is a special container that can move and resize 
            by mouse input events while inside another container. 
            <para/> Te get full functionality try to use ResizableItem with 
            SpaceVIL.FreeArea container.
            <para/> Supports all events including drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.ResizableItem.ExcludeSides(SpaceVIL.Core.Side[])">
            <summary>
            Specify which sides will be excluded, and these sides 
            can no longer be dragged to resize the ResizableItem.
            </summary>
            <param name="sides">Sides for exclusion as sequence of SpaceVIL.Core.Side.</param>
        </member>
        <member name="M:SpaceVIL.ResizableItem.GetExcludedSides">
            <summary>
            Getting exclused sides. These sides cannot be dragged 
            to resize the ResizableItem.
            </summary>
            <returns>Sides for exclusion as list of SpaceVIL.Core.Side.</returns>
        </member>
        <member name="M:SpaceVIL.ResizableItem.ClearExcludedSides">
            <summary>
            Removing all exclused sides. After that all sides 
            can be dragged to resize the ResizableItem.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.PositionChanged">
            <summary>
            Event that is invoked when ResizableItem moves.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.SizeChanged">
            <summary>
            Event that is invoked when ResizableItem resizes.
            </summary>
        </member>
        <member name="M:SpaceVIL.ResizableItem.Release">
            <summary>
             Disposing all resources if the item was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.IsLocked">
            <summary>
            Property to lock ResizableItem movement and resizing.
            <para/> True: to lock. False: to unlock.
            <para/> Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.IsXResizable">
            <summary>
            Property to lock ResizableItem resizing by X axis.
            <para/> True: to unlock. False: to lock.
            <para/> Default: True.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.IsYResizable">
            <summary>
            Property to lock ResizableItem resizing by Y axis.
            <para/> True: to unlock. False: to lock.
            <para/> Default: True.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.IsXFloating">
            <summary>
            Property to lock ResizableItem movement by X axis.
            <para/> True: to unlock. False: to lock.
            <para/> Default: True.
            </summary>
        </member>
        <member name="F:SpaceVIL.ResizableItem.IsYFloating">
            <summary>
            Property to lock ResizableItem movement by Y axis.
            <para/> True: to unlock. False: to lock.
            <para/> Default: True.
            </summary>
        </member>
        <member name="M:SpaceVIL.ResizableItem.#ctor">
            <summary>
            Default ResizableItem constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.ResizableItem.SetWidth(System.Int32)">
            <summary>
            Setting ResizableItem width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width">Width of the ResizableItem.</param>
        </member>
        <member name="M:SpaceVIL.ResizableItem.SetHeight(System.Int32)">
            <summary>
            Setting ResizableItem height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height">Height of the ResizableItem.</param>
        </member>
        <member name="T:SpaceVIL.ScrollHandler">
            <summary>
            ScrollHandler is part of SpaceVIL.HorizontalSlider and
            SpaceVIL.VerticalSlider. ScrollHandler is responsible for 
            handler dragging.
            <para/> Supports all events including drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.ScrollHandler.Orientation">
            <summary>
            Specify orientation of ScrollHandler.
            <para/> Can be SpaceVIL.Core.Orientation.Vertical or
            SpaceVIL.Core.Orientation.Horizontal.
            </summary>
        </member>
        <member name="M:SpaceVIL.ScrollHandler.#ctor">
            <summary>
            Default ScrollHandler constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.ScrollHandler.SetOffset(System.Int32)">
            <summary>
            Setting offset of the ScrollHandler by X axis or Y axis 
            depending on Orientation property.
            </summary>
            <param name="offset">Offset of the ScrollHandler.</param>
        </member>
        <member name="T:SpaceVIL.SelectionItem">
            <summary>
            SelectionItem is designed to be a wrapper (selection showing) of items in 
            special containers that supports item selection such as 
            SpaceVIL.ListBox, SpaceVIL.TreeView, SpaceVIL.WrapGrid.
            <para/> Can resize by size of wrapped item.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.SelectionItem.#ctor(SpaceVIL.Core.IBaseItem)">
            <summary>
            Constructs SelectionItem with given item for wrapping.
            </summary>
            <param name="content">Item for wrapping as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.SelectionItem.GetContent">
            <summary>
            Getting wrapped item of SelectionItem.
            </summary>
            <returns>Wrapped item as SpaceVIL.Core.IBaseItem.</returns>
        </member>
        <member name="M:SpaceVIL.SelectionItem.InitElements">
            <summary>
            Initializing all elements in the SelectionItem.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.SelectionItem.UpdateSize">
            <summary>
            Updating size of SelectionItem according to wrapped item size.
            </summary>
        </member>
        <member name="M:SpaceVIL.SelectionItem.UpdateWidth">
            <summary>
            Updating width of SelectionItem according to wrapped item width.
            </summary>
        </member>
        <member name="M:SpaceVIL.SelectionItem.UpdateHeight">
            <summary>
            Updating height of SelectionItem according to wrapped item height.
            </summary>
        </member>
        <member name="M:SpaceVIL.SelectionItem.IsSelected">
            <summary>
            Returns True if SelectionItem is selected otherwise returns False.
            </summary>
            <returns>True: SelectionItem is selected. 
            False: SelectionItem is unselected.</returns>
        </member>
        <member name="M:SpaceVIL.SelectionItem.SetSelected(System.Boolean)">
            <summary>
            Setting SelectionItem selected or unselected.
            </summary>
            <param name="value">True: if you want SelectionItem to be selected. 
            False: if you want SelectionItem to be unselected.</param>
        </member>
        <member name="M:SpaceVIL.SelectionItem.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from SelectionItem.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.SelectionItem.ClearContent">
            <summary>
            Remove wrapped item from SelectionItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.SelectionItem.SetMouseHover(System.Boolean)">
            <summary>
            Setting this item hovered (mouse cursor located within item's shape).
            </summary>
            <param name="value">True: if you want this item be hovered. 
            False: if you want this item be not hovered.</param>
        </member>
        <member name="T:SpaceVIL.SideArea">
            <summary>
            SideArea is a container designed to show when it is needed, 
            and the rest of the time SideArea is hidden. SideArea is a floating 
            item (see SpaceVIL.Core.IFloating and  enum SpaceVIL.Core.LayoutType)
            Always attached to one of the four sides of window. 
            <para/> Contains close button and resizable area. 
            <para/> Supports all events except drag and drop.
            <para/> Notice: All floating items render above all others items.
            <para/> SideArea does not pass any input events and invisible by default.
            </summary>
        </member>
        <member name="F:SpaceVIL.SideArea.Window">
            <summary>
            Resizable container area of SideArea.
            </summary>
        </member>
        <member name="M:SpaceVIL.SideArea.GetAttachSide">
            <summary>
            Getting the side of the window which SideArea is attached. 
            <para/> Default: Side.Left.
            </summary>
            <returns>Side of the window as SpaceVIL.Core.Side.</returns>
        </member>
        <member name="M:SpaceVIL.SideArea.SetAttachSide(SpaceVIL.Core.Side)">
            <summary>
            Setting the side of the window which SideArea will be attached.
            <para/> Default: Side.Left.
            </summary>
            <param name="side">Side of the window as SpaceVIL.Core.Side.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.GetAreaSize">
            <summary>
            Getting actual size of SideArea.
            <para/> If SideArea is attached to Side.Left or Side.Right, 
            then this value is the width of the area, otherwise, the height.
            <para/> Default: 300.
            </summary>
            <returns>Actual size of SideArea.</returns>
        </member>
        <member name="M:SpaceVIL.SideArea.SetAreaSize(System.Int32)">
            <summary>
            Setting actual size of SideArea.
            <para/> If SideArea is attached to Side.Left or Side.Right, 
            then this value is the width of the area, otherwise, the height.
            <para/> Default: 300.
            </summary>
            <param name="size">Actual size of SideArea.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.#ctor(SpaceVIL.CoreWindow,SpaceVIL.Core.Side)">
            <summary>
            Constructs SideArea with the specified side and the specified window 
            for attachment.
            (see SpaceVIL.CoreWindow, SpaceVIL.ActiveWindow, SpaceVIL.DialogWindow).
            <para/> SideArea does not pass any input events and invisible by default.
            </summary>
            <param name="handler">Window for attaching SideArea.</param>
            <param name="attachSide">Side of the window as SpaceVIL.Core.Side.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.InitElements">
            <summary>
            Initializing all elements in the SideArea.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.SideArea.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item into the SideArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Inserting item to the SideArea. 
            If the count of container elements is less than the index, then the element is added to the end of the list.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from SideArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.SideArea.SetWidth(System.Int32)">
            <summary>
            Setting SideArea width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the SideArea. </param>
        </member>
        <member name="M:SpaceVIL.SideArea.SetHeight(System.Int32)">
            <summary>
            Setting SideArea height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the SideArea. </param>
        </member>
        <member name="M:SpaceVIL.SideArea.Show">
            <summary>
            Shows the SideArea at the proper position.
            </summary>
        </member>
        <member name="M:SpaceVIL.SideArea.Show(SpaceVIL.Core.IItem,SpaceVIL.Core.MouseArgs)">
            <summary>
            Shows the SideArea at the proper position. This method do exactly 
            as Show() method without arguments.
            </summary>
            <param name="sender"> The item from which the show request is sent. </param>
            <param name="args"> Mouse click arguments (cursor position, mouse button,
            mouse button press/release, etc.). </param>
        </member>
        <member name="M:SpaceVIL.SideArea.Hide">
            <summary>
            Hide the SideArea without destroying.
            </summary>
        </member>
        <member name="M:SpaceVIL.SideArea.Hide(SpaceVIL.Core.MouseArgs)">
            <summary>
            Hide the SideArea without destroying with using specified mouse arguments.
            This method do exactly as Hide() method without arguments.
            </summary>
            <param name="args">Arguments as SpaceVIL.Core.MouseArgs.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the SideArea.
            <para/> Inner styles: "window", "closebutton".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.SideArea.IsOutsideClickClosable">
            <summary>
            Returns True if SideArea (see SpaceVIL.Core.IFloating)
            should closes when mouse click outside the area of SideArea otherwise returns False.
            </summary>
            <returns>True: if SideArea closes when mouse click outside the area.
            False: if SideArea stays opened when mouse click outside the area.</returns>
        </member>
        <member name="M:SpaceVIL.SideArea.SetOutsideClickClosable(System.Boolean)">
            <summary>
            Setting boolean value of item's behavior when mouse click occurs outside the SideArea.
            </summary>
            <param name="value">True: SideArea should become invisible if mouse click occurs outside the item.
            False: an item should stay visible if mouse click occurs outside the item.</param>
        </member>
        <member name="T:SpaceVIL.SpinItem">
            <summary>
            SpinItem is designed as a user interface element that 
            can increase and decrease the value by a specific step.
            <para/> Contains increment value button, decrement value button, text field.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.SpinItem.UpButton">
            <summary>
            Increment value button.
            </summary>
        </member>
        <member name="F:SpaceVIL.SpinItem.DownButton">
            <summary>
            Decrement value button.
            </summary>
        </member>
        <member name="M:SpaceVIL.SpinItem.#ctor">
            <summary>
            Default SpinItem constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetFocus">
            <summary>
            Setting focus on this item if it is focusable.
            </summary>
        </member>
        <member name="M:SpaceVIL.SpinItem.GetValue">
            <summary>
            Getting current value of SpinItem.
            </summary>
            <returns>Current value of SpinItem.</returns>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetValue(System.Int32)">
            <summary>
            Setting integer value of SpinItem.
            </summary>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetValue(System.Double)">
            <summary>
            Setting double floating piont value of SpinItem.
            </summary>
            <param name="value">Double floating point value.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetParameters(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting integer parameters of SpinItem.
            </summary>
            <param name="currentValue"> SpinItem current value. </param>
            <param name="minValue"> Minimum value limit. </param>
            <param name="maxValue"> Maximum value limit</param>
            <param name="step"> Step of increment and decrement. </param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Setting double floating piont parameters of SpinItem.
            </summary>
            <param name="currentValue"> SpinItem current value. </param>
            <param name="minValue"> Minimum value limit. </param>
            <param name="maxValue"> Maximum value limit</param>
            <param name="step"> Step of increment and decrement. </param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetAccuracy(System.Int32)">
            <summary>
            Setting accuracy (decimal places) of SpinItem.
            </summary>
            <param name="accuracy">Accuracy value.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.InitElements">
            <summary>
            Initializing all elements in the SpinItem.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the SpinItem.
            <para/> Inner styles: "buttonsarea", "uparrow", "downarrow", "textedit".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of a the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.GetTextAlignment">
            <summary>
            Getting alignment of a SpinItem text. 
            </summary>
            <returns>Text alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this SpinItem.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to SpinItem.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetBackground(System.Drawing.Color)">
            <summary>
            Setting background color of an item's shape.
            </summary>
            <param name="color">Background color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetBackground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item's shape in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting background color of an item in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetBackground(System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetBackground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting background color of an item in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.GetBackground">
            <summary>
            Getting background color of an item.
            </summary>
            <returns>Background color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a SpinItem.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a SpinItem in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a SpinItem in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a SpinItem in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a SpinItem in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.SpinItem.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="T:SpaceVIL.SplitHolder">
            <summary>
            SplitHolder is part of SpaceVIL.HorizontalSplitArea and
            SpaceVIL.VerticalSplitArea. SplitHolder is responsible for 
            handler dragging.
            <para/> Supports all events including drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.SplitHolder.#ctor(SpaceVIL.Core.Orientation)">
            <summary>
            Constructs a SplitHolder with the specified orientation.
            <para/> Orientation can be Orientation.Horizontal 
            or Orientation.Vertical.
            </summary>
            <param name="orientation">Orientation of SplitHolder.</param>
        </member>
        <member name="M:SpaceVIL.SplitHolder.SetDividerSize(System.Int32)">
            <summary>
            Setting thickness of SplitHolder divider.
            </summary>
            <param name="thickness">Thickness of SplitHolder divider.</param>
        </member>
        <member name="M:SpaceVIL.SplitHolder.GetDividerSize">
            <summary>
            Getting thickness of SplitHolder divider.
            </summary>
            <returns>Thickness of SplitHolder divider.</returns>
        </member>
        <member name="M:SpaceVIL.SplitHolder.GetOrientation">
            <summary>
            Getting SplitHolder orientation.
            <para/> Orientation can be Orientation.Horizontal 
            or Orientation.Vertical.
            </summary>
            <returns>Current SplitHolder orientation.</returns>
        </member>
        <member name="M:SpaceVIL.SplitHolder.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the SplitHolder.
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.Tab">
            <summary>
            Tab is used in SpaceVIL.TabView. Represents tab of one page.
            <para/> Contains close button.
            <para/> Supports all including drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.Tab.GetCloseButton">
            <summary>
            Getting close button.
            </summary>
            <returns>Close button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.SetClosable(System.Boolean)">
            <summary>
            Setting tab to support closing or not support closing.
            </summary>
            <param name="value">True: if you want to tab support closing.
            False: if you want to tab do not support closing.</param>
        </member>
        <member name="M:SpaceVIL.Tab.IsClosable">
            <summary>
            Returns True if tab support closing otherwise returns False.
            </summary>
            <returns>True: if tab support closing.
            False: if tab do not support closing.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.#ctor(System.String)">
            <summary>
            Constructs Tab with the specified text.
            </summary>
            <param name="text">Text of Tab.</param>
        </member>
        <member name="M:SpaceVIL.Tab.#ctor(System.String,System.String)">
            <summary>
            Constructs Tab with specified text and name of the Tab.
            </summary>
            <param name="text">Text of the Tab.</param>
            <param name="name">Name of the Tab.</param>
        </member>
        <member name="M:SpaceVIL.Tab.#ctor">
            <summary>
            Default Tab constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Tab.SetDraggable(System.Boolean)">
            <summary>
            Setting tab to support drag and drop or not.
            </summary>
            <param name="value">True: if you want to tab support drag and drop.
            False: if you want to tab do not support drag and drop.</param>
        </member>
        <member name="M:SpaceVIL.Tab.IsDraggable">
            <summary>
            Returns True if tab support drag and drop otherwise returns False.
            </summary>
            <returns>True: if tab support drag and drop.
            False: if tab do not support drag and drop.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.IsSelected">
            <summary>
            Returns True if Tab is selected otherwise returns False.
            </summary>
            <returns>True: Tab is selected. 
            False: Tab is unselected.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.SetSelected(System.Boolean)">
            <summary>
            Setting Tab selected or unselected.
            </summary>
            <param name="value">True: if you want Tab to be selected. 
            False: if you want Tab to be unselected.</param>
        </member>
        <member name="F:SpaceVIL.Tab.EventOnSelect">
            <summary>
            Event that is invoked when Tab become selected.
            </summary>
        </member>
        <member name="F:SpaceVIL.Tab.EventOnClose">
            <summary>
            Event that is invoked when Tab is closed.
            </summary>
        </member>
        <member name="M:SpaceVIL.Tab.Release">
            <summary>
            Disposing Tab resources if the Tab was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Tab.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of Tab text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of Tab text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to Tab.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to Tab.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.Tab.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.Tab.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.Tab.GetText">
            <summary>
            Getting the current text of the Tab.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize Tab by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize Tab by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a Tab.
            </summary>
            <param name="color"> Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a Tab in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a Tab in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a Tab in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Tab.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a Tab in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.Tab.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.Tab.InitElements">
            <summary>
            Initializing all elements in the Tab.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.Tab.RemoveTab">
            <summary>
            Removing Tab.
            </summary>
        </member>
        <member name="M:SpaceVIL.Tab.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the Tab.
            <para/> Inner styles: "closebutton", "view", "text".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.TabBar.RemoveTabByName(System.String)">
            <summary>
            Remove tab by name
            </summary>
        </member>
        <member name="M:SpaceVIL.TabBar.RemoveTab(SpaceVIL.Tab)">
            <summary>
            Remove tab
            </summary>
        </member>
        <member name="M:SpaceVIL.TabBar.AddItemToTabByName(System.String,SpaceVIL.Core.IBaseItem)">
            <summary>
            Add IBaseItem item to the tab with name tabName
            </summary>
        </member>
        <member name="M:SpaceVIL.TabBar.AddItemToTab(SpaceVIL.Tab,SpaceVIL.Core.IBaseItem)">
            <summary>
            Add IBaseItem item to the tab by tab
            </summary>
        </member>
        <member name="T:SpaceVIL.TabView">
            <summary>
            TabView is a special container designed to group items within specific tab page.
            <para/> TabView cannot receive any events, 
            so TabView is always in the SpaceVIL.Core.ItemStateType.Base state.
            </summary>
        </member>
        <member name="M:SpaceVIL.TabView.SetTabPolicy(SpaceVIL.Core.SizePolicy)">
            <summary>
            Setting the width policy of tabs. 
            Can be Fixed (tab shape not changes its size) or 
            Expand (tab shape is stretched to all available space).
            </summary>
            <param name="policy">Width policy of tab shapes.</param>
        </member>
        <member name="M:SpaceVIL.TabView.GetTabPolicy">
            <summary>
            Getting the current width policy of tabs. 
            Can be Fixed (tab shape not changes its size) or 
            Expand (tab shape is stretched to all available space).
            </summary>
            <returns>Width policy of tab shapes.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.GetTabs">
            <summary>
            Getting all existing tabs in TabView.
            </summary>
            <returns>Tabs as List&lt;SpaceVIL.Tab&gt;.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.#ctor">
            <summary>
            Default TabView constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.TabView.InitElements">
            <summary>
            Initializing all elements in the TabView.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TabView.SelectTab(SpaceVIL.Tab)">
            <summary>
            Selecting a tab by its Tab instance.
            </summary>
            <param name="tab">Tab to select.</param>
        </member>
        <member name="M:SpaceVIL.TabView.SelectTab(System.Int32)">
            <summary>
            Selecting a tab by its index. 
            <para/> If index is out of range then this method does nothing.
            </summary>
            <param name="index">Index of a tab.</param>
        </member>
        <member name="M:SpaceVIL.TabView.SelectTabByName(System.String)">
            <summary>
            Selecting a tab by its name. 
            <para/> Tab name is ID of UI element. Tab name is uniq but tab text is not.
            <para/> Explanation: the tab text can be a web address, 
            and there can be several open tabs with the same address.
            </summary>
            <param name="tabName">Tab name.</param>
        </member>
        <member name="M:SpaceVIL.TabView.SelectTabByText(System.String)">
            <summary>
            Selecting a first-found tab by its text. 
            <para/> Tab name is ID of UI element. Tab name is uniq but tab text is not.
            <para/> Explanation: the tab text can be a web address, 
            and there can be several open tabs with the same address.
            </summary>
            <param name="tabText">Tab text.</param>
        </member>
        <member name="M:SpaceVIL.TabView.GetSelectedTabIndex">
            <summary>
            Getting the index of the current selected tab.
            </summary>
            <returns>Index of the current selected tab.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.GetSelectedTab">
            <summary>
            Getting the current selected tab.
            </summary>
            <returns>Current selected tab as SpaceVIL.Tab.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.GetTabFrame(SpaceVIL.Tab)">
            <summary>
            Getting a page of a tab. 
            </summary>
            <param name="tab">Tab as SpaceVIL.Tab.</param>
            <returns>Page of a tab as SpaceVIL.Frame.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.GetTabContent(SpaceVIL.Tab)">
            <summary>
            Getting content of a page by its tab.
            </summary>
            <param name="tab">Tab as SpaceVIL.Tab.</param>
            <returns>Page content as List&lt;SpaceVIL.IBaseItem&gt;.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.AddTab(SpaceVIL.Tab)">
            <summary>
            Adding a new tab to the TabView.
            </summary>
            <param name="tab">The new tab as SpaceVIL.Tab.</param>
        </member>
        <member name="M:SpaceVIL.TabView.AddTabs(SpaceVIL.Tab[])">
            <summary>
             Adding new tabs to the TabView.
            </summary>
            <param name="tabs">Tab sequence as SpaceVIL.Tab.</param>
        </member>
        <member name="M:SpaceVIL.TabView.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from TabView.
            </summary>
            <param name="item"></param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.RemoveTabByName(System.String)">
            <summary>
            Removing a tab by its name.
            <para/> Tab name is ID of UI element. Tab name is uniq but tab text is not.
            <para/> Explanation: the tab text can be a web address, 
            and there can be several open tabs with the same address.
            </summary>
            <param name="tabName">Tab name.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.RemoveTabByText(System.String)">
            <summary>
            Removing a first-found tab by its text.
            <para/> Tab name is ID of UI element. Tab name is uniq but tab text is not.
            <para/> Explanation: the tab text can be a web address, 
            and there can be several open tabs with the same address.
            </summary>
            <param name="tabText">Tab text.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.RemoveTab(SpaceVIL.Tab)">
            <summary>
            Removing a tab.
            </summary>
            <param name="tab">Tab as SpaceVIL.Tab.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.RemoveAllTabs">
            <summary>
            Removing all existing tabs.
            </summary>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.TabView.AddItemToTabByName(System.String,SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding an item to page by its tab name.
            <para/> Tab name is ID of UI element. Tab name is uniq but tab text is not.
            <para/> Explanation: the tab text can be a web address, 
            and there can be several open tabs with the same address.
            </summary>
            <param name="tabName">Tab name.</param>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.TabView.AddItemToTabByText(System.String,SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding an item to page by its tab text.
            <para/> Tab name is ID of UI element. Tab name is uniq but tab text is not.
            <para/> Explanation: the tab text can be a web address, 
            and there can be several open tabs with the same address.
            </summary>
            <param name="tabText">Tab text.</param>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.TabView.AddItemToTab(SpaceVIL.Tab,SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding an item to page by its tab.
            </summary>
            <param name="tab">Tab as SpaceVIL.Core.Tab.</param>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.TabView.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TabView.
            <para/> Inner styles: "tabbar", "viewarea".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.TextArea">
            <summary>
            TextArea is a basic implementation of a user interface editable text area. 
            <para/> Contains text area, scroll bars, menu button, navigation context menu.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.TextArea.Menu">
            <summary>
            Interactive item to show the navigation context menu.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.DisableMenu(System.Boolean)">
            <summary>
            Setting the navigation context menu to disable or enable.
            <para/> Default: False.
            </summary>
            <param name="value">True: if you want to disable navigation context menu. 
            False: if you want to enable navigation context menu. </param>
        </member>
        <member name="M:SpaceVIL.TextArea.IsEditable">
            <summary>
            Returns True if TextArea is editable otherwise returns False.
            </summary>
            <returns>True: if TextArea is editable.
            True: if TextArea is non-editable.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetEditable(System.Boolean)">
            <summary>
            Setting TextArea text field be editable or be non-editable.
            </summary>
            <param name="value">True: if you want TextArea be editable.
            True: if you want TextArea be non-editable.</param>
        </member>
        <member name="F:SpaceVIL.TextArea.VScrollBar">
            <summary>
            Vertical scroll bar of TextArea.
            </summary>
        </member>
        <member name="F:SpaceVIL.TextArea.HScrollBar">
            <summary>
            Horizontal scroll bar of TextArea.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.GetVScrollBarPolicy">
            <summary>
            Getting vertical scroll bar visibility policy.
            </summary>
            <returns>Visibility policy as SpaceVIL.Core.VisibilityPolicy.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetVScrollBarPolicy(SpaceVIL.Core.VisibilityPolicy)">
            <summary>
            Setting vertical scroll bar visibility policy.
            <para/> Default: SpaceVIL.Core.VisibilityPolicy.AsNeeded.
            </summary>
            <param name="policy">Visibility policy as SpaceVIL.Core.VisibilityPolicy.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.GetHScrollBarPolicy">
            <summary>
            Getting horizontal scroll bar visibility policy.
            </summary>
            <returns>Visibility policy as SpaceVIL.Core.VisibilityPolicy.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetHScrollBarPolicy(SpaceVIL.Core.VisibilityPolicy)">
            <summary>
            Setting horizontal scroll bar visibility policy.
            <para/> Default: SpaceVIL.Core.VisibilityPolicy.AsNeeded.
            </summary>
            <param name="policy">Visibility policy as SpaceVIL.Core.VisibilityPolicy.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.#ctor">
            <summary>
            Default TextArea constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.#ctor(System.String)">
            <summary>
            Constructs TextArea with the specified text.
            </summary>
            <param name="text">Text for TextArea.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="F:SpaceVIL.TextArea.OnTextChanged">
            <summary>
            Event that is invoked when text is changed.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.InitElements">
            <summary>
            Initializing all elements in the TextArea.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.GetText">
            <summary>
            Getting the current text of the TextArea.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TextArea.
            <para/> Inner styles: "vscrollbar", "hscrollbar", "textedit", "menu".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetLineSpacer(System.Int32)">
            <summary>
            Setting indent between lines in TextArea.
            </summary>
            <param name="lineSpacer">Indent between lines.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.GetLineSpacer">
            <summary>
            Getting current indent between lines in TextArea.
            </summary>
            <returns>Indent between lines.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this TextArea.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to TextArea.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.GetTextWidth">
            <summary>
            Getting the text width.
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.GetTextHeight">
            <summary>
            Getting the text height.
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a TextArea.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TextArea in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TextArea in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TextArea in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TextArea in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextArea.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetFocus">
            <summary>
            Setting focus on TextArea if it is focusable.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.Clear">
            <summary>
            Deletes all text in the TextArea.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.AppendText(System.String)">
            <summary>
            Adding the specified text to the end of the existing text.
            </summary>
            <param name="text">Text for adding.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.PasteText(System.String)">
            <summary>
            Paste the specified text at the current position of the text cursor 
            (or replace the specified text at the current starting position of 
            the selected text).
            </summary>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.CutText">
            <summary>
            Cuts and returns the current selected text.
            </summary>
            <returns>Selected text.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.GetSelectedText">
            <summary>
            Getting the current selected text.
            </summary>
            <returns>Current selected text.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.RewindText">
            <summary>
            Moves text cursor to the text beginning.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.IsWrapText">
            <summary>
            Returns True if TextArea wraps the contained text to the 
            width of the TextArea otherwise returns False.
            </summary>
            <returns>True: if TextArea wraps the contained text to the width of the TextArea. 
            False: if TextArea does not wraps the contained text.</returns>
        </member>
        <member name="M:SpaceVIL.TextArea.SetWrapText(System.Boolean)">
            <summary>
            Setting TextArea mode that wraps (or not wraps) input text to the width of the TextArea.
            </summary>
            <param name="value">True: if you want to TextArea wraps the contained text to the width of the TextArea. 
            False: if you want to TextArea does not wraps the contained text.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.SetScrollStepFactor(System.Single)">
            <summary>
            Setting scroll step factor. The scroll factor determines how many lines are scrolled 
            in a single scroll request (using a button or mouse wheel).
            <para/> Default: 1.0
            </summary>
            <param name="value">Scroll step factor.</param>
        </member>
        <member name="M:SpaceVIL.TextArea.Undo">
            <summary>
            Method for undo last change.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.Redo">
            <summary>
            Method for redo last undo action.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextArea.SelectAll">
            <summary>
            Method for selecting all text in the item.
            </summary>
        </member>
        <member name="T:SpaceVIL.TextEdit">
            <summary>
            TextEdit is a basic implementation of a user interface 
            editable text field that contains only one line. 
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.#ctor">
            <summary>
            Default TextEdit constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.#ctor(System.String)">
            <summary>
            Constructs TextEdit eith the given text.
            </summary>
            <param name="text">Text for TextEdit.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of a the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of the text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetTextAlignment">
            <summary>
            Getting alignment of a TextEdit text. 
            </summary>
            <returns>Text alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to TextEdit.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to TextEdit.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetText">
            <summary>
            Getting the current text of the TextEdit.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a TextEdit.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TextEdit in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TextEdit in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TextEdit in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TextEdit in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.IsEditable">
            <summary>
            Returns True if TextEdit is editable otherwise returns False.
            </summary>
            <returns>True: if TextEdit is editable.
            True: if TextEdit is non-editable.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetEditable(System.Boolean)">
            <summary>
            Setting TextEdit text field be editable or be non-editable.
            </summary>
            <param name="value">True: if you want TextEdit be editable.
            True: if you want TextEdit be non-editable.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.InitElements">
            <summary>
            Initializing all elements in the TextEdit.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetTextWidth">
            <summary>
            Getting the text width.
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetTextHeight">
            <summary>
            Getting the text height.
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetSelectedText">
            <summary>
            Getting the current selected text.
            </summary>
            <returns>Current selected text.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.PasteText(System.String)">
            <summary>
            Paste the specified text at the current position of the text cursor 
            (or replace the specified text at the current starting position of 
            the selected text).
            </summary>
            <param name="pasteStr">Text to insert.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.CutText">
            <summary>
            Cuts and returns the current selected text.
            </summary>
            <returns>Selected text.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.Clear">
            <summary>
            Deletes all text in the TextEdit.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TextEdit.
            <para/> Inner styles: "text".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SelectAll">
            <summary>
            Selecting entire text of the TextEdit.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.Undo">
            <summary>
            Method for undo last change.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.Redo">
            <summary>
            Method for redo last undo action.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateText(System.String)">
            <summary>
            Setting the substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            </summary>
            <param name="substrateText">Substrate text.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateFontSize(System.Int32)">
            <summary>
            Setting font size of the substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            <para/> Font family of substrate text is the same as main font.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            <para/> Font family of substrate text is the same as main font.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateForeground(System.Drawing.Color)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color of a TextEdit.
            </summary>
            <param name="color">Substrate text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color of a TextEdit in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SeSubstratetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color of a TextEdit in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible)color of a TextEdit in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.SetSubstrateForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting substrate text (hint under main text, when you start 
            typing substrate becomes invisible)color of a TextEdit in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetSubstrateForeground">
            <summary>
            Getting current substrate text (hint under main text, when you start 
            typing substrate becomes invisible) color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.GetSubstrateText">
            <summary>
            Getting substrate text 
            (hint under main text, when you start typing substrate becomes invisible).
            </summary>
            <returns>Substrate text.</returns>
        </member>
        <member name="M:SpaceVIL.TextEdit.AppendText(System.String)">
            <summary>
            Adding the specified text to the end of the existing text.
            </summary>
            <param name="text">Text for adding.</param>
        </member>
        <member name="T:SpaceVIL.TextView">
            <summary>
            TextView is designed to display non-editable text with the ability to select and copy.
            TextView wraps contained text in the current width.
            <para/> Supports all events including drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.#ctor">
            <summary>
            Default TextView constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.GetText">
            <summary>
            Getting the current text of the TextView.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.TextView.InitElements">
            <summary>
            Initializing all elements in the TextView.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.GetSelectedText">
            <summary>
            Getting the current selected text.
            </summary>
            <returns>Current selected text.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SelectAll">
            <summary>
            Selecting entire text of the TextView.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.TextView.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Height of the item. </param>
        </member>
        <member name="M:SpaceVIL.TextView.IsWrapText">
            <summary>
            Always returns True. TextView always wraps contained text.
            <para/> SpaceVIL.Core.ITextWrap implementation.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SetLineSpacer(System.Int32)">
            <summary>
            Setting indent between lines in TextView.
            </summary>
            <param name="lineSpacer">Indent between lines.</param>
        </member>
        <member name="M:SpaceVIL.TextView.GetLineSpacer">
            <summary>
            Getting current indent between lines in TextView.
            </summary>
            <returns>Indent between lines.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to this TextView.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to TextView.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.TextView.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.TextView.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a TextView.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TextView in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TextView in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TextView in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextView.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TextView in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TextView.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.TextView.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TextView.
            <para/> Inner styles: "selection".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.TextView.PasteText(System.String)">
            <summary>
            Do nothing. SpaceVIL.Core.ITextShortcuts implementation.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.CutText">
            <summary>
            Do nothing. SpaceVIL.Core.ITextShortcuts implementation.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.Undo">
            <summary>
            Do nothing. SpaceVIL.Core.ITextShortcuts implementation.
            </summary>
        </member>
        <member name="M:SpaceVIL.TextView.Redo">
            <summary>
            Do nothing. SpaceVIL.Core.ITextShortcuts implementation.
            </summary>
        </member>
        <member name="T:SpaceVIL.TitleBar">
            <summary>
            TitleBar is the basic implementation of a user interface tittle bar of window.
            <para/> Extended from SpaceVIL.WindowAnchor. WindowAnchor is class representing the draggable window type of an item.
            <para/> Contains icon, text, minimize button, maximize button, close button.
            <para/> Supports all events except drag and drop despite that this class is draggable type.
            </summary>
        </member>
        <member name="F:SpaceVIL.TitleBar.Direction">
            <summary>
            Direction of title bar (in Mac OS is HorizontalDirection.FromRightToLeft, 
            in others OS HorizontalDirection.FromLeftToRight).
            </summary>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetIcon">
            <summary>
            Getting icon of title bar.
            </summary>
            <returns>Icon of title bar as SpaceVIL.ImageItem.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetCloseButton">
            <summary>
            Getting close button of title bar. This button closes the current window.
            </summary>
            <returns>Close button of title bar as SpaceVIL.TitleBar.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetMinimizeButton">
            <summary>
            Getting minimize button of title bar. This button minimizes the window to the taskbar.
            </summary>
            <returns>Minimize button of title bar as SpaceVIL.TitleBar.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetMaximizeButton">
            <summary>
            Getting maximize button of title bar. This button maximizes/restores the 
            window to all available space of the current display 
            (display size without task bar and other OS elements).
            </summary>
            <returns>Maximize button of title bar as SpaceVIL.TitleBar.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.#ctor">
            <summary>
            Default TitleBar constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.TitleBar.#ctor(System.String)">
            <summary>
            Constructs TitleBar with the specified title text.
            </summary>
            <param name="text">Title text</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetIcon(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Setting image icon for title bar. The image is scaled to the specified width and height.
            </summary>
            <param name="icon">Image icon as System.Drawing.Bitmap.</param>
            <param name="width">New width of the bitmap.</param>
            <param name="height">New height of the bitmap.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of a TitleBar text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of a TitleBar text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to TitleBar.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to TitleBar.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetText">
            <summary>
            Getting the current text of the TitleBar.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize TitleBar by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize TitleBar by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a TitleBar.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TitleBar in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TitleBar in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TitleBar in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TitleBar in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TitleBar.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.TitleBar.InitElements">
            <summary>
            Initializing all elements in the TitleBar.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TitleBar.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TitleBar. 
            <para/> Inner styles: "closebutton", "minimizebutton", "maximizebutton", "title".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.ToolTip">
            <summary>
            ToolTip is a static class for SpaceVIL.ToolTipItem managing.
            <para/> Every window has its own ToolTipItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetStyle(SpaceVIL.CoreWindow,SpaceVIL.Decorations.Style)">
            <summary>
            Setting style for ToolTipItem of the specified window. 
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetTimeOut(SpaceVIL.CoreWindow,System.Int32)">
            <summary>
            Setting waiting time in milliseconds after which ToolTipItem appears.
            <para/> Every window has its own ToolTipItem.
            <para/>Default: 500 milliseconds (0.5 seconds).
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="milliseconds">Waiting time in milliseconds.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.GetTimeOut(SpaceVIL.CoreWindow)">
            <summary>
            Getting current waiting time in milliseconds after which ToolTipItem appears.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <returns>Current waiting time in milliseconds.</returns>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetBackground(SpaceVIL.CoreWindow,System.Drawing.Color)">
            <summary>
            Setting background color of ToolTipItem.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="color">Background color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetForeground(SpaceVIL.CoreWindow,System.Drawing.Color)">
            <summary>
            Setting text color of ToolTipItem.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetFont(SpaceVIL.CoreWindow,System.Drawing.Font)">
            <summary>
            Setting text font of ToolTipItem.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetBorder(SpaceVIL.CoreWindow,SpaceVIL.Decorations.Border)">
            <summary>
            Setting border for ToolTipItem.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="border">Border as SpaceVIL.Decorations.Border.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetShadow(SpaceVIL.CoreWindow,SpaceVIL.Decorations.Shadow)">
            <summary>
            Setting shadow for ToolTipItem.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="shadow">Shadow as SpaceVIL.Decorations.Shadow.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.SetShadowDrop(SpaceVIL.CoreWindow,System.Boolean)">
            <summary>
            Setting ToolTipItem shadow visibility. 
            <para/> Every window has its own ToolTipItem.
            <para/> True: shadow is visible. False: shadow is invisible.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="value">True: shadow is visible. 
            False: shadow is invisible.</param>
        </member>
        <member name="M:SpaceVIL.ToolTip.AddItems(SpaceVIL.CoreWindow,SpaceVIL.Core.IBaseItem[])">
            <summary>
            Adding item to the ToolTipItem for decoration or extension.
            <para/> Every window has its own ToolTipItem.
            </summary>
            <param name="window">Window as SpaceVIL.CoreWindow.</param>
            <param name="items">Sequence of items as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="T:SpaceVIL.ToolTipItem">
            <summary>
            ToolTipItem is sealed class representing basic user unterface tooltip. 
            You cannot work with this class directly.
            Use SpaceVIL.ToolTip instead.
            </summary>
        </member>
        <member name="T:SpaceVIL.TreeItem">
            <summary>
            TreeItem is designed to be a node for SpaceVIL.TreeView (branch-leaf type of container).
            <para/> Can be as leaf node or as branch node. 
            Branch node can contains another branches and leafs. 
            Leaf node cannot contains any nodes.
            <para/> Contains text, icon, indicator (branch only).
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetChildren">
            <summary>
            Getting all contained nodes in this TreeItem.
            </summary>
            <returns>Contained nodes as List&lt;SpaceVIL.TreeItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.RemoveChild(SpaceVIL.TreeItem)">
            <summary>
            Removing the specified node from TreeItem.
            </summary>
            <param name="child">Node as SpaceVIL.TreeItem.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.RemoveChildren">
            <summary>
            Removing all contained nodes in this TreeItem.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetParentBranch">
            <summary>
            Getting the parent branch node that contains this TreeItem.
            </summary>
            <returns>Parent branch node as SpaceVIL.TreeItem.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetIndentSize">
            <summary>
            Getting indent size (X axis) of the current 
            TreeItem relative to its parent branch.
            </summary>
            <returns>Indent size (X axis).</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetIndentSize(System.Int32)">
            <summary>
            Setting indent size (X axis) for the current 
            TreeItem relative to its parent branch.
            </summary>
            <param name="size">Indent size (X axis).</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.IsRoot">
            <summary>
            Returns True if this TreeItem is root (head) otherwise returns False.
            </summary>
            <returns>True: if this TreeItem is root (head).
            False: if this TreeItem is not root (head).</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetItemType">
            <summary>
            Getting node type.
            <para/> Can be TreeItemType.Leaf or TreeItemType.Brunch.
            </summary>
            <returns>Node type as SpaceVIL.Core.TreeItemType.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetIndicator">
            <summary>
            Getting the branch node indicator of TreeItem.
            </summary>
            <returns>Branch node indicator.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.#ctor(SpaceVIL.Core.TreeItemType)">
            <summary>
            Constructs TreeItem with specified type of node.
            </summary>
            <param name="type">Node type as SpaceVIL.Core.TreeItemType.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.#ctor(SpaceVIL.Core.TreeItemType,System.String)">
            <summary>
            Constructs TreeItem with specified type of node and text.
            </summary>
            <param name="type">Node type as SpaceVIL.Core.TreeItemType.</param>
            <param name="text">Text of TreeItem.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.InitElements">
            <summary>
            Initializing all elements in the TreeItem. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeItem.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item into the TreeItem.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the TreeItem.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetTextAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting alignment of TreeItem text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetTextAlignment(SpaceVIL.Core.ItemAlignment[])">
            <summary>
            Setting alignment of TreeItem text. 
            Combines with alignment by vertically (Top, VCenter, Bottom) and horizontally (Left, HCenter, Right). 
            </summary>
            <param name="alignment">Text alignment as sequence of SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetTextMargin(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting indents for the text to offset text relative to TreeItem.
            </summary>
            <param name="margin">Indents as SpaceVIL.Decorations.Indents.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetTextMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting indents for the text to offset text relative to TreeItem.
            </summary>
            <param name="left">Indent on the left.</param>
            <param name="top">Indent on the top.</param>
            <param name="right">Indent on the right.</param>
            <param name="bottom">Indent on the bottom.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetTextMargin">
            <summary>
            Getting indents of the text.
            </summary>
            <returns>Indents as SpaceVIL.Decorations.Indents.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetFont(System.Drawing.Font)">
            <summary>
            Setting font of the text.
            </summary>
            <param name="font">Font as System.Drawing.Font.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetFontSize(System.Int32)">
            <summary>
            Setting font size of the text.
            </summary>
            <param name="size">New size of the font.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetFontStyle(System.Drawing.FontStyle)">
            <summary>
            Setting font style of the text.
            </summary>
            <param name="style">New font style as System.Drawing.FontStyle.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetFontFamily(System.Drawing.FontFamily)">
            <summary>
            Setting new font family of the text.
            </summary>
            <param name="fontFamily">New font family as System.Drawing.FontFamily.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetFont">
            <summary>
            Getting the current font of the text.
            </summary>
            <returns>Font as System.Drawing.Font.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetText(System.String)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.String.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetText(System.Object)">
            <summary>
            Setting the text.
            </summary>
            <param name="text">Text as System.Object.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetText">
            <summary>
            Getting the current text of the TreeItem.
            </summary>
            <returns>Text as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetTextWidth">
            <summary>
            Getting the text width (useful when you need resize TreeItem by text width).
            </summary>
            <returns>Text width.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetTextHeight">
            <summary>
            Getting the text height (useful when you need resize TreeItem by text height).
            </summary>
            <returns>Text height.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetForeground(System.Drawing.Color)">
            <summary>
            Setting text color of a TreeItem.
            </summary>
            <param name="color">Text color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetForeground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TreeItem in byte RGB format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetForeground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting text color of a TreeItem in byte RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetForeground(System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TreeItem in float RGB format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetForeground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting text color of a TreeItem in float RGBA format.
            </summary>
            <param name="r">Red color component. Range: (0.0f - 1.0f)</param>
            <param name="g">Green color component. Range: (0.0f - 1.0f)</param>
            <param name="b">Blue color component. Range: (0.0f - 1.0f)</param>
            <param name="a">Alpha color component. Range: (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.GetForeground">
            <summary>
            Getting current text color.
            </summary>
            <returns>Text color as System.Drawing.Color.</returns>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TreeItem.
            <para/> Inner styles: "indicator", "branchicon", "leaficon".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.TreeItem.SetExpanded(System.Boolean)">
            <summary>
            Shows or hides content (contained nodes) of this TreeItem.
            </summary>
            <param name="value">True: if you want to show content.
            False: if you want to hide content.</param>
        </member>
        <member name="T:SpaceVIL.TreeView">
            <summary>
            TreeView is special container designed to show content as tree view structure.
            <para/> Extended from SpaceVIL.ListBox.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.TreeView.EventSortTree">
            <summary>
            Event that is invoked when tree view need to sort content.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.Release">
            <summary>
            Disposing TreeView resources if it was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.SetRootVisible(System.Boolean)">
            <summary>
            Setting the root (head) SpaceVIl.TreeItem is visible or invisible.
            </summary>
            <param name="value">True: if you want root SpaceVIl.TreeItem to be visible.
            False: if you want root SpaceVIl.TreeItem to be invisible.</param>
        </member>
        <member name="M:SpaceVIL.TreeView.IsRootVisible">
            <summary>
            Returns True if root (head) SpaceVIl.TreeItem is visible otherwise returns False.
            </summary>
            <returns>True: if root SpaceVIl.TreeItem is visible.
            False: if root SpaceVIl.TreeItem is invisible.</returns>
        </member>
        <member name="M:SpaceVIL.TreeView.SetRootText(System.String)">
            <summary>
            Setting text to root (head) SpaceVIl.TreeItem of TreeView.
            </summary>
            <param name="text">Text for root.</param>
        </member>
        <member name="M:SpaceVIL.TreeView.GetRootText">
            <summary>
            Getting text of root (head) SpaceVIl.TreeItem of TreeView.
            </summary>
            <returns>Text of root.</returns>
        </member>
        <member name="M:SpaceVIL.TreeView.GetRootItem">
            <summary>
            Getting root (head) SpaceVIl.TreeItem of TreeView.
            </summary>
            <returns>Root as SpaceVIl.TreeItem.</returns>
        </member>
        <member name="M:SpaceVIL.TreeView.SetRootItem(SpaceVIL.TreeItem)">
            <summary>
            Setting new root (head) SpaceVIl.TreeItem for TreeView.
            </summary>
            <param name="rootTreeItem">New root as SpaceVIl.TreeItem.</param>
        </member>
        <member name="M:SpaceVIL.TreeView.#ctor">
            <summary>
            Default TreeView constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.InitElements">
            <summary>
            Initializing all elements in the TreeView. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.SetListContent(System.Collections.Generic.IEnumerable{SpaceVIL.Core.IBaseItem})">
            <summary>
            Adding all elements in the list area of TreeView from the given list.
            </summary>
            <param name="content">List of items as IEnumerable&lt;IBaseItem&gt;</param>
        </member>
        <member name="M:SpaceVIL.TreeView.UpdateElements">
            <summary>
            Updating all TreeView inner items.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding a node to the TreeView.
            </summary>
            <param name="item">Node as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.TreeView.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the TreeView. 
            <para/> Inner styles: "area", "vscrollbar", "hscrollbar", "menu".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.TreeView.Clear">
            <summary>
            Removing all items from the list area of TreeView.
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the list area of TreeView.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.TreeView.SortTree">
            <summary>
            Sorting TreeView nodes in internal list area starting with root (head).
            </summary>
        </member>
        <member name="M:SpaceVIL.TreeView.SortBrunch(SpaceVIL.TreeItem)">
            <summary>
            Sorting part of TreeView content starting with specified branch node.
            </summary>
            <param name="branch">Branch node as SpaceVIL.TreeItem.</param>
        </member>
        <member name="T:SpaceVIL.Triangle">
            <summary>
            Triangle is a subclass that extends from SpaceVIL.Primitive 
            for rendering an triangle shape.
            </summary>
        </member>
        <member name="M:SpaceVIL.Triangle.#ctor">
            <summary>
            Default Triangle constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.Triangle.#ctor(System.Int32)">
            <summary>
            Constructs an Triangle with specified rotation angle of an triangle shape.
            </summary>
            <param name="angle">Rotation angle of an triangle shape.</param>
        </member>
        <member name="F:SpaceVIL.Triangle.RotationAngle">
            <summary>
            Rotation angle in degrees of an triangle shape. 
            <para/> Default: 0.
            </summary>
        </member>
        <member name="M:SpaceVIL.Triangle.MakeShape">
            <summary>
            Overridden method for stretching the triangle shape relative to the current size. 
            Use in conjunction with GetTriangles() and SetTriangles() methods.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="T:SpaceVIL.VerticalScrollBar">
            <summary>
            VerticalScrollBar is the basic implementation of a user interface scroll bar 
            (vertical version). 
            <para/> Contains arrow buttons, slider.
            <para/> By default ability to get focus is disabled.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.VerticalScrollBar.UpArrow">
            <summary>
            Button to scroll up.
            </summary>
        </member>
        <member name="F:SpaceVIL.VerticalScrollBar.DownArrow">
            <summary>
            Button to scroll down.
            </summary>
        </member>
        <member name="F:SpaceVIL.VerticalScrollBar.Slider">
            <summary>
            Slider for scrolling with mouse drag and drop ivents or mouse wheel.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalScrollBar.#ctor">
            <summary>
            Default VerticalScrollBar constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalScrollBar.InitElements">
            <summary>
            Initializing all elements in the VerticalScrollBar.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalScrollBar.SetArrowsVisible(System.Boolean)">
            <summary>
            Setting Up and Down arrow buttons visibility of the VerticalScrollBar.
            </summary>
            <param name="value">True: if you want buttons visible. 
            False: if you want buttons invisible.</param>
        </member>
        <member name="M:SpaceVIL.VerticalScrollBar.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the VerticalScrollBar.
            <para/> Inner styles: "uparrow", "downarrow", "slider".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.VerticalSlider">
            <summary>
            VerticalSlider is the basic implementation of a user interface slider (vertical version).
            <para/> Contains track, handler.
            <para/> Supports all events including drag and drop 
            (internal handler (SpaceVIL.ScrollHandler) supports drag and drop events).
            </summary>
        </member>
        <member name="F:SpaceVIL.VerticalSlider.Track">
            <summary>
            Slider track.
            </summary>
        </member>
        <member name="F:SpaceVIL.VerticalSlider.Handler">
            <summary>
            Slider handler.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetStep(System.Single)">
            <summary>
            Setting slider movement step.
            </summary>
            <param name="value">Slider step.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.GetStep">
            <summary>
            Getting slider movement step.
            </summary>
            <returns>Slider step.</returns>
        </member>
        <member name="F:SpaceVIL.VerticalSlider.EventValueChanged">
            <summary>
            Event that is invoked when value of the slider is changed.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.Release">
            <summary>
            Disposing all resources if the item was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetIgnoreStep(System.Boolean)">
            <summary>
            Ignoring slider step (affects only on animation). 
            Set False if you want the slider to move strictly in steps.
            <para/> Default: True.
            </summary>
            <param name="value">True: if you want to ignore step. 
            False: if you do not want to ignore step. </param>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.IsIgnoreStep">
            <summary>
            Returns True if slider movement ignore steps otherwise returns False.
            </summary>
            <returns>True: if movement step is ignored. 
            False: if movement step is not ignored. </returns>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetCurrentValue(System.Single)">
            <summary>
            Setting the current slider value. If the value is greater/less than the maximum/minimum 
            slider value, then the slider value becomes equal to the maximum/minimum value.
            </summary>
            <param name="value">Slider value.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.GetCurrentValue">
            <summary>
            Getting the current slider value.
            </summary>
            <returns>Slider value.</returns>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetMinValue(System.Single)">
            <summary>
            Setting the minimum slider value limit. 
            Slider value cannot be less than this limit.
            </summary>
            <param name="value">Minimum slider value limit.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.GetMinValue">
            <summary>
            Getting the current minimum slider value limit.
            </summary>
            <returns>Minimum slider value limit.</returns>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetMaxValue(System.Single)">
            <summary>
            Setting the maximum slider value limit. 
            Slider value cannot be greater than this limit.
            </summary>
            <param name="value">Maximum slider value limit.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.GetMaxValue">
            <summary>
            Getting the current maximum slider value limit.
            </summary>
            <returns>Maximum slider value limit.</returns>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.#ctor">
            <summary>
            Default VerticalSlider constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.InitElements">
            <summary>
            Initializing all elements in the VerticalSlider.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetY(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the VerticalSlider.
            </summary>
            <param name="y">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSlider.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the VerticalSlider.
            <para/> Inner styles: "track", "handler".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.VerticalSplitArea">
            <summary>
            VerticalSplitArea is a container with two divided areas (on top and on bottom). 
            VerticalSplitArea implements SpaceVIL.Core.IHLayout.
            <para/> Contains SpaceVIL.SplitHolder.
            <para/> By default ability to get focus is disabled.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetSplitPosition(System.Int32)">
            <summary>
            Setting position of the split holder.
            </summary>
            <param name="position">Position of the split holder.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetSplitColor(System.Drawing.Color)">
            <summary>
            Setting split holder color.
            </summary>
            <param name="color">Split holder color as System.Drawing.Color.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.#ctor">
            <summary>
            Defaults VerticalSplitArea constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.InitElements">
            <summary>
            Initializing all elements in the VerticalSplitArea. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetLeftItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Assign item on the left area of the VerticalSplitArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetRightItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Assign item on the right area of the VerticalSplitArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetWidth(System.Int32)">
            <summary>
            Setting VerticalSplitArea width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width">Width of the VerticalSplitArea.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the VerticalSplitArea.
            </summary>
            <param name="x">X position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IHLayout).
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetSplitThickness(System.Int32)">
            <summary>
            Setting thickness of SplitHolder divider.
            </summary>
            <param name="thickness">Thickness of SplitHolder divider.</param>
        </member>
        <member name="M:SpaceVIL.VerticalSplitArea.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Seting style of the VerticalSplitArea.
            <para/> Inner styles: "splitholder".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.VerticalStack">
            <summary>
            VerticalStack is a class that represents a line type container (vertical version). 
            VerticalStack groups items one after another using content alignment, margins, paddings, 
            sizes and size policies.
            VerticalStack implements SpaceVIL.Core.IVLayout.
            By default ability to get focus is disabled.
            <para/> VerticalStack cannot receive any events, 
            so VerticalStack is always in the SpaceVIL.Core.ItemStateType.Base state.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalStack.SetContentAlignment(SpaceVIL.Core.ItemAlignment)">
            <summary>
            Setting content alignment within VerticalStack area. 
            <para/> Supports only: ItemAlignment.Top, ItemAlignment.VCenter, ItemAlignment.Bottom.
            <para/> Default: ItemAlignment.Top.
            </summary>
            <param name="alignment">Content alignment as SpaceVIL.Core.ItemAlignment.</param>
        </member>
        <member name="M:SpaceVIL.VerticalStack.GetContentAlignment">
            <summary>
            Getting current content alignment.
            <para/> Can be: ItemAlignment.Top, ItemAlignment.VCenter, ItemAlignment.Bottom.
            </summary>
            <returns>Content alignment as SpaceVIL.Core.ItemAlignment.</returns>
        </member>
        <member name="M:SpaceVIL.VerticalStack.#ctor">
            <summary>
            Default VerticalStack constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.VerticalStack.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the VerticalStack. 
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.VerticalStack.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Inserting item to the VerticalStack container. 
            If the number of container elements is less than the index, 
            then the element is added to the end of the list.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.VerticalStack.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the VerticalStack container.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.VerticalStack.SetHeight(System.Int32)">
            <summary>
            Setting VerticalStack height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height">Weight of the VerticalStack.</param>
        </member>
        <member name="M:SpaceVIL.VerticalStack.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of the VerticalStack.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.VerticalStack.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IVLayout).
            </summary>
        </member>
        <member name="T:SpaceVIL.EventCommonMethod">
            <summary>
            Common type of events. No arguments.
            </summary>
        </member>
        <member name="T:SpaceVIL.EventCommonMethodState">
            <summary>
            Common type of events with one argument: sender.
            </summary>
            <param name="sender">Sender as SpaceVIL.Core.IItem.</param>
        </member>
        <member name="T:SpaceVIL.EventMouseMethodState">
            <summary>
            Mouse type of event with two arguments: sender, args.
            </summary>
            <param name="sender">Sender as SpaceVIL.Core.IItem.</param>
            <param name="args">Mouse arguments as SpaceVIL.Core.MouseArgs.</param>
        </member>
        <member name="T:SpaceVIL.EventKeyMethodState">
            <summary>
            Key type of event with two arguments: sender, args.
            </summary>
            <param name="sender">Sender as SpaceVIL.Core.IItem.</param>
            <param name="args">Key arguments as SpaceVIL.Core.KeyArgs.</param>
        </member>
        <member name="T:SpaceVIL.EventInputTextMethodState">
            <summary>
            Text input type of event with two arguments: sender, args.
            </summary>
            <param name="sender">Sender as SpaceVIL.Core.IItem.</param>
            <param name="args">Text input arguments as SpaceVIL.Core.TextInputArgs.</param>
        </member>
        <member name="T:SpaceVIL.EventWindowDropMethod">
            <summary>
            Drop type of event with two arguments: sender, args.
            </summary>
            <param name="sender">Sender as SpaceVIL.Core.IItem.</param>
            <param name="args">Drop arguments as SpaceVIL.Core.DropArgs.</param>
        </member>
        <member name="T:SpaceVIL.WindowAnchor">
            <summary>
            WindowAnchor is class representing the draggable window type of an item. 
            Supports all events except drag and drop despite that this class is draggable type.
            </summary>
        </member>
        <member name="M:SpaceVIL.WindowAnchor.#ctor">
            <summary>
            Default WindowAnchor constructor.
            </summary>
        </member>
        <member name="T:SpaceVIL.WrapArea">
            <summary>
            WrapArea is a scrollable container for other elements with ability of selection. 
            WrapArea groups elements in cells of a certain size. 
            It can be oriented vertically or horizontally.
            WrapArea is part of SpaceVIL.WrapGrid which controls scrolling, resizing and etc.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="F:SpaceVIL.WrapArea.SelectionChanged">
            <summary>
            Event that is invoked when one of the element is selected.
            </summary>
        </member>
        <member name="F:SpaceVIL.WrapArea.ItemListChanged">
            <summary>
            Event that is invoked when one of the set of elements is changed.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapArea.Release">
            <summary>
            Disposing WrapArea resources if it was removed.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetStep(System.Int32)">
            <summary>
            Setting scroll movement step.
            </summary>
            <param name="value">Scroll step.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.GetStep">
            <summary>
            Getting scroll movement step.
            </summary>
            <returns>Scroll step.</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.IsStretch">
            <summary>
            Returns True if WrapArea allocates all available space between cells 
            to achieve smooth streching, otherwise returns False.
            </summary>
            <returns>True: if WrapArea allocates all available space between cells.
            False: if space between cells is fixed.</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetStretch(System.Boolean)">
            <summary>
            Setting strech mode for WrapArea. WrapArea can allocates all available 
            space between cells or uses fixed space between cells.
            </summary>
            <param name="value">True: if you want to WrapArea allocates 
            all available space between cells.
            False: if you want space between cells to be fixed.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.GetSelection">
            <summary>
            Getting index of selected item.
            </summary>
            <returns>Index of selected item.</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.GetSelectedItem">
            <summary>
            Getting selected item.
            </summary>
            <returns>Selected item as SpaceVIL.Core.IBaseItem</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetSelection(System.Int32)">
            <summary>
            Select item by index.
            </summary>
            <param name="index">Index of selection.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.Unselect">
            <summary>
            Unselect selected item.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetSelectionVisible(System.Boolean)">
            <summary>
            Enable or disable selection ability of WrapArea.
            </summary>
            <param name="value">True: if you want selection ability of WrapArea to be enabled. 
            False: if you want selection ability of WrapArea to be disabled.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.IsSelectionVisible">
            <summary>
            Returns True if selection ability of WrapArea is enabled otherwise returns False.
            </summary>
            <returns>True: selection ability of WrapArea is enabled. 
            False: selection ability of WrapArea is disabled.</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.#ctor(System.Int32,System.Int32,SpaceVIL.Core.Orientation)">
            <summary>
            Constructs a WrapArea with specified cell width, height and orientation.
            </summary>
            <param name="cellWidth">Width of each cell.</param>
            <param name="cellHeight">Height of each cell.</param>
            <param name="orientation">Orientation of layout as SpaceVIL.Core.Orientation.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Insert item into the WrapArea by index.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the WrapArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetListContent(System.Collections.Generic.IEnumerable{SpaceVIL.Core.IBaseItem})">
            <summary>
            Adding all elements in the WrapArea from the given list.
            </summary>
            <param name="content">List of items as IEnumerable&lt;IBaseItem&gt;</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the WrapArea.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.Clear">
            <summary>
            Removing all items from the WrapArea.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetX(System.Int32)">
            <summary>
            Setting X coordinate of the left-top corner of the WrapArea.
            </summary>
            <param name="x">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetY(System.Int32)">
            <summary>
            Setting Y coordinate of the left-top corner of the WrapArea.
            </summary>
            <param name="y">Y position of the left-top corner.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.GetScrollOffset">
            <summary>
            Getting scroll offset in the WrapArea.
            </summary>
            <returns>Scroll offset.</returns>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetScrollOffset(System.Int64)">
            <summary>
            Setting scroll offset of the WrapArea.
            </summary>
            <param name="value">Scroll offset.</param>
        </member>
        <member name="M:SpaceVIL.WrapArea.UpdateLayout">
            <summary>
            Updating all children positions (implementation of SpaceVIL.Core.IFreeLayout).
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapArea.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the WrapArea. 
            <para/> Inner styles: "selection".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.WrapGrid">
            <summary>
            WrapGrid is a container and manager of SpaceVIL.WrapArea 
            (scrollable container for other elements with ability of selection, 
            groups elements in cells of a certain size)
            and scroll bars. WrapGrid controls scrolling, resizing and other actions of SpaceVIL.WrapArea.
            <para/> Contains list area, scroll bars, scroll menu.
            <para/> Supports all events except drag and drop.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapGrid.IsStretch">
            <summary>
            Returns True if internal SpaceVIL.WrapArea allocates all available space between cells 
            to achieve smooth streching, otherwise returns False.
            </summary>
            <returns>True: if SpaceVIL.WrapArea allocates all available space between cells.
            False: if space between cells is fixed.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetStretch(System.Boolean)">
            <summary>
            Setting strech mode for internal SpaceVIL.WrapArea. 
            SpaceVIL.WrapArea can allocates all available 
            space between cells or uses fixed space between cells.
            </summary>
            <param name="value">True: if you want to SpaceVIL.WrapArea allocates 
            all available space between cells.
            False: if you want space between cells to be fixed.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetRowCount">
            <summary>
            Getting current row count.
            </summary>
            <returns>Row count.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetColumnCount">
            <summary>
            Getting current column count.
            </summary>
            <returns>Column count.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetCellWidth">
            <summary>
            Getting current cell width.
            </summary>
            <returns>Cell width.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetCellHeight">
            <summary>
            Getting current cell height.
            </summary>
            <returns>Cell height.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetCellWidth(System.Int32)">
            <summary>
            Setting cell width.
            </summary>
            <param name="cellWidth">Cell width.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetCellHeight(System.Int32)">
            <summary>
            Setting cell height.
            </summary>
            <param name="cellHeight">Cell height.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetCellSize(System.Int32,System.Int32)">
            <summary>
            Setting cell size.
            </summary>
            <param name="cellWidth">Cell width.</param>
            <param name="cellHeight">Cell height.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetScrollStep(System.Int32)">
            <summary>
            Setting scroll movement step.
            </summary>
            <param name="step">Scroll step.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetScrollStep">
            <summary>
            Getting scroll movement step.
            </summary>
            <returns>Scroll step.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetSelection">
            <summary>
            Getting index of selected item.
            </summary>
            <returns>Index of selected item.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetSelection(System.Int32)">
            <summary>
            Select item by index.
            </summary>
            <param name="index">Index of selection.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.Unselect">
            <summary>
            Unselect selected item.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetSelectionVisible(System.Boolean)">
            <summary>
            Enable or disable selection ability of SpaceVIL.WrapArea.
            </summary>
            <param name="value">True: if you want selection ability of SpaceVIL.WrapArea to be enabled. 
            False: if you want selection ability of SpaceVIL.WrapArea to be disabled.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.IsSelectionVisible">
            <summary>
            Returns True if selection ability of SpaceVIL.WrapArea is enabled otherwise returns False.
            </summary>
            <returns>True: selection ability of SpaceVIL.WrapArea is enabled. 
            False: selection ability of SpaceVIL.WrapArea is disabled.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetArea">
            <summary>
            Getting list area of WrapGrid.
            </summary>
            <returns>List area as SpaceVIL.WrapArea.</returns>
        </member>
        <member name="F:SpaceVIL.WrapGrid.VScrollBar">
            <summary>
            Vertical scroll bar of WrapGrid.
            </summary>
        </member>
        <member name="F:SpaceVIL.WrapGrid.HScrollBar">
            <summary>
            Horizontal scroll bar of WrapGrid.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetOrientation">
            <summary>
            Getting internal SpaceVIL.WrapArea orientation.
            <para/> Orientation can be Orientation.Horizontal 
            or Orientation.Vertical.
            </summary>
            <returns>Current SpaceVIL.WrapArea orientation.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetScrollBarPolicy">
            <summary>
            Getting scroll bar visibility policy.
            </summary>
            <returns>Visibility policy as SpaceVIL.Core.VisibilityPolicy.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetScrollBarPolicy(SpaceVIL.Core.VisibilityPolicy)">
            <summary>
            Setting scroll bar visibility policy.
            <para/> Default: SpaceVIL.Core.VisibilityPolicy.AsNeeded.
            </summary>
            <param name="policy">Visibility policy as SpaceVIL.Core.VisibilityPolicy.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.#ctor(System.Int32,System.Int32,SpaceVIL.Core.Orientation)">
            <summary>
            Constructs a WrapGrid with specified cell width, height and orientation.
            </summary>
            <param name="cellWidth">Width of each cell.</param>
            <param name="cellHeight">Height of each cell.</param>
            <param name="orientation">Orientation of layout as SpaceVIL.Core.Orientation.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetWidth(System.Int32)">
            <summary>
            Setting item width. If the value is greater/less than the maximum/minimum 
            value of the width, then the width becomes equal to the maximum/minimum value.
            </summary>
            <param name="width"> Width of the item. </param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetHeight(System.Int32)">
            <summary>
            Setting item height. If the value is greater/less than the maximum/minimum 
            value of the height, then the height becomes equal to the maximum/minimum value.
            </summary>
            <param name="height"> Рeight of the item. </param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding item to the list area of WrapGrid.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Insert item into the list area of WrapGrid by index.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <param name="index">Index of insertion.</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing the specified item from the list area of WrapGrid.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>True: if the removal was successful. 
            False: if the removal was unsuccessful.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.Clear">
            <summary>
            Removing all items from the list area of WrapGrid.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapGrid.InitElements">
            <summary>
            Initializing all elements in the WrapGrid. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetListContent">
            <summary>
            Getting content of the list area of WrapGrid.
            </summary>
            <returns>Content of the list area as List&lt;IBaseItem&gt;</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetListContent(System.Collections.Generic.List{SpaceVIL.Core.IBaseItem})">
            <summary>
            Adding all elements in the list area of WrapGrid from the given list.
            </summary>
            <param name="content">List of items as List&lt;IBaseItem&gt;</param>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetWrapper(SpaceVIL.Core.IBaseItem)">
            <summary>
            Getting wrapper of item.
            </summary>
            <param name="item">Item as SpaceVIL.Core.IBaseItem.</param>
            <returns>Wrapper of given item as SpaceVIL.SelectionItem.</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.GetSelectedItem">
            <summary>
            Getting selected item.
            </summary>
            <returns>Selected item as SpaceVIL.Core.IBaseItem</returns>
        </member>
        <member name="M:SpaceVIL.WrapGrid.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the WrapGrid. 
            <para/> Inner styles: "area", "vscrollbar", "hscrollbar".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.ItemsLayoutBox">
            <summary>
            ItemsLayoutBox is a storage-class that provides an access to existing items.
            </summary>
        </member>
        <member name="M:SpaceVIL.ItemsLayoutBox.GetLayoutItems(System.Guid)">
            <summary>
            Getting existing static items in specified window by its GUID. 
            Static items are items that depend on their parent. Parent controls their size, position and etc.
            </summary>
            <param name="id">GUID of the window.</param>
            <returns>The list of existing static items in specified window by its GUID.</returns>
        </member>
        <member name="M:SpaceVIL.ItemsLayoutBox.GetLayoutFloatItems(System.Guid)">
            <summary>
            Getting existing float items in specified window by its GUID. 
            Floating items are independent items that do not have a parent, or their root parent is a floating item. 
            Examples: SideArea, FloatItem, ContextMenu and etc.
            </summary>
            <param name="id">GUID of the window.</param>
            <returns>The list of existing float items in specified window by its GUID.</returns>
        </member>
        <member name="M:SpaceVIL.ItemsLayoutBox.AddItem(SpaceVIL.CoreWindow,SpaceVIL.Core.IBaseItem,SpaceVIL.Core.LayoutType)">
            <summary>
            Adding an item to global item storage (ItemsLayoutBox). 
            In usual situation you do not need to use this function only if you create your own implementation of IBaseItem or 
            create a new implementation of IFloatItem.
            </summary>
            <param name="window">Any CoreWindow instance.</param>
            <param name="item">Any IBaseItem instance.</param>
            <param name="type">Type of an item: SpaceVIL.Core.LayoutType.Static 
            or SpaceVIL.Core.LayoutType.Floating.</param>
        </member>
        <member name="M:SpaceVIL.ItemsLayoutBox.RemoveItem(SpaceVIL.CoreWindow,SpaceVIL.Core.IBaseItem,SpaceVIL.Core.LayoutType)">
            <summary>
            Removing an item from global item storage (ItemsLayoutBox). 
            In usual situation you do not need to use this function only if you create your own implementation of IBaseItem or 
            want to remove IFloatItem instance.
            </summary>
            <param name="window">Any CoreWindow instance.</param>
            <param name="item">Any IBaseItem instance.</param>
            <param name="type">Type of an item: SpaceVIL.Core.LayoutType.Static 
            or SpaceVIL.Core.LayoutType.Floating</param>
            <returns>True: if removal was successfull. False: if the specified item does not exist in the storage.</returns>
        </member>
        <member name="M:SpaceVIL.ItemsLayoutBox.GetListOfItemsNames(SpaceVIL.CoreWindow)">
            <summary>
            Getting the list of names of existing items in the specified window.
            </summary>
            <param name="window">Any CoreWindow instance.</param>
            <returns>The list of names of existing items in the specified window.</returns>
        </member>
        <member name="M:SpaceVIL.ItemsLayoutBox.PrintListOfItems(SpaceVIL.CoreWindow)">
            <summary>
            Printing all existing items in the specified window.
            </summary>
            <param name="window">Any CoreWindow instance.</param>
        </member>
        <member name="T:SpaceVIL.ActiveWindow">
            <summary>
            ActiveWindow is an abstract class for base window instances.
            <para/>ActiveWindow extends CoreWindow class. 
            CoreWindow is an abstract class containing an implementation of common functionality for a window.
            </summary>
        </member>
        <member name="M:SpaceVIL.ActiveWindow.#ctor">
            <summary>
            Constructs an ActiveWindow
            </summary>
        </member>
        <member name="T:SpaceVIL.CoreWindow">
            <summary>
            CoreWindow is an abstract class containing an implementation of common functionality for a window.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.#ctor">
            <summary>
            Constructs a CoreWindow.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetParameters(System.String,System.String)">
            <summary>
            Setting basic window attributes.
            </summary>
            <param name="name">Window name.</param>
            <param name="title">Title text.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetParameters(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Setting basic window attributes
            </summary>
            <param name="name">Window name.</param>
            <param name="title">Title text.</param>
            <param name="width">Window width in pixels.</param>
            <param name="height">Window height  in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetParameters(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Setting basic window attributes.
            </summary>
            <param name="name">Window name.</param>
            <param name="title">Title text.</param>
            <param name="width">Window width in pixels.</param>
            <param name="height">Window height  in pixels.</param>
            <param name="isBorder">A flag that shows/hides native window border decoration.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetLayout">
            <summary>
            Parent item for the CoreWindow.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetHandler(SpaceVIL.WindowLayout)">
            <summary>
            Parent item for the CoreWindow.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Show">
            <summary>
            Show the CoreWindow.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Close">
            <summary>
            Close the CoreWindow.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.InitWindow">
            <summary>
            This abstract method should provide the initial window attributes, content, events. 
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetCount">
            <returns> Count of all CoreWindows </returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetWindowGuid">
            <returns> CoreWindow unique ID </returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBackground(System.Drawing.Color)">
            <summary>
            Setting window background color.
            </summary>
            <param name="color">System.Drawing.Color.FromARGB(alpha, red, green, blue)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBackground(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting window background color.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting window background color.
            </summary>
            <param name="r">Red color component. Range: (0 - 255)</param>
            <param name="g">Green color component. Range: (0 - 255)</param>
            <param name="b">Blue color component. Range: (0 - 255)</param>
            <param name="a">Alpha color component. Range: (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBackground(System.Single,System.Single,System.Single)">
            <summary>
            Setting window background color.
            </summary>
            <param name="r">Red (0.0f - 1.0f)</param>
            <param name="g">Green (0.0f - 1.0f)</param>
            <param name="b">Blue (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBackground(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting window background color.
            </summary>
            <param name="r">Red (0.0f - 1.0f)</param>
            <param name="g">Green (0.0f - 1.0f)</param>
            <param name="b">Blue (0.0f - 1.0f)</param>
            <param name="a">Alpha (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetBackground">
            <summary>
            Getting window background color.
            </summary>
            <returns>Returns background color as System.Drawing.Color</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetPadding(SpaceVIL.Decorations.Indents)">
            <summary>
            Setting padding indents. Padding is the space that’s inside the element between the element and the border.
            </summary>
            <param name="padding">SpaceVIL.Decorations.Indents(int left, int top, int right, int bottom)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting padding indents. Padding is the space that’s inside the element between the element and the border.
            </summary>
            <param name="left">Left indent.</param>
            <param name="top">Top indent.</param>
            <param name="right">Right indent.</param>
            <param name="bottom">Bottom indent.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetItems">
            <summary>
            Getting items as a list of IBaseItem items.
            </summary>
            <returns>Returns a list of contained items in the window.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.AddItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Adding an item to the window.
            </summary>
            <param name="item">An instance of any IBaseItem class.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.AddItems(SpaceVIL.Core.IBaseItem[])">
            <summary>
            Allows to add multiple items to the window.
            </summary>
            <param name="items">An instance of any IBaseItem class.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.InsertItem(SpaceVIL.Core.IBaseItem,System.Int32)">
            <summary>
            Allows you to insert an item at a specified position.
            </summary>
            <param name="item">An instance of any IBaseItem class.</param>
            <param name="index">Index of position.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.RemoveItem(SpaceVIL.Core.IBaseItem)">
            <summary>
            Removing a specified item.
            </summary>
            <param name="item">An instance of any IBaseItem class.</param>
            <returns>True: if the window cantained the specified item and it was successfully removed. 
            False: if the window did not cantain the specified item.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Clear">
            <summary>
            Removing all containing items in the window.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetWindowName(System.String)">
            <summary>
            Setting the window name. The window name is the string ID of the window and may differ from the window title.
            </summary>
            <param name="value">Window name.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetWindowName">
            <summary>
            Getting the window name.
            </summary>
            <returns>Window name.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetWindowTitle(System.String)">
            <summary>
            Setting the window title text.
            </summary>
            <param name="title">Title text.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetWindowTitle">
            <summary>
            Getting the title text.
            </summary>
            <returns>Title text.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetWidth(System.Int32)">
            <summary>
            Setting the window width.
            </summary>
            <param name="width">Width in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetHeight(System.Int32)">
            <summary>
            Setting the window height.
            </summary>
            <param name="height">Height in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetSize(System.Int32,System.Int32)">
            <summary>
            Setting the window size in pixels: width and height.
            </summary>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetMinWidth(System.Int32)">
            <summary>
            Setting the window minimum width.
            </summary>
            <param name="width">Minimum width in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetMinHeight(System.Int32)">
            <summary>
            Setting the window minimum height.
            </summary>
            <param name="height">Minimum height in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetMinSize(System.Int32,System.Int32)">
            <summary>
            Setting the minimum window size in pixels: width and height.
            </summary>
            <param name="width">Minimum width in pixels.</param>
            <param name="height">Minimum height in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetMaxWidth(System.Int32)">
            <summary>
            Setting the window maximum width.
            </summary>
            <param name="width">Maximum width in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetMaxHeight(System.Int32)">
            <summary>
            Setting the window maximum height.
            </summary>
            <param name="height">Maximum height in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetMaxSize(System.Int32,System.Int32)">
            <summary>
            Setting the maximum window size in pixels: width and height.
            </summary>
            <param name="width">Maximum width in pixels.</param>
            <param name="height">Maximum height in pixels.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetMinWidth">
            <summary>
            Getting the current minimum window width.
            </summary>
            <returns>Current minimum width in pixels.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetWidth">
            <summary>
            Getting the current minimum window width.
            </summary>
            <returns>Current minimum width in pixels.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetMaxWidth">
            <summary>
            Getting the current maximum window width.
            </summary>
            <returns>Current maximum width in pixels.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetMinHeight">
            <summary>
            Getting the current minimum window height.
            </summary>
            <returns>Current minimum height in pixels.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetHeight">
            <summary>
            Getting the current window height.
            </summary>
            <returns>Current height in pixels.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetMaxHeight">
            <summary>
            Getting the current maximum window height.
            </summary>
            <returns>Current maximum height in pixels.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetSize">
            <summary>
            Getting the current window size.
            </summary>
            <returns>Current window size as SpaceVIL.Core.Size.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetX(System.Int32)">
            <summary>
            Setting the window x-coordinate (the left-top window corner). Relocating the window at specified x-coordinate.
            </summary>
            <param name="x">X-Coordinate.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetX">
            <summary>
            Getting the current window x-coordinate.
            </summary>
            <returns>Current x-coordinate.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetY(System.Int32)">
            <summary>
            Setting the window y-coordinate (the left-top window corner). Relocating the window at specified y-coordinate.
            </summary>
            <param name="y">Y-Coordinate.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetY">
            <summary>
            Getting the current window y-coordinate.
            </summary>
            <returns>Current y-coordinate.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetPosition(System.Int32,System.Int32)">
            <summary>
            Setting the window x-coordinate and y-coordinate (the left-top window corner). Relocating the window at specified coordinates.
            </summary>
            <param name="x">X-Coordinate.</param>
            <param name="y">Y-Coordinate.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetPosition(SpaceVIL.Core.Position)">
            <summary>
            Setting the window x-coordinate and y-coordinate (the left-top window corner). Relocating the window at specified coordinates.
            </summary>
            <param name="position">X-coordinate and Y-coordinate provided as SpaceVIL.Core.Position</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetPosition">
            <summary>
            Getting the current window position.
            </summary>
            <returns>X-coordinate and Y-coordinate provided as SpaceVIL.Core.Position</returns>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsDialog">
            <summary>
            <para/>A flag that determines whether the current window is dialog or not.
            <para/>True: window is dialog. False: window is NOT dialog.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsClosed">
            <summary>
            <para/>A flag that determines whether the current window is in closed state or not.
            <para/>True: window is closed. False: window is opened.
            <para/>Default: True.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsHidden">
            <summary>
            <para/>A flag that determines whether the current window is in hidden state or not.
            <para/>True: window is hidden. False: window is unhidden.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsResizable">
            <summary>
            <para/>A flag that determines whether the current window can be resize or not.
            <para/>True: window is resizable. False: window is NOT resizable.
            <para/>Default: True.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsAlwaysOnTop">
            <summary>
            <para/>A flag that determines whether the current window is always on top of all other windows or not.
            <para/>True: window is on top. False: window is NOT on top.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsBorderHidden">
            <summary>
            <para/>A flag that shows/hides native the current window border decoration.
            <para/>True: native window border is HIDDEN. False: native window border is SHOWN.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsCentered">
            <summary>
            <para/>A flag that determines whether the current window will first appear in the center of the screen or not.
            <para/>True: window is centered. False: window is NOT centered.
            <para/>Default: True.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsFocusable">
            <para/>A flag that determines whether the current window can be in focused state or not.
            <para/>True: window is focusable. False: window is NOT focusable.
            <para/>Default: True.
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsOutsideClickClosable">
            <summary>
            <para/>A flag that determines whether the current window can be closed if the mouse is clicked outside of the current window or not.
            <para/>True: window can be closed if the mouse is clicked outside. False: window can NOT be closed if the mouse is clicked outside.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsMaximized">
            <summary>
            <para/>A flag that determines whether the current window will first appear maximized or not.
            <para/>True: window will first appear maximized. False: window will NOT first appear maximized.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsTransparent">
            <summary>
            <para/>A flag that determines whether the current window can be transparent or not.
            <para/>True: window can be transparent. False: window can NOT be transparent.
            <para/>Default: False.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.IsFullScreen">
            <summary>
            <para/>A flag that determines whether the current window will first appear in fullscreen mode or not.
            <para/>True: window will first appear in fullscreen mode. False: window will NOT first appear in fullscreen mode.
            <para/>Default: False.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetAntiAliasingQuality(SpaceVIL.Core.MSAA)">
            <summary>
            Setting the anti aliasing quality (off, x2, x4, x8).
            Default: MSAA.MSAA4x
            </summary>
            <param name="msaa">SpaceVIL.Core.MSAA anti aliasing quality.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.IsFocused">
            <summary>
            Lets to know if the current window is focused or not.
            </summary>
            <returns>True: if the current window is focused. False: if the current window is unfocused.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Focus">
            <summary>
            Sets the window focused.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Minimize">
            <summary>
            Sets the window minimized.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Maximize">
            <summary>
            Sets the window maximized.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.ToggleFullScreen">
            <summary>
            Toggles the window to full screen mode or windowed mode.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetFocusedItem">
            <summary>
            Getting the current focused item in the current window.
            </summary>
            <returns>SpaceVIL.Prototype (abstract class for interactive items).</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetFocusedItem(SpaceVIL.Prototype)">
            <summary>
            Setting the specified item to the focused state.
            </summary>
            <param name="item">Any item that can be focused and extends of SpaceVIL.Prototype (abstract class for interactive items).</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.ResetFocus">
            <summary>
            Returns focus to the root item of the window.
            </summary>
            
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetIcon(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Sets the icons of the current window.
            </summary>
            <param name="iconBig">Task bar icon.</param>
            <param name="iconSmall">Title bar icon.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetHidden(System.Boolean)">
            <summary>
            Hides or unhides the current window.
            </summary>
            <param name="value">True: if you want to hide the window. False: if you want tu unhide the window.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.IsMinimized">
            <summary>
            Return True if the current window is minimized or otherwise returns False.
            <para/>Default: False.
            </summary>
            <returns>True: window is minimized. False: window is NOT minimized.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetRenderFrequency(SpaceVIL.Core.RedrawFrequency)">
            <summary>
            Lets to set the rendering frequency.
            Default: SpaceVIL.Core.RedrawFrequency.Low
            </summary>
            <param name="value">Rendering frequency as SpaceVIL.Core.RedrawFrequency.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetRenderFrequency">
            <summary>
            Getting the current rendering frequency.
            </summary>
            <returns>Rendering frequency as SpaceVIL.Core.RedrawFrequency</returns>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventOnStart">
            <summary>
            Lets to describe the actions when the window starts.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventClose">
            <summary>
            Lets to describe the actions when closing the window.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventDrop">
            <summary>
            Lets to describe the actions when you drag and drop files/folders to the current window.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetAspectRatio(System.Int32,System.Int32)">
            <summary>
            Lets to set aspect ratio.
            </summary>
            <param name="w">Width value.</param>
            <param name="h">Height value.</param>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventResize">
            <summary>
            ATTENTION!
            Not implemented yet.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventDestroy">
            <summary>
            ATTENTION!
            Not implemented yet.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMouseHover">
            <summary>
            Lets to describe the actions when mouse cursor hovers the root item of the window.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMouseLeave">
            <summary>
            Lets to describe the actions when mouse cursor leaves the root item of the window.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMouseClick">
            <summary>
            Lets to describe the actions when the root item of the window was clicked.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMouseDoubleClick">
            <summary>
            Lets to describe the actions when the root item of the window was double clicked.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMousePress">
            <summary>
            Lets to describe the actions when the root item of the window was pressed.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMouseDrag">
            <summary>
            Lets to describe the actions when the mouse button was pressed and moved inside the root item of the window.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventMouseDrop">
            <summary>
            Lets to describe the actions when the mouse button was released after dragging.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventScrollUp">
            <summary>
            Lets to describe the actions when mouse wheel scrolls up.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventScrollDown">
            <summary>
            Lets to describe the actions when mouse wheel scrolls down.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventKeyPress">
            <summary>
            Lets to describe the actions when a keyboard key was pressed.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventKeyRelease">
            <summary>
            Lets to describe the actions when a keyboard key was released.
            </summary>
        </member>
        <member name="F:SpaceVIL.CoreWindow.EventTextInput">
            <summary>
            Lets to describe the actions when you type text.
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorder(SpaceVIL.Decorations.Border)">
            <summary>
            Setting the border of the root item of the window.
            </summary>
            <param name="border">Border as SpaceVIL.Decorations.Border</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderFill(System.Drawing.Color)">
            <summary>
            Setting the color of the window border.
            </summary>
            <param name="fill">Color as System.Drawing.Color</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderFill(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the color of the window border.
            </summary>
            <param name="r">Red (0 - 255)</param>
            <param name="g">Green (0 - 255)</param>
            <param name="b">Blue (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderFill(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the color of the window border.
            </summary>
            <param name="r">Red (0 - 255)</param>
            <param name="g">Green (0 - 255)</param>
            <param name="b">Blue (0 - 255)</param>
            <param name="a">Alpha (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderFill(System.Single,System.Single,System.Single)">
            <summary>
            Setting the color of the window border.
            </summary>
            <param name="r">Red (0.0f - 1.0f)</param>
            <param name="g">Green (0.0f - 1.0f)</param>
            <param name="b">Blue (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderFill(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting the color of the window border.
            </summary>
            <param name="r">Red (0.0f - 1.0f)</param>
            <param name="g">Green (0.0f - 1.0f)</param>
            <param name="b">Blue (0.0f - 1.0f)</param>
            <param name="a">Alpha (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderRadius(SpaceVIL.Decorations.CornerRadius)">
            <summary>
            Setting the corner radii of the window border.
            </summary>
            <param name="radius">Corner radii as SpaceVIL.Decorations.CornerRadius</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderRadius(System.Int32)">
            <summary>
            Setting the common corner radius of the window border.
            </summary>
            <param name="radius">The corner radius.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetBorderThickness(System.Int32)">
            <summary>
            Setting the window border thickness.
            </summary>
            <param name="thickness">The border thickness.</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetBorderRadius">
            <summary>
            Getting the current window border corner radii.
            </summary>
            <returns>Corner radii as SpaceVIL.Decorations.CornerRadius</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetBorderThickness">
            <summary>
            Getting the current window border thickness.
            </summary>
            <returns>The current thickness.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetBorderFill">
            <summary>
            Getting the current window border color.
            </summary>
            <returns>The border color as System.Drawing.Color</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetGLWID">
            <summary>
            Getting the GLFW ID of the window.
            </summary>
            <returns>ID of the window.</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetShadeColor(System.Drawing.Color)">
            <summary>
            Setting the dimmer color of the window. The dimmer appears when the current window opens a dialog window.
            </summary>
            <param name="color">The dimmer color as System.Drawing.Color</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetShadeColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the dimmer color of the window. The dimmer appears when the current window opens a dialog window.
            </summary>
            <param name="r">Red (0 - 255)</param>
            <param name="g">Green (0 - 255)</param>
            <param name="b">Blue (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetShadeColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting the dimmer color of the window. The dimmer appears when the current window opens a dialog window.
            </summary>
            <param name="r">Red (0 - 255)</param>
            <param name="g">Green (0 - 255)</param>
            <param name="b">Blue (0 - 255)</param>
            <param name="a">Alpha (0 - 255)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetShadeColor(System.Single,System.Single,System.Single)">
            <summary>
            Setting the dimmer color of the window. The dimmer appears when the current window opens a dialog window.
            </summary>
            <param name="r">Red (0.0f - 1.0f)</param>
            <param name="g">Green (0.0f - 1.0f)</param>
            <param name="b">Blue (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.SetShadeColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setting the dimmer color of the window. The dimmer appears when the current window opens a dialog window.
            </summary>
            <param name="r">Red (0.0f - 1.0f)</param>
            <param name="g">Green (0.0f - 1.0f)</param>
            <param name="b">Blue (0.0f - 1.0f)</param>
            <param name="a">Alpha (0.0f - 1.0f)</param>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetShadeColor">
            <summary>
            Getting the current dimmer color.
            </summary>
            <returns>The dimmer color as System.Drawing.Color</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetWorkArea">
            <summary>
            Getting the area of a primary monitor. The work area not occupied by global task bars or menu bars.
            </summary>
            <returns>Work area as SpaceVIL.Core.Area</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.GetDpiScale">
            <summary>
            Getting DPI scale for the current window.
            </summary>
            <returns>DPI scale as SpaceVIL.Core.Scale</returns>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Hold">
            <summary>
            Makes this window inactive. Window cannot receive and process any input events.
            <para/> Tip: to restore window activity use CoreWindow.Proceed().
            </summary>
        </member>
        <member name="M:SpaceVIL.CoreWindow.Proceed">
            <summary>
            Restores window activity. Window may receive and process any input events.
            <para/> Tip: used with CoreWindow.Hold() method which makes a window inactive.
            </summary>
        </member>
        <member name="T:SpaceVIL.DialogWindow">
            <summary>
            DialogWindow is an abstract class for modal window instances.
            <para/>DialogWindow extends CoreWindow class. 
            CoreWindow is an abstract class containing an implementation of common functionality for a window.
            </summary>
        </member>
        <member name="F:SpaceVIL.DialogWindow.OnCloseDialog">
            <summary>
            An event to describe the actions that must be performed after the dialog is closed.
            <para/> Event type: SpaceVIL.EventCommonMethod.
            <para/> Function arguments: none.
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogWindow.#ctor">
            <summary>
            Constructs a DialogWindow
            </summary>
        </member>
        <member name="M:SpaceVIL.DialogWindow.Show">
            <summary>
            Show the DialogWindow.
            </summary>
        </member>
        <member name="T:SpaceVIL.InputBox">
            <summary>
            InputBox - dialog window 
            for entering text and perform assigned actions. 
            <para/> Contains ACTION button, CANCEL button, titlebar. 
            </summary>
        </member>
        <member name="M:SpaceVIL.InputBox.GetResult">
            <summary>
            Getting text input result. Default: empty.
            </summary>
            <returns>Text result as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.InputBox.GetActionButton">
            <summary>
            Getting ACTION button for appearance customizing or assigning new actions.
            </summary>
            <returns>InputBox's OK button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.InputBox.GetCancelButton">
            <summary>
            Getting CANCEL button for appearance customizing or assigning new actions.
            </summary>
            <returns>InputBox's CANCEL button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.InputBox.SetCancelVisible(System.Boolean)">
            <summary>
            Setting CANCEL button visible of invisible.
            </summary>
            <param name="value">True: if you want CANCEL button to be visible. 
            False: if you want CANCEL button to be invisible.</param>
        </member>
        <member name="M:SpaceVIL.InputBox.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a InputBox with specified default text, 
            title and name of ACTION button.
            </summary>
            <param name="title">Title of InputBox as System.String.</param>
            <param name="actionName">Name of ACTION button as System.String.</param>
            <param name="textByDefault">Default text of text field as System.String.</param>
        </member>
        <member name="M:SpaceVIL.InputBox.#ctor(System.String,System.String)">
            <summary>
            Constructs a InputBox with specified 
            title and name of ACTION button.
            </summary>
            <param name="title">Title of InputBox as System.String.</param>
            <param name="actionName">Name of ACTION button as System.String.</param>
        </member>
        <member name="M:SpaceVIL.InputBox.InitWindow">
            <summary>
            Initializing all elements in the InputBox. 
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputBox.Show">
            <summary>
            Show InputBox window.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputBox.Close">
            <summary>
            Closes InputBox window.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputBox.SelectAll">
            <summary>
            Select all text in the text field.
            </summary>
        </member>
        <member name="M:SpaceVIL.InputBox.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style for entire InputBox.
            <para/> Inner styles: "window", "textedit", "layout", "toolbar", "button".
            </summary>
            <param name="style">A style for InputBox as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.MessageBox">
            <summary>
            MessageBox - a modal window for displaying any messages with ability to reply to them. 
            It supports custom toolbar to make user's reply flexible.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetResult">
            <summary>
            Getting MessageBox result.
            <para/> Default: False
            </summary>
            <returns>True: OK button was clicked. False: Close button or Cancel button was clicked.</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetUserButtonResult">
            <summary>
            Getting result from custom toolbar (if it was created).
            </summary>
            <returns>Id of clicked button (see AddUserButton(ButtonCore button, int id)).</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetOkButton">
            <summary>
            Getting OK button for appearance customizing or assigning new actions.
            </summary>
            <returns>MessageBox's OK button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetCancelButton">
            <summary>
            Getting CANCEL button for appearance customizing or assigning new actions.
            </summary>
            <returns>MessageBox's CANCEL button as SpaceVIL.ButtonCore.</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.#ctor">
            <summary>
            Default MessageBox constructor.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageBox.#ctor(System.String,System.String)">
            <summary>
            Constructs a MessageBox with specified message and title.
            </summary>
            <param name="message">Message to a user as System.String.</param>
            <param name="title">Title of MessageBox as System.String.</param>
        </member>
        <member name="M:SpaceVIL.MessageBox.SetMessageText(System.String)">
            <summary>
            Setting a text of message of MessageBox.
            </summary>
            <param name="text">Text of message as System.String.</param>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetMessageText">
            <summary>
            Getting the current text of message of MessageBox.
            </summary>
            <returns>The current text of message as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.SetTitle(System.String)">
            <summary>
            Setting a text of title of MessageBox.
            </summary>
            <param name="title">Text of title as System.String.</param>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetTitle">
            <summary>
            Getting the current text of title of MessageBox.
            </summary>
            <returns>The current text of title as System.String.</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.InitWindow">
            <summary>
            Initialize MessageBox window.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageBox.Show">
            <summary>
            Show MessageBox window.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageBox.Close">
            <summary>
            Close MessageBox window.
            </summary>
        </member>
        <member name="M:SpaceVIL.MessageBox.AddUserButton(SpaceVIL.ButtonCore,System.Int32)">
            <summary>
            Adding a custom user button to toolbal with the specified ID.
            </summary>
            <param name="button">User button as SpaceVIL.ButtonCore.</param>
            <param name="id">Button's ID as System.Int32.</param>
        </member>
        <member name="M:SpaceVIL.MessageBox.GetDialogButtonStyle">
            <summary>
            Getting the current style of a custom user button (that placed into user's toolbar).
            </summary>
            <returns>The current style of custom user button as SpaceVIL.Decorations.Style.</returns>
        </member>
        <member name="M:SpaceVIL.MessageBox.SetDialogButtonStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style for a custom user button (that placed into user's toolbar).
            </summary>
            <param name="style">A style for custom user button as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="M:SpaceVIL.MessageBox.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting a style for entire MessageBox.
            <para/> Inner styles: "window", "message", "layout", "toolbar", "userbar" (custom toolbar), "button".
            </summary>
            <param name="style">A style for MessageBox as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.OpenEntryBox">
            <summary>
            OpenEntryBox is dialog window for browsing file system 
            to select a file or folder to open or save.
            Support create/rename/delete files and folders, navigate shortcuts, file filtering.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.GetResult">
            <summary>
            Getting full path of selected fyle system entry.
            </summary>
            <returns>Full path of selected fyle system entry.</returns>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.SetDefaultPath(System.String)">
            <summary>
            Setting the default path that will be opened when OpenEntryBox is shown.
            </summary>
            <param name="path">Default path to open.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.SetTitle(System.String)">
            <summary>
            Setting a title text of the dialog window.
            </summary>
            <param name="title">Title text.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.GetTitle">
            <summary>
            Getting a title text of the dialog window.
            </summary>
            <returns>Title text.</returns>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.#ctor(System.String,SpaceVIL.Core.FileSystemEntryType,SpaceVIL.Core.OpenDialogType)">
            <summary>
            Constructs OpenEntryBox with title text, entry type and dialog type. 
            <para/> Entry type can be FileSystemEntryType.File or FileSystemEntryType.Directory. 
            <para/> Dialog type can be OpenDialogType.Open or OpenDialogType.Save.
            </summary>
            <param name="title">Title text.</param>
            <param name="entryType">Entry type as SpaceVIL.Core.FileSystemEntryType.</param>
            <param name="dialogType">Dialog type as SpaceVIL.Core.OpenDialogType.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.#ctor(System.String,SpaceVIL.Core.FileSystemEntryType)">
            <summary>
            Constructs OpenEntryBox with title text, entry type. Dialog type is OpenDialogType.Open.
            <para/> Entry type can be FileSystemEntryType.File or FileSystemEntryType.Directory. 
            </summary>
            <param name="title">Title text.</param>
            <param name="entryType">Entry type as SpaceVIL.Core.FileSystemEntryType.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.#ctor(System.String)">
            <summary>
            Constructs OpenEntryBox with title text. Entry type is FileSystemEntryType.File. 
            Dialog type is OpenDialogType.Open.
            </summary>
            <param name="title">Title text.</param>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.InitWindow">
            <summary>
            Initializing all elements in the OpenEntryBox.
            <para/> Notice: This method is mainly for overriding only. SpaceVIL calls 
            this method if necessary and no need to call it manually.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.RefreshFolder">
            <summary>
            Refresh opened folder.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.AddFilterExtensions(System.String[])">
            <summary>
            Adding file filter extensions. 
            <para/> Rule: "filter name (*.ext1, *.ext2, *.extN) ; *.ext1, *.ext2, *.extN&quot;
            <para/> Example 1: "Text files (*.txt) ; *.txt&quot;
            <para/> Example 2: "Images (*.png, *.bmp, *.jpg) ; *.png, *.bmp, *.jpg&quot;
            </summary>
            <param name="exts"> File filter extensions. </param>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.Show">
            <summary>
            Shows OpenEntryBox window.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.Close">
            <summary>
            Closes OpenEntryBox window.
            </summary>
        </member>
        <member name="M:SpaceVIL.OpenEntryBox.SetStyle(SpaceVIL.Decorations.Style)">
            <summary>
            Setting style of the OpenEntryBox.
            <para/> Inner styles: "window", "layout", "toolbar", "toolbarbutton",
            "buttonhidden", "addressline", "filenameline", "list", "controlpanel", 
            "okbutton", "cancelbutton", "filter", "filtertext", "divider".
            </summary>
            <param name="style">Style as SpaceVIL.Decorations.Style.</param>
        </member>
        <member name="T:SpaceVIL.WindowsBox">
            <summary>
            WindowsBox is a storage-class that provides an access to existing windows by name and Guid.
            </summary>
        </member>
        <member name="M:SpaceVIL.WindowsBox.TryShow(System.Guid)">
            <summary>
            Trying to show a window by its GUID.
            </summary>
            <param name="guid">GUID of the window.</param>
            <returns>True: if window with such GUID is exist. False: if window with such GUID is not exist.</returns>
        </member>
        <member name="M:SpaceVIL.WindowsBox.TryShow(System.String)">
            <summary>
            Trying to show a window by its name.
            </summary>
            <param name="name">Name of the window.</param>
            <returns>True: if window with such name is exist. False: if window with such name is not exist.</returns>
        </member>
        <member name="M:SpaceVIL.WindowsBox.GetWindowInstance(System.String)">
            <summary>
            Getting a window instance by its name.
            </summary>
            <param name="name">Name of the window.</param>
            <returns>CoreWindow link: if window with such name is exist. NULL: if window with such name is not exist.</returns>
        </member>
        <member name="M:SpaceVIL.WindowsBox.GetWindowInstance(System.Guid)">
            <summary>
            Getting a window instance by its GUID.
            </summary>
            <param name="guid">GUID of the window.</param>
            <returns>CoreWindow link: if window with such GUID is exist. NULL: if window with such GUID is not exist.</returns>
        </member>
        <member name="M:SpaceVIL.WindowsBox.GetCurrentFocusedWindow">
            <summary>
            Getting the current focused window.
            </summary>
            <returns>The current focused window as SpaceVIL.CoreWindow.</returns>
        </member>
        <member name="M:SpaceVIL.WindowsBox.GetWindowsList">
            <summary>
            Getting the list of existing windows in the application.
            </summary>
            <returns>The list of existing windows.</returns>
        </member>
        <member name="M:SpaceVIL.WindowsBox.PrintStoredWindows">
            <summary>
            Printing all existing windows in the application.
            </summary>
        </member>
    </members>
</doc>
